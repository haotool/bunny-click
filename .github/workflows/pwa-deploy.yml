# PWA 自動部署工作流程
# 基於 .cursor/rules/pwa.mdc 規範的自動化部署
# 建立時間: 2025-08-26T23:10:06+08:00 [time.now:Asia/Taipei]
# 負責人: haotool

name: 🚀 PWA 部署

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # 建置與測試
  build-and-test:
    name: 🏗️ 建置與測試
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4

      - name: 📦 設置 Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 安裝依賴
        run: npm ci

      - name: 🧪 執行測試
        run: npm run test:ci

      - name: 🏗️ 建置 PWA
        run: npm run build

      - name: 📦 上傳建置產物
        uses: actions/upload-artifact@v3
        with:
          name: pwa-dist
          path: dist/
          retention-days: 30

  # PWA 功能驗證
  pwa-validation:
    name: 📱 PWA 功能驗證
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4

      - name: 📦 設置 Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 安裝依賴
        run: npm ci

      - name: 📦 下載建置產物
        uses: actions/download-artifact@v3
        with:
          name: pwa-dist
          path: dist/

      - name: 📱 PWA 功能驗證
        run: npm run pwa:validate

      - name: 💡 Lighthouse PWA 檢查
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 部署到 GitHub Pages
  deploy-github-pages:
    name: 🌐 部署到 GitHub Pages
    runs-on: ubuntu-latest
    needs: [build-and-test, pwa-validation]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4

      - name: 📦 下載建置產物
        uses: actions/download-artifact@v3
        with:
          name: pwa-dist
          path: dist/

      - name: 📄 設置 GitHub Pages
        uses: actions/configure-pages@v3

      - name: 📤 上傳 Pages 產物
        uses: actions/upload-pages-artifact@v2
        with:
          path: dist/

      - name: 🚀 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # 建立 Release
  create-release:
    name: 📦 建立 Release
    runs-on: ubuntu-latest
    needs: [build-and-test, pwa-validation]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4

      - name: 📦 下載建置產物
        uses: actions/download-artifact@v3
        with:
          name: pwa-dist
          path: dist/

      - name: 📦 打包 Release
        run: |
          cd dist
          zip -r ../bunny-click-${{ github.ref_name }}.zip .
          cd ..

      - name: 📝 生成 Release Notes
        id: release_notes
        run: |
          echo "## 🎮 Bunny Click PWA v${{ github.ref_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### ✨ 新功能" >> release_notes.md
          echo "- PWA 自動更新機制" >> release_notes.md
          echo "- 開發階段 Service Worker 測試" >> release_notes.md
          echo "- 標準化程式碼品質檢查" >> release_notes.md
          echo "- 完整的專案進度追蹤" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 技術改善" >> release_notes.md
          echo "- 升級 Vite PWA 配置最佳實踐" >> release_notes.md
          echo "- 實施品質門檻自動化檢查" >> release_notes.md
          echo "- 建立 Lighthouse CI 流程" >> release_notes.md
          echo "- 強化 pre-commit hooks" >> release_notes.md

      - name: 🏷️ 建立 GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Bunny Click PWA ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: 📎 上傳 Release 檔案
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bunny-click-${{ github.ref_name }}.zip
          asset_name: bunny-click-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  # 部署通知
  deployment-notification:
    name: 📢 部署通知
    runs-on: ubuntu-latest
    needs: [deploy-github-pages]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 📊 部署狀態摘要
        run: |
          echo "## 🚀 PWA 部署完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 PWA 功能" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Service Worker 自動更新" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 離線功能支援" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 安裝提示功能" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PWA Manifest 完整" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 連結" >> $GITHUB_STEP_SUMMARY
          echo "- [🌐 線上遊戲](https://your-username.github.io/bunny-click/)" >> $GITHUB_STEP_SUMMARY
          echo "- [📊 Lighthouse 報告](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
