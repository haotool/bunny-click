d6e30b086d949f5c4d8909d5af329041
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storage = exports.gameStorage = exports.StorageAdapter = exports.GameStorage = void 0;
var _localStorage = require("./localStorage.js");
var _indexedDB = require("./indexedDB.js");
/**
 * Áµ±‰∏ÄÂÑ≤Â≠òÈÅ©ÈÖçÂô® - Storage Adapter
 * Êèê‰æõ LocalStorage Ëàá IndexedDB ÁöÑÁµ±‰∏Ä‰ªãÈù¢
 * Âü∫ÊñºÈÅ©ÈÖçÂô®Ê®°ÂºèË®≠Ë®àÔºåÊîØÊè¥Ëá™ÂãïÂõûÈÄÄËàáÂÆπÈáèÁÆ°ÁêÜ
 * 
 * @author haotool
 * @version 7.2.3
 * @created 2025-08-18T02:39:58+08:00
 */

/**
 * ÂÑ≤Â≠òÈÅ©ÈÖçÂô®‰∏ªÈ°ûÂà•
 * Ëá™ÂãïÈÅ∏ÊìáÊúÄ‰Ω≥ÁöÑÂÑ≤Â≠òÊñπÊ°à‰∏¶Êèê‰æõÁµ±‰∏ÄAPI
 */
class StorageAdapter {
  constructor(options = {}) {
    this.config = {
      // È†êË®≠‰ΩøÁî® IndexedDBÔºåÂõûÈÄÄÂà∞ LocalStorage
      preferredStorage: 'indexeddb',
      // Ë≥áÊñôÂ∫´ÂêçÁ®±
      dbName: options.dbName || 'Bunny ClickDB',
      // ÁâàÊú¨Ëôü
      version: options.version || 1,
      // ÂÆπÈáèË≠¶ÂëäÈñæÂÄº (5MB)
      quotaWarningThreshold: options.quotaWarningThreshold || 5 * 1024 * 1024,
      // ÊòØÂê¶ÂïüÁî®Ë™øË©¶Ê®°Âºè
      debug: options.debug || false,
      ...options
    };
    this.primaryAdapter = null;
    this.fallbackAdapter = null;
    this.isInitialized = false;
    this.init();
  }

  /**
   * ÂàùÂßãÂåñÈÅ©ÈÖçÂô®
   */
  async init() {
    try {
      // Ê™¢Ê∏¨ IndexedDB ÊîØÊè¥ÊÄß
      if (this.config.preferredStorage === 'indexeddb' && this.isIndexedDBSupported()) {
        this.primaryAdapter = new _indexedDB.IndexedDBAdapter(this.config);
        this.fallbackAdapter = new _localStorage.LocalStorageAdapter(this.config);
        await this.primaryAdapter.init();
        this.log('‚úÖ IndexedDB ÂàùÂßãÂåñÊàêÂäüÔºåLocalStorage ‰ΩúÁÇ∫ÂæåÂÇô');
      } else {
        // Áõ¥Êé•‰ΩøÁî® LocalStorage
        this.primaryAdapter = new _localStorage.LocalStorageAdapter(this.config);
        this.log('üìù ‰ΩøÁî® LocalStorage ‰ΩúÁÇ∫‰∏ªË¶ÅÂÑ≤Â≠ò');
      }
      await this.primaryAdapter.init();
      this.isInitialized = true;

      // Ê™¢Êü•ÂÑ≤Â≠òÈÖçÈ°ç
      await this.checkStorageQuota();
    } catch (error) {
      console.error('‚ùå ÂÑ≤Â≠òÈÅ©ÈÖçÂô®ÂàùÂßãÂåñÂ§±Êïó:', error);

      // ÂõûÈÄÄÂà∞ LocalStorage
      if (this.fallbackAdapter) {
        this.log('üîÑ ÂõûÈÄÄÂà∞ LocalStorage');
        this.primaryAdapter = this.fallbackAdapter;
        await this.primaryAdapter.init();
        this.isInitialized = true;
      } else {
        throw new Error('ÊâÄÊúâÂÑ≤Â≠òÈÅ∏È†ÖÂùá‰∏çÂèØÁî®');
      }
    }
  }

  /**
   * Ê™¢Ê∏¨ IndexedDB ÊîØÊè¥ÊÄß
   */
  isIndexedDBSupported() {
    try {
      return 'indexedDB' in window && window.indexedDB !== null && window.indexedDB !== undefined;
    } catch (e) {
      return false;
    }
  }

  /**
   * Ê™¢Êü•ÂÑ≤Â≠òÈÖçÈ°ç
   */
  async checkStorageQuota() {
    try {
      if ('storage' in navigator && 'estimate' in navigator.storage) {
        const estimate = await navigator.storage.estimate();
        const used = estimate.usage || 0;
        const total = estimate.quota || 0;
        this.log(`üìä ÂÑ≤Â≠ò‰ΩøÁî®ÁãÄÊ≥Å: ${this.formatBytes(used)} / ${this.formatBytes(total)}`);
        if (used > this.config.quotaWarningThreshold) {
          console.warn(`‚ö†Ô∏è ÂÑ≤Â≠òÁ©∫Èñì‰ΩøÁî®ÈáèËºÉÈ´ò: ${this.formatBytes(used)}`);
        }
        return {
          used,
          total,
          percentage: total > 0 ? used / total * 100 : 0
        };
      }
    } catch (error) {
      this.log('‚ö†Ô∏è ÁÑ°Ê≥ïÊ™¢Êü•ÂÑ≤Â≠òÈÖçÈ°ç:', error);
    }
    return null;
  }

  /**
   * Ê†ºÂºèÂåñ‰ΩçÂÖÉÁµÑÂ§ßÂ∞è
   */
  formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * ÂÑ≤Â≠òË≥áÊñô
   */
  async setItem(key, value) {
    await this.ensureInitialized();
    try {
      await this.primaryAdapter.setItem(key, value);
      this.log(`üíæ ÂÑ≤Â≠òÊàêÂäü: ${key}`);
    } catch (error) {
      console.error(`‚ùå ÂÑ≤Â≠òÂ§±Êïó ${key}:`, error);

      // ÂòóË©¶‰ΩøÁî®ÂæåÂÇôÈÅ©ÈÖçÂô®
      if (this.fallbackAdapter && this.primaryAdapter !== this.fallbackAdapter) {
        try {
          await this.fallbackAdapter.setItem(key, value);
          this.log(`üíæ ÂæåÂÇôÂÑ≤Â≠òÊàêÂäü: ${key}`);
        } catch (fallbackError) {
          console.error(`‚ùå ÂæåÂÇôÂÑ≤Â≠ò‰πüÂ§±Êïó ${key}:`, fallbackError);
          throw fallbackError;
        }
      } else {
        throw error;
      }
    }
  }

  /**
   * ËÆÄÂèñË≥áÊñô
   */
  async getItem(key) {
    await this.ensureInitialized();
    try {
      const value = await this.primaryAdapter.getItem(key);
      if (value !== null) {
        this.log(`üìñ ËÆÄÂèñÊàêÂäü: ${key}`);
        return value;
      }
    } catch (error) {
      console.error(`‚ùå ËÆÄÂèñÂ§±Êïó ${key}:`, error);
    }

    // ÂòóË©¶ÂæûÂæåÂÇôÈÅ©ÈÖçÂô®ËÆÄÂèñ
    if (this.fallbackAdapter && this.primaryAdapter !== this.fallbackAdapter) {
      try {
        const value = await this.fallbackAdapter.getItem(key);
        if (value !== null) {
          this.log(`üìñ ÂæåÂÇôËÆÄÂèñÊàêÂäü: ${key}`);
          // ÂêåÊ≠•Âà∞‰∏ªÈÅ©ÈÖçÂô®
          try {
            await this.primaryAdapter.setItem(key, value);
          } catch (syncError) {
            this.log(`‚ö†Ô∏è ÂêåÊ≠•Âà∞‰∏ªÈÅ©ÈÖçÂô®Â§±Êïó: ${syncError.message}`);
          }
          return value;
        }
      } catch (fallbackError) {
        console.error(`‚ùå ÂæåÂÇôËÆÄÂèñ‰πüÂ§±Êïó ${key}:`, fallbackError);
      }
    }
    return null;
  }

  /**
   * ÁßªÈô§Ë≥áÊñô
   */
  async removeItem(key) {
    await this.ensureInitialized();
    const promises = [];

    // Âæû‰∏ªÈÅ©ÈÖçÂô®ÁßªÈô§
    promises.push(this.primaryAdapter.removeItem(key).catch(error => {
      console.error(`‚ùå ‰∏ªÈÅ©ÈÖçÂô®ÁßªÈô§Â§±Êïó ${key}:`, error);
    }));

    // ÂæûÂæåÂÇôÈÅ©ÈÖçÂô®ÁßªÈô§
    if (this.fallbackAdapter && this.primaryAdapter !== this.fallbackAdapter) {
      promises.push(this.fallbackAdapter.removeItem(key).catch(error => {
        console.error(`‚ùå ÂæåÂÇôÈÅ©ÈÖçÂô®ÁßªÈô§Â§±Êïó ${key}:`, error);
      }));
    }
    await Promise.all(promises);
    this.log(`üóëÔ∏è ÁßªÈô§ÂÆåÊàê: ${key}`);
  }

  /**
   * Ê∏ÖÁ©∫ÊâÄÊúâË≥áÊñô
   */
  async clear() {
    await this.ensureInitialized();
    const promises = [];
    promises.push(this.primaryAdapter.clear().catch(error => {
      console.error('‚ùå ‰∏ªÈÅ©ÈÖçÂô®Ê∏ÖÁ©∫Â§±Êïó:', error);
    }));
    if (this.fallbackAdapter && this.primaryAdapter !== this.fallbackAdapter) {
      promises.push(this.fallbackAdapter.clear().catch(error => {
        console.error('‚ùå ÂæåÂÇôÈÅ©ÈÖçÂô®Ê∏ÖÁ©∫Â§±Êïó:', error);
      }));
    }
    await Promise.all(promises);
    this.log('üßπ ÂÑ≤Â≠òÊ∏ÖÁ©∫ÂÆåÊàê');
  }

  /**
   * Áç≤ÂèñÊâÄÊúâÈçµÂêç
   */
  async keys() {
    await this.ensureInitialized();
    return await this.primaryAdapter.keys();
  }

  /**
   * Áç≤ÂèñÂÑ≤Â≠òÂ§ßÂ∞è
   */
  async size() {
    await this.ensureInitialized();
    return await this.primaryAdapter.size();
  }

  /**
   * Á¢∫‰øùÈÅ©ÈÖçÂô®Â∑≤ÂàùÂßãÂåñ
   */
  async ensureInitialized() {
    if (!this.isInitialized) {
      await this.init();
    }
  }

  /**
   * Ë™øË©¶Êó•Ë™å
   */
  log(...args) {
    if (this.config.debug) {
      console.log('üóÉÔ∏è StorageAdapter:', ...args);
    }
  }

  /**
   * Áç≤ÂèñÈÅ©ÈÖçÂô®Ë≥áË®ä
   */
  getAdapterInfo() {
    return {
      primary: this.primaryAdapter?.constructor.name || 'None',
      fallback: this.fallbackAdapter?.constructor.name || 'None',
      isInitialized: this.isInitialized,
      config: this.config
    };
  }
}

// Âª∫Á´ãÈ†êË®≠ÂØ¶‰æã
exports.StorageAdapter = StorageAdapter;
const storage = exports.storage = new StorageAdapter({
  debug: false,
  // ÁîüÁî¢Áí∞Â¢ÉÈóúÈñâË™øË©¶
  dbName: 'Bunny ClickDB',
  version: 1
});

// ÈÅäÊà≤Â∞àÁî®ÁöÑÈ´òÈöé API
class GameStorage {
  constructor(storageAdapter = storage) {
    this.storage = storageAdapter;
  }

  // ÂÑ≤Â≠òÈÅäÊà≤Ë®≠ÂÆö
  async saveSettings(settings) {
    await this.storage.setItem('game:settings', settings);
  }

  // ËÆÄÂèñÈÅäÊà≤Ë®≠ÂÆö
  async getSettings() {
    const defaultSettings = {
      soundEnabled: true,
      vibrationEnabled: true,
      effectsEnabled: true,
      theme: 'auto'
    };
    const settings = await this.storage.getItem('game:settings');
    return settings ? {
      ...defaultSettings,
      ...settings
    } : defaultSettings;
  }

  // ÂÑ≤Â≠òÊúÄÈ´òÂàÜ
  async saveHighScore(mode, score, tps) {
    const key = `game:highscore:${mode}`;
    const record = {
      score,
      tps,
      timestamp: Date.now(),
      date: new Date().toISOString()
    };
    await this.storage.setItem(key, record);
  }

  // Áç≤ÂèñÊúÄÈ´òÂàÜ
  async getHighScore(mode) {
    const key = `game:highscore:${mode}`;
    return await this.storage.getItem(key);
  }

  // ÂÑ≤Â≠òÈÅäÊà≤Ê≠∑Âè≤
  async saveGameHistory(gameData) {
    const history = await this.getGameHistory();
    history.unshift({
      ...gameData,
      id: Date.now(),
      timestamp: Date.now()
    });

    // ‰øùÁïôÊúÄËøë 100 Á≠ÜË®òÈåÑ
    if (history.length > 100) {
      history.splice(100);
    }
    await this.storage.setItem('game:history', history);
  }

  // Áç≤ÂèñÈÅäÊà≤Ê≠∑Âè≤
  async getGameHistory() {
    return (await this.storage.getItem('game:history')) || [];
  }

  // Ê∏ÖÁ©∫ÈÅäÊà≤Ë≥áÊñô
  async clearGameData() {
    const keys = await this.storage.keys();
    const gameKeys = keys.filter(key => key.startsWith('game:'));
    for (const key of gameKeys) {
      await this.storage.removeItem(key);
    }
  }
}

// Âª∫Á´ãÈÅäÊà≤ÂÑ≤Â≠òÂØ¶‰æã
exports.GameStorage = GameStorage;
const gameStorage = exports.gameStorage = new GameStorage();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,