888798347d519da01f18f6dbbb1a4989
"use strict";

/**
 * 遊戲引擎測試
 * 測試 GameEngine、TPSCalculator、InputManager 等核心功能
 *
 * @author haotool
 * @version 7.2.3
 * @created 2025-08-18T02:39:58+08:00
 */

// Mock DOM 環境
global.performance = {
  now: jest.fn(() => Date.now())
};
global.window = {
  performance: global.performance,
  addEventListener: jest.fn(),
  removeEventListener: jest.fn()
};
global.document = {
  addEventListener: jest.fn(),
  removeEventListener: jest.fn(),
  getElementById: jest.fn(id => ({
    textContent: '',
    style: {},
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  }))
};
describe('TPSCalculator', () => {
  let tpsCalculator;
  beforeEach(() => {
    // 模擬 TPSCalculator 類別
    class TPSCalculator {
      constructor(windowSize = 1000) {
        this.windowSize = windowSize;
        this.clickBuffer = [];
        this.updateInterval = 100;
      }
      addClick(timestamp = performance.now()) {
        this.clickBuffer.push(timestamp);
        this.cleanOldClicks(timestamp);
      }
      cleanOldClicks(currentTime) {
        this.clickBuffer = this.clickBuffer.filter(time => currentTime - time <= this.windowSize);
      }
      calculateTPS() {
        return this.clickBuffer.length;
      }
      getCurrentTPS() {
        return this.calculateTPS();
      }
      getAverageTPS() {
        if (this.clickBuffer.length === 0) return 0;
        const timeSpan = Math.max(this.clickBuffer[this.clickBuffer.length - 1] - this.clickBuffer[0], this.windowSize);
        return this.clickBuffer.length * 1000 / timeSpan;
      }
      getPeakTPS() {
        let peak = 0;
        const bufferCopy = [...this.clickBuffer];
        for (let i = 0; i < bufferCopy.length; i++) {
          const windowStart = bufferCopy[i];
          const windowEnd = windowStart + this.windowSize;
          const clicksInWindow = bufferCopy.filter(time => time >= windowStart && time <= windowEnd).length;
          peak = Math.max(peak, clicksInWindow);
        }
        return peak;
      }
      getStatistics() {
        return {
          current: this.getCurrentTPS(),
          average: this.getAverageTPS(),
          peak: this.getPeakTPS(),
          total: this.clickBuffer.length,
          duration: this.clickBuffer.length > 0 ? this.clickBuffer[this.clickBuffer.length - 1] - this.clickBuffer[0] : 0
        };
      }
      reset() {
        this.clickBuffer = [];
      }
      setWindowSize(size) {
        this.windowSize = size;
      }
    }
    tpsCalculator = new TPSCalculator();
  });
  describe('基本功能', () => {
    test('應該能正確添加點擊', () => {
      expect(tpsCalculator.getCurrentTPS()).toBe(0);
      tpsCalculator.addClick(1000);
      expect(tpsCalculator.getCurrentTPS()).toBe(1);
      tpsCalculator.addClick(1100);
      expect(tpsCalculator.getCurrentTPS()).toBe(2);
    });
    test('應該能計算當前 TPS', () => {
      const baseTime = 1000;

      // 在 1 秒內添加 10 次點擊
      for (let i = 0; i < 10; i++) {
        tpsCalculator.addClick(baseTime + i * 100);
      }
      expect(tpsCalculator.getCurrentTPS()).toBe(10);
    });
    test('應該能清理過期點擊', () => {
      const baseTime = 1000;

      // 添加舊點擊
      tpsCalculator.addClick(baseTime);
      tpsCalculator.addClick(baseTime + 100);

      // 添加新點擊，應該清理舊的
      tpsCalculator.addClick(baseTime + 1500); // 超過 1000ms 窗口

      expect(tpsCalculator.getCurrentTPS()).toBe(1);
    });
    test('應該能重置計算器', () => {
      tpsCalculator.addClick(1000);
      tpsCalculator.addClick(1100);
      expect(tpsCalculator.getCurrentTPS()).toBe(2);
      tpsCalculator.reset();
      expect(tpsCalculator.getCurrentTPS()).toBe(0);
    });
  });
  describe('統計功能', () => {
    test('應該能計算平均 TPS', () => {
      const baseTime = 1000;

      // 在 2 秒內均勻添加 20 次點擊
      for (let i = 0; i < 20; i++) {
        tpsCalculator.addClick(baseTime + i * 100);
      }
      const avgTPS = tpsCalculator.getAverageTPS();
      expect(avgTPS).toBeCloseTo(10, 1); // 約 10 TPS
    });
    test('應該能計算峰值 TPS', () => {
      const baseTime = 1000;

      // 前 500ms 內快速點擊 10 次
      for (let i = 0; i < 10; i++) {
        tpsCalculator.addClick(baseTime + i * 50);
      }

      // 後 500ms 內慢速點擊 5 次
      for (let i = 0; i < 5; i++) {
        tpsCalculator.addClick(baseTime + 500 + i * 100);
      }
      const peakTPS = tpsCalculator.getPeakTPS();
      expect(peakTPS).toBeGreaterThanOrEqual(10);
    });
    test('應該能獲取完整統計', () => {
      tpsCalculator.addClick(1000);
      tpsCalculator.addClick(1100);
      tpsCalculator.addClick(1200);
      const stats = tpsCalculator.getStatistics();
      expect(stats).toHaveProperty('current');
      expect(stats).toHaveProperty('average');
      expect(stats).toHaveProperty('peak');
      expect(stats).toHaveProperty('total');
      expect(stats).toHaveProperty('duration');
      expect(stats.current).toBe(3);
      expect(stats.total).toBe(3);
      expect(stats.duration).toBe(200);
    });
  });
  describe('配置功能', () => {
    test('應該能設定窗口大小', () => {
      tpsCalculator.setWindowSize(500); // 設定為 500ms

      tpsCalculator.addClick(1000);
      tpsCalculator.addClick(1200);
      tpsCalculator.addClick(1600); // 超過 500ms 窗口

      expect(tpsCalculator.getCurrentTPS()).toBe(1); // 只有最後一個
    });
  });
});
describe('InputManager', () => {
  let inputManager;
  let mockGameEngine;
  beforeEach(() => {
    // Mock GameEngine
    mockGameEngine = {
      handleClick: jest.fn(),
      handleMultiTouch: jest.fn(),
      getState: jest.fn(() => ({
        mode: 'playing'
      }))
    };

    // 模擬 InputManager 類別
    class InputManager {
      constructor(gameEngine) {
        this.gameEngine = gameEngine;
        this.touchPoints = new Map();
        this.debounceDelay = 16;
        this.lastClickTime = 0;
        this.hapticEnabled = true;
      }
      handleTouchStart(event) {
        const touches = Array.from(event.touches || [event]);
        touches.forEach((touch, index) => {
          const touchData = {
            x: touch.clientX || touch.x || 0,
            y: touch.clientY || touch.y || 0,
            timestamp: performance.now(),
            playerId: this.determinePlayers(touch.clientX || touch.x || 0)
          };
          this.touchPoints.set(touch.identifier || index, touchData);

          // 防抖動處理
          const now = performance.now();
          if (now - this.lastClickTime > this.debounceDelay) {
            this.gameEngine.handleClick(touchData);
            this.lastClickTime = now;
          }
        });
      }
      handleTouchEnd(event) {
        const touches = Array.from(event.changedTouches || [event]);
        touches.forEach((touch, index) => {
          this.touchPoints.delete(touch.identifier || index);
        });
      }
      handleMouseClick(event) {
        const clickData = {
          x: event.clientX || 0,
          y: event.clientY || 0,
          timestamp: performance.now(),
          playerId: this.determinePlayers(event.clientX || 0),
          type: 'mouse'
        };
        const now = performance.now();
        if (now - this.lastClickTime > this.debounceDelay) {
          this.gameEngine.handleClick(clickData);
          this.lastClickTime = now;
        }
      }
      determinePlayers(x) {
        // 簡單的左右分割邏輯
        const screenWidth = 800; // 假設螢幕寬度
        return x < screenWidth / 2 ? 1 : 2;
      }
      setDebounceDelay(delay) {
        this.debounceDelay = delay;
      }
      enableHapticFeedback(enabled) {
        this.hapticEnabled = enabled;
      }
      getActiveTouches() {
        return this.touchPoints.size;
      }
    }
    inputManager = new InputManager(mockGameEngine);
  });
  describe('觸控事件處理', () => {
    test('應該能處理單點觸控', () => {
      const mockTouchEvent = {
        touches: [{
          identifier: 0,
          clientX: 100,
          clientY: 200
        }]
      };
      inputManager.handleTouchStart(mockTouchEvent);
      expect(mockGameEngine.handleClick).toHaveBeenCalledWith(expect.objectContaining({
        x: 100,
        y: 200,
        playerId: 1,
        // 左側
        timestamp: expect.any(Number)
      }));
    });
    test('應該能處理多點觸控', () => {
      const mockTouchEvent = {
        touches: [{
          identifier: 0,
          clientX: 100,
          clientY: 200
        }, {
          identifier: 1,
          clientX: 600,
          clientY: 300
        }]
      };
      inputManager.handleTouchStart(mockTouchEvent);
      expect(mockGameEngine.handleClick).toHaveBeenCalledTimes(2);
      expect(inputManager.getActiveTouches()).toBe(2);
    });
    test('應該能處理觸控結束', () => {
      // 先開始觸控
      const startEvent = {
        touches: [{
          identifier: 0,
          clientX: 100,
          clientY: 200
        }]
      };
      inputManager.handleTouchStart(startEvent);
      expect(inputManager.getActiveTouches()).toBe(1);

      // 結束觸控
      const endEvent = {
        changedTouches: [{
          identifier: 0
        }]
      };
      inputManager.handleTouchEnd(endEvent);
      expect(inputManager.getActiveTouches()).toBe(0);
    });
  });
  describe('滑鼠事件處理', () => {
    test('應該能處理滑鼠點擊', () => {
      const mockMouseEvent = {
        clientX: 300,
        clientY: 400
      };
      inputManager.handleMouseClick(mockMouseEvent);
      expect(mockGameEngine.handleClick).toHaveBeenCalledWith(expect.objectContaining({
        x: 300,
        y: 400,
        playerId: 1,
        type: 'mouse',
        timestamp: expect.any(Number)
      }));
    });
  });
  describe('玩家判定', () => {
    test('應該正確判定左側玩家', () => {
      const leftX = 200;
      const playerId = inputManager.determinePlayers(leftX);
      expect(playerId).toBe(1);
    });
    test('應該正確判定右側玩家', () => {
      const rightX = 600;
      const playerId = inputManager.determinePlayers(rightX);
      expect(playerId).toBe(2);
    });
  });
  describe('防抖動機制', () => {
    test('應該防止快速重複點擊', () => {
      const mockEvent = {
        touches: [{
          identifier: 0,
          clientX: 100,
          clientY: 200
        }]
      };

      // 快速連續點擊
      inputManager.handleTouchStart(mockEvent);
      inputManager.handleTouchStart(mockEvent);
      inputManager.handleTouchStart(mockEvent);

      // 應該只處理一次（防抖動）
      expect(mockGameEngine.handleClick).toHaveBeenCalledTimes(1);
    });
    test('應該允許設定防抖動延遲', () => {
      inputManager.setDebounceDelay(50);
      expect(inputManager.debounceDelay).toBe(50);
    });
  });
  describe('配置功能', () => {
    test('應該能啟用/停用震動回饋', () => {
      inputManager.enableHapticFeedback(false);
      expect(inputManager.hapticEnabled).toBe(false);
      inputManager.enableHapticFeedback(true);
      expect(inputManager.hapticEnabled).toBe(true);
    });
  });
});
describe('GameEngine', () => {
  let gameEngine;
  let mockTPSCalculator;
  let mockInputManager;
  let mockAudioManager;
  beforeEach(() => {
    // Mock TPS Calculator
    mockTPSCalculator = {
      addClick: jest.fn(),
      getCurrentTPS: jest.fn(() => 15),
      getStatistics: jest.fn(() => ({
        current: 15,
        average: 12,
        peak: 20,
        total: 150
      })),
      reset: jest.fn()
    };

    // Mock Audio Manager
    mockAudioManager = {
      playClickSound: jest.fn(),
      playSuccessSound: jest.fn(),
      setEnabled: jest.fn()
    };

    // 模擬 GameEngine 類別
    class GameEngine {
      constructor() {
        this.state = {
          mode: 'idle',
          gameType: 'single',
          duration: 30000,
          remainingTime: 0,
          players: [{
            id: 1,
            score: 0,
            tps: 0,
            active: false
          }, {
            id: 2,
            score: 0,
            tps: 0,
            active: false
          }]
        };
        this.tpsCalculator = mockTPSCalculator;
        this.audioManager = mockAudioManager;
        this.gameTimer = null;
        this.updateInterval = null;
      }
      startGame(mode, duration) {
        this.state.mode = 'playing';
        this.state.gameType = mode;
        this.state.duration = duration;
        this.state.remainingTime = duration;

        // 重置統計
        this.tpsCalculator.reset();
        this.state.players.forEach(player => {
          player.score = 0;
          player.tps = 0;
          player.active = true;
        });

        // 開始計時器
        this.gameTimer = setTimeout(() => {
          this.endGame();
        }, duration);

        // 開始更新循環
        this.updateInterval = setInterval(() => {
          this.updateGame();
        }, 100);
      }
      pauseGame() {
        if (this.state.mode === 'playing') {
          this.state.mode = 'paused';
          this.clearTimers();
        }
      }
      resumeGame() {
        if (this.state.mode === 'paused') {
          this.state.mode = 'playing';
          this.startTimers();
        }
      }
      endGame() {
        this.state.mode = 'ended';
        this.clearTimers();
        const stats = this.tpsCalculator.getStatistics();
        return {
          mode: this.state.gameType,
          duration: this.state.duration,
          score: this.getTotalScore(),
          peakTPS: stats.peak,
          averageTPS: stats.average,
          players: this.state.players.map(p => ({
            ...p
          }))
        };
      }
      handleClick(clickEvent) {
        if (this.state.mode !== 'playing') return;
        const player = this.state.players.find(p => p.id === clickEvent.playerId);
        if (player && player.active) {
          player.score++;
          this.tpsCalculator.addClick(clickEvent.timestamp);
          this.audioManager.playClickSound();
        }
      }
      updateGame() {
        if (this.state.mode === 'playing') {
          this.state.remainingTime = Math.max(0, this.state.remainingTime - 100);

          // 更新 TPS
          const currentTPS = this.tpsCalculator.getCurrentTPS();
          this.state.players.forEach(player => {
            if (player.active) {
              player.tps = currentTPS;
            }
          });
          if (this.state.remainingTime <= 0) {
            this.endGame();
          }
        }
      }
      getState() {
        return {
          ...this.state
        };
      }
      setState(newState) {
        this.state = {
          ...this.state,
          ...newState
        };
      }
      getTPS() {
        return this.tpsCalculator.getCurrentTPS();
      }
      getScore() {
        return this.getTotalScore();
      }
      getTotalScore() {
        return this.state.players.reduce((total, player) => total + player.score, 0);
      }
      clearTimers() {
        if (this.gameTimer) {
          clearTimeout(this.gameTimer);
          this.gameTimer = null;
        }
        if (this.updateInterval) {
          clearInterval(this.updateInterval);
          this.updateInterval = null;
        }
      }
      startTimers() {
        // 重新開始計時器（簡化實作）
        this.gameTimer = setTimeout(() => {
          this.endGame();
        }, this.state.remainingTime);
      }
    }
    gameEngine = new GameEngine();
  });
  afterEach(() => {
    gameEngine.clearTimers();
  });
  describe('遊戲狀態管理', () => {
    test('應該正確初始化遊戲狀態', () => {
      const state = gameEngine.getState();
      expect(state.mode).toBe('idle');
      expect(state.players).toHaveLength(2);
      expect(state.players[0].score).toBe(0);
      expect(state.players[1].score).toBe(0);
    });
    test('應該能開始遊戲', () => {
      gameEngine.startGame('single', 30000);
      const state = gameEngine.getState();
      expect(state.mode).toBe('playing');
      expect(state.gameType).toBe('single');
      expect(state.duration).toBe(30000);
      expect(state.remainingTime).toBe(30000);
      expect(mockTPSCalculator.reset).toHaveBeenCalled();
    });
    test('應該能暫停遊戲', () => {
      gameEngine.startGame('single', 30000);
      gameEngine.pauseGame();
      const state = gameEngine.getState();
      expect(state.mode).toBe('paused');
    });
    test('應該能恢復遊戲', () => {
      gameEngine.startGame('single', 30000);
      gameEngine.pauseGame();
      gameEngine.resumeGame();
      const state = gameEngine.getState();
      expect(state.mode).toBe('playing');
    });
    test('應該能結束遊戲並返回結果', () => {
      gameEngine.startGame('single', 30000);

      // 模擬一些點擊
      gameEngine.handleClick({
        playerId: 1,
        timestamp: 1000
      });
      gameEngine.handleClick({
        playerId: 1,
        timestamp: 1100
      });
      const result = gameEngine.endGame();
      expect(result).toHaveProperty('mode');
      expect(result).toHaveProperty('duration');
      expect(result).toHaveProperty('score');
      expect(result).toHaveProperty('peakTPS');
      expect(result).toHaveProperty('averageTPS');
      expect(result.mode).toBe('single');
      expect(result.duration).toBe(30000);
    });
  });
  describe('點擊處理', () => {
    test('應該正確處理玩家點擊', () => {
      gameEngine.startGame('single', 30000);
      const clickEvent = {
        playerId: 1,
        x: 100,
        y: 200,
        timestamp: 1000
      };
      gameEngine.handleClick(clickEvent);
      const state = gameEngine.getState();
      expect(state.players[0].score).toBe(1);
      expect(mockTPSCalculator.addClick).toHaveBeenCalledWith(1000);
      expect(mockAudioManager.playClickSound).toHaveBeenCalled();
    });
    test('非遊戲狀態下不應處理點擊', () => {
      const clickEvent = {
        playerId: 1,
        timestamp: 1000
      };
      gameEngine.handleClick(clickEvent);
      const state = gameEngine.getState();
      expect(state.players[0].score).toBe(0);
      expect(mockTPSCalculator.addClick).not.toHaveBeenCalled();
    });
    test('應該正確計算總分', () => {
      gameEngine.startGame('dual', 30000);

      // 玩家 1 點擊 3 次
      for (let i = 0; i < 3; i++) {
        gameEngine.handleClick({
          playerId: 1,
          timestamp: 1000 + i * 100
        });
      }

      // 玩家 2 點擊 2 次
      for (let i = 0; i < 2; i++) {
        gameEngine.handleClick({
          playerId: 2,
          timestamp: 2000 + i * 100
        });
      }
      expect(gameEngine.getTotalScore()).toBe(5);
    });
  });
  describe('統計功能', () => {
    test('應該能獲取當前 TPS', () => {
      const tps = gameEngine.getTPS();
      expect(tps).toBe(15);
      expect(mockTPSCalculator.getCurrentTPS).toHaveBeenCalled();
    });
    test('應該能獲取當前分數', () => {
      gameEngine.startGame('single', 30000);
      gameEngine.handleClick({
        playerId: 1,
        timestamp: 1000
      });
      gameEngine.handleClick({
        playerId: 1,
        timestamp: 1100
      });
      const score = gameEngine.getScore();
      expect(score).toBe(2);
    });
  });
});
describe('整合測試', () => {
  test('完整遊戲流程測試', () => {
    // 這個測試模擬一個完整的遊戲流程
    const mockGameEngine = {
      state: {
        mode: 'idle'
      },
      startGame: jest.fn(),
      handleClick: jest.fn(),
      endGame: jest.fn(),
      getState: jest.fn(() => ({
        mode: 'playing'
      }))
    };
    const mockInputManager = {
      setupEventListeners: jest.fn(),
      handleTouchStart: jest.fn(),
      setDebounceDelay: jest.fn()
    };

    // 1. 初始化
    expect(mockGameEngine.state.mode).toBe('idle');

    // 2. 開始遊戲
    mockGameEngine.startGame('single', 30000);
    expect(mockGameEngine.startGame).toHaveBeenCalledWith('single', 30000);

    // 3. 處理輸入
    const touchEvent = {
      touches: [{
        identifier: 0,
        clientX: 100,
        clientY: 200
      }]
    };
    mockInputManager.handleTouchStart(touchEvent);
    expect(mockInputManager.handleTouchStart).toHaveBeenCalledWith(touchEvent);

    // 4. 結束遊戲
    mockGameEngine.endGame();
    expect(mockGameEngine.endGame).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImplc3QiLCJmbiIsIkRhdGUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsInRleHRDb250ZW50Iiwic3R5bGUiLCJkZXNjcmliZSIsInRwc0NhbGN1bGF0b3IiLCJiZWZvcmVFYWNoIiwiVFBTQ2FsY3VsYXRvciIsImNvbnN0cnVjdG9yIiwid2luZG93U2l6ZSIsImNsaWNrQnVmZmVyIiwidXBkYXRlSW50ZXJ2YWwiLCJhZGRDbGljayIsInRpbWVzdGFtcCIsInB1c2giLCJjbGVhbk9sZENsaWNrcyIsImN1cnJlbnRUaW1lIiwiZmlsdGVyIiwidGltZSIsImNhbGN1bGF0ZVRQUyIsImxlbmd0aCIsImdldEN1cnJlbnRUUFMiLCJnZXRBdmVyYWdlVFBTIiwidGltZVNwYW4iLCJNYXRoIiwibWF4IiwiZ2V0UGVha1RQUyIsInBlYWsiLCJidWZmZXJDb3B5IiwiaSIsIndpbmRvd1N0YXJ0Iiwid2luZG93RW5kIiwiY2xpY2tzSW5XaW5kb3ciLCJnZXRTdGF0aXN0aWNzIiwiY3VycmVudCIsImF2ZXJhZ2UiLCJ0b3RhbCIsImR1cmF0aW9uIiwicmVzZXQiLCJzZXRXaW5kb3dTaXplIiwic2l6ZSIsInRlc3QiLCJleHBlY3QiLCJ0b0JlIiwiYmFzZVRpbWUiLCJhdmdUUFMiLCJ0b0JlQ2xvc2VUbyIsInBlYWtUUFMiLCJ0b0JlR3JlYXRlclRoYW5PckVxdWFsIiwic3RhdHMiLCJ0b0hhdmVQcm9wZXJ0eSIsImlucHV0TWFuYWdlciIsIm1vY2tHYW1lRW5naW5lIiwiaGFuZGxlQ2xpY2siLCJoYW5kbGVNdWx0aVRvdWNoIiwiZ2V0U3RhdGUiLCJtb2RlIiwiSW5wdXRNYW5hZ2VyIiwiZ2FtZUVuZ2luZSIsInRvdWNoUG9pbnRzIiwiTWFwIiwiZGVib3VuY2VEZWxheSIsImxhc3RDbGlja1RpbWUiLCJoYXB0aWNFbmFibGVkIiwiaGFuZGxlVG91Y2hTdGFydCIsImV2ZW50IiwidG91Y2hlcyIsIkFycmF5IiwiZnJvbSIsImZvckVhY2giLCJ0b3VjaCIsImluZGV4IiwidG91Y2hEYXRhIiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsInBsYXllcklkIiwiZGV0ZXJtaW5lUGxheWVycyIsInNldCIsImlkZW50aWZpZXIiLCJoYW5kbGVUb3VjaEVuZCIsImNoYW5nZWRUb3VjaGVzIiwiZGVsZXRlIiwiaGFuZGxlTW91c2VDbGljayIsImNsaWNrRGF0YSIsInR5cGUiLCJzY3JlZW5XaWR0aCIsInNldERlYm91bmNlRGVsYXkiLCJkZWxheSIsImVuYWJsZUhhcHRpY0ZlZWRiYWNrIiwiZW5hYmxlZCIsImdldEFjdGl2ZVRvdWNoZXMiLCJtb2NrVG91Y2hFdmVudCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwib2JqZWN0Q29udGFpbmluZyIsImFueSIsIk51bWJlciIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInN0YXJ0RXZlbnQiLCJlbmRFdmVudCIsIm1vY2tNb3VzZUV2ZW50IiwibGVmdFgiLCJyaWdodFgiLCJtb2NrRXZlbnQiLCJtb2NrVFBTQ2FsY3VsYXRvciIsIm1vY2tJbnB1dE1hbmFnZXIiLCJtb2NrQXVkaW9NYW5hZ2VyIiwicGxheUNsaWNrU291bmQiLCJwbGF5U3VjY2Vzc1NvdW5kIiwic2V0RW5hYmxlZCIsIkdhbWVFbmdpbmUiLCJzdGF0ZSIsImdhbWVUeXBlIiwicmVtYWluaW5nVGltZSIsInBsYXllcnMiLCJzY29yZSIsInRwcyIsImFjdGl2ZSIsImF1ZGlvTWFuYWdlciIsImdhbWVUaW1lciIsInN0YXJ0R2FtZSIsInBsYXllciIsInNldFRpbWVvdXQiLCJlbmRHYW1lIiwic2V0SW50ZXJ2YWwiLCJ1cGRhdGVHYW1lIiwicGF1c2VHYW1lIiwiY2xlYXJUaW1lcnMiLCJyZXN1bWVHYW1lIiwic3RhcnRUaW1lcnMiLCJnZXRUb3RhbFNjb3JlIiwiYXZlcmFnZVRQUyIsIm1hcCIsInAiLCJjbGlja0V2ZW50IiwiZmluZCIsImN1cnJlbnRUUFMiLCJzZXRTdGF0ZSIsIm5ld1N0YXRlIiwiZ2V0VFBTIiwiZ2V0U2NvcmUiLCJyZWR1Y2UiLCJjbGVhclRpbWVvdXQiLCJjbGVhckludGVydmFsIiwiYWZ0ZXJFYWNoIiwidG9IYXZlTGVuZ3RoIiwidG9IYXZlQmVlbkNhbGxlZCIsInJlc3VsdCIsIm5vdCIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ0b3VjaEV2ZW50Il0sInNvdXJjZXMiOlsiZ2FtZS1lbmdpbmUudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOmBiuaIsuW8leaTjua4rOipplxuICog5ris6KmmIEdhbWVFbmdpbmXjgIFUUFNDYWxjdWxhdG9y44CBSW5wdXRNYW5hZ2VyIOetieaguOW/g+WKn+iDvVxuICpcbiAqIEBhdXRob3IgaGFvdG9vbFxuICogQHZlcnNpb24gNy4yLjNcbiAqIEBjcmVhdGVkIDIwMjUtMDgtMThUMDI6Mzk6NTgrMDg6MDBcbiAqL1xuXG4vLyBNb2NrIERPTSDnkrDlooNcbmdsb2JhbC5wZXJmb3JtYW5jZSA9IHtcbiAgbm93OiBqZXN0LmZuKCgpID0+IERhdGUubm93KCkpLFxufTtcblxuZ2xvYmFsLndpbmRvdyA9IHtcbiAgcGVyZm9ybWFuY2U6IGdsb2JhbC5wZXJmb3JtYW5jZSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG59O1xuXG5nbG9iYWwuZG9jdW1lbnQgPSB7XG4gIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICBnZXRFbGVtZW50QnlJZDogamVzdC5mbihpZCA9PiAoe1xuICAgIHRleHRDb250ZW50OiAnJyxcbiAgICBzdHlsZToge30sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgfSkpLFxufTtcblxuZGVzY3JpYmUoJ1RQU0NhbGN1bGF0b3InLCAoKSA9PiB7XG4gIGxldCB0cHNDYWxjdWxhdG9yO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIOaooeaTrCBUUFNDYWxjdWxhdG9yIOmhnuWIpVxuICAgIGNsYXNzIFRQU0NhbGN1bGF0b3Ige1xuICAgICAgY29uc3RydWN0b3Iod2luZG93U2l6ZSA9IDEwMDApIHtcbiAgICAgICAgdGhpcy53aW5kb3dTaXplID0gd2luZG93U2l6ZTtcbiAgICAgICAgdGhpcy5jbGlja0J1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnVwZGF0ZUludGVydmFsID0gMTAwO1xuICAgICAgfVxuXG4gICAgICBhZGRDbGljayh0aW1lc3RhbXAgPSBwZXJmb3JtYW5jZS5ub3coKSkge1xuICAgICAgICB0aGlzLmNsaWNrQnVmZmVyLnB1c2godGltZXN0YW1wKTtcbiAgICAgICAgdGhpcy5jbGVhbk9sZENsaWNrcyh0aW1lc3RhbXApO1xuICAgICAgfVxuXG4gICAgICBjbGVhbk9sZENsaWNrcyhjdXJyZW50VGltZSkge1xuICAgICAgICB0aGlzLmNsaWNrQnVmZmVyID0gdGhpcy5jbGlja0J1ZmZlci5maWx0ZXIodGltZSA9PiBjdXJyZW50VGltZSAtIHRpbWUgPD0gdGhpcy53aW5kb3dTaXplKTtcbiAgICAgIH1cblxuICAgICAgY2FsY3VsYXRlVFBTKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGlja0J1ZmZlci5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGdldEN1cnJlbnRUUFMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZVRQUygpO1xuICAgICAgfVxuXG4gICAgICBnZXRBdmVyYWdlVFBTKCkge1xuICAgICAgICBpZiAodGhpcy5jbGlja0J1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAwO1xuICAgICAgICBjb25zdCB0aW1lU3BhbiA9IE1hdGgubWF4KFxuICAgICAgICAgIHRoaXMuY2xpY2tCdWZmZXJbdGhpcy5jbGlja0J1ZmZlci5sZW5ndGggLSAxXSAtIHRoaXMuY2xpY2tCdWZmZXJbMF0sXG4gICAgICAgICAgdGhpcy53aW5kb3dTaXplXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiAodGhpcy5jbGlja0J1ZmZlci5sZW5ndGggKiAxMDAwKSAvIHRpbWVTcGFuO1xuICAgICAgfVxuXG4gICAgICBnZXRQZWFrVFBTKCkge1xuICAgICAgICBsZXQgcGVhayA9IDA7XG4gICAgICAgIGNvbnN0IGJ1ZmZlckNvcHkgPSBbLi4udGhpcy5jbGlja0J1ZmZlcl07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJDb3B5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qgd2luZG93U3RhcnQgPSBidWZmZXJDb3B5W2ldO1xuICAgICAgICAgIGNvbnN0IHdpbmRvd0VuZCA9IHdpbmRvd1N0YXJ0ICsgdGhpcy53aW5kb3dTaXplO1xuICAgICAgICAgIGNvbnN0IGNsaWNrc0luV2luZG93ID0gYnVmZmVyQ29weS5maWx0ZXIoXG4gICAgICAgICAgICB0aW1lID0+IHRpbWUgPj0gd2luZG93U3RhcnQgJiYgdGltZSA8PSB3aW5kb3dFbmRcbiAgICAgICAgICApLmxlbmd0aDtcbiAgICAgICAgICBwZWFrID0gTWF0aC5tYXgocGVhaywgY2xpY2tzSW5XaW5kb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBlYWs7XG4gICAgICB9XG5cbiAgICAgIGdldFN0YXRpc3RpY3MoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY3VycmVudDogdGhpcy5nZXRDdXJyZW50VFBTKCksXG4gICAgICAgICAgYXZlcmFnZTogdGhpcy5nZXRBdmVyYWdlVFBTKCksXG4gICAgICAgICAgcGVhazogdGhpcy5nZXRQZWFrVFBTKCksXG4gICAgICAgICAgdG90YWw6IHRoaXMuY2xpY2tCdWZmZXIubGVuZ3RoLFxuICAgICAgICAgIGR1cmF0aW9uOlxuICAgICAgICAgICAgdGhpcy5jbGlja0J1ZmZlci5sZW5ndGggPiAwXG4gICAgICAgICAgICAgID8gdGhpcy5jbGlja0J1ZmZlclt0aGlzLmNsaWNrQnVmZmVyLmxlbmd0aCAtIDFdIC0gdGhpcy5jbGlja0J1ZmZlclswXVxuICAgICAgICAgICAgICA6IDAsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmNsaWNrQnVmZmVyID0gW107XG4gICAgICB9XG5cbiAgICAgIHNldFdpbmRvd1NpemUoc2l6ZSkge1xuICAgICAgICB0aGlzLndpbmRvd1NpemUgPSBzaXplO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRwc0NhbGN1bGF0b3IgPSBuZXcgVFBTQ2FsY3VsYXRvcigpO1xuICB9KTtcblxuICBkZXNjcmliZSgn5Z+65pys5Yqf6IO9JywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsuiDveato+eiuua3u+WKoOm7nuaTiicsICgpID0+IHtcbiAgICAgIGV4cGVjdCh0cHNDYWxjdWxhdG9yLmdldEN1cnJlbnRUUFMoKSkudG9CZSgwKTtcblxuICAgICAgdHBzQ2FsY3VsYXRvci5hZGRDbGljaygxMDAwKTtcbiAgICAgIGV4cGVjdCh0cHNDYWxjdWxhdG9yLmdldEN1cnJlbnRUUFMoKSkudG9CZSgxKTtcblxuICAgICAgdHBzQ2FsY3VsYXRvci5hZGRDbGljaygxMTAwKTtcbiAgICAgIGV4cGVjdCh0cHNDYWxjdWxhdG9yLmdldEN1cnJlbnRUUFMoKSkudG9CZSgyKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveioiOeul+eVtuWJjSBUUFMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBiYXNlVGltZSA9IDEwMDA7XG5cbiAgICAgIC8vIOWcqCAxIOenkuWFp+a3u+WKoCAxMCDmrKHpu57mk4pcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICB0cHNDYWxjdWxhdG9yLmFkZENsaWNrKGJhc2VUaW1lICsgaSAqIDEwMCk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdCh0cHNDYWxjdWxhdG9yLmdldEN1cnJlbnRUUFMoKSkudG9CZSgxMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLog73muIXnkIbpgY7mnJ/pu57mk4onLCAoKSA9PiB7XG4gICAgICBjb25zdCBiYXNlVGltZSA9IDEwMDA7XG5cbiAgICAgIC8vIOa3u+WKoOiIium7nuaTilxuICAgICAgdHBzQ2FsY3VsYXRvci5hZGRDbGljayhiYXNlVGltZSk7XG4gICAgICB0cHNDYWxjdWxhdG9yLmFkZENsaWNrKGJhc2VUaW1lICsgMTAwKTtcblxuICAgICAgLy8g5re75Yqg5paw6bue5pOK77yM5oeJ6Kmy5riF55CG6IiK55qEXG4gICAgICB0cHNDYWxjdWxhdG9yLmFkZENsaWNrKGJhc2VUaW1lICsgMTUwMCk7IC8vIOi2hemBjiAxMDAwbXMg56qX5Y+jXG5cbiAgICAgIGV4cGVjdCh0cHNDYWxjdWxhdG9yLmdldEN1cnJlbnRUUFMoKSkudG9CZSgxKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDvemHjee9ruioiOeul+WZqCcsICgpID0+IHtcbiAgICAgIHRwc0NhbGN1bGF0b3IuYWRkQ2xpY2soMTAwMCk7XG4gICAgICB0cHNDYWxjdWxhdG9yLmFkZENsaWNrKDExMDApO1xuICAgICAgZXhwZWN0KHRwc0NhbGN1bGF0b3IuZ2V0Q3VycmVudFRQUygpKS50b0JlKDIpO1xuXG4gICAgICB0cHNDYWxjdWxhdG9yLnJlc2V0KCk7XG4gICAgICBleHBlY3QodHBzQ2FsY3VsYXRvci5nZXRDdXJyZW50VFBTKCkpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfntbHoqIjlip/og70nLCAoKSA9PiB7XG4gICAgdGVzdCgn5oeJ6Kmy6IO96KiI566X5bmz5Z2HIFRQUycsICgpID0+IHtcbiAgICAgIGNvbnN0IGJhc2VUaW1lID0gMTAwMDtcblxuICAgICAgLy8g5ZyoIDIg56eS5YWn5Z2H5Yu75re75YqgIDIwIOasoem7nuaTilxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XG4gICAgICAgIHRwc0NhbGN1bGF0b3IuYWRkQ2xpY2soYmFzZVRpbWUgKyBpICogMTAwKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYXZnVFBTID0gdHBzQ2FsY3VsYXRvci5nZXRBdmVyYWdlVFBTKCk7XG4gICAgICBleHBlY3QoYXZnVFBTKS50b0JlQ2xvc2VUbygxMCwgMSk7IC8vIOe0hCAxMCBUUFNcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveioiOeul+WzsOWAvCBUUFMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBiYXNlVGltZSA9IDEwMDA7XG5cbiAgICAgIC8vIOWJjSA1MDBtcyDlhaflv6vpgJ/pu57mk4ogMTAg5qyhXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgdHBzQ2FsY3VsYXRvci5hZGRDbGljayhiYXNlVGltZSArIGkgKiA1MCk7XG4gICAgICB9XG5cbiAgICAgIC8vIOW+jCA1MDBtcyDlhafmhaLpgJ/pu57mk4ogNSDmrKFcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgIHRwc0NhbGN1bGF0b3IuYWRkQ2xpY2soYmFzZVRpbWUgKyA1MDAgKyBpICogMTAwKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGVha1RQUyA9IHRwc0NhbGN1bGF0b3IuZ2V0UGVha1RQUygpO1xuICAgICAgZXhwZWN0KHBlYWtUUFMpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMTApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6IO9542y5Y+W5a6M5pW057Wx6KiIJywgKCkgPT4ge1xuICAgICAgdHBzQ2FsY3VsYXRvci5hZGRDbGljaygxMDAwKTtcbiAgICAgIHRwc0NhbGN1bGF0b3IuYWRkQ2xpY2soMTEwMCk7XG4gICAgICB0cHNDYWxjdWxhdG9yLmFkZENsaWNrKDEyMDApO1xuXG4gICAgICBjb25zdCBzdGF0cyA9IHRwc0NhbGN1bGF0b3IuZ2V0U3RhdGlzdGljcygpO1xuXG4gICAgICBleHBlY3Qoc3RhdHMpLnRvSGF2ZVByb3BlcnR5KCdjdXJyZW50Jyk7XG4gICAgICBleHBlY3Qoc3RhdHMpLnRvSGF2ZVByb3BlcnR5KCdhdmVyYWdlJyk7XG4gICAgICBleHBlY3Qoc3RhdHMpLnRvSGF2ZVByb3BlcnR5KCdwZWFrJyk7XG4gICAgICBleHBlY3Qoc3RhdHMpLnRvSGF2ZVByb3BlcnR5KCd0b3RhbCcpO1xuICAgICAgZXhwZWN0KHN0YXRzKS50b0hhdmVQcm9wZXJ0eSgnZHVyYXRpb24nKTtcblxuICAgICAgZXhwZWN0KHN0YXRzLmN1cnJlbnQpLnRvQmUoMyk7XG4gICAgICBleHBlY3Qoc3RhdHMudG90YWwpLnRvQmUoMyk7XG4gICAgICBleHBlY3Qoc3RhdHMuZHVyYXRpb24pLnRvQmUoMjAwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+mFjee9ruWKn+iDvScsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73oqK3lrprnqpflj6PlpKflsI8nLCAoKSA9PiB7XG4gICAgICB0cHNDYWxjdWxhdG9yLnNldFdpbmRvd1NpemUoNTAwKTsgLy8g6Kit5a6a54K6IDUwMG1zXG5cbiAgICAgIHRwc0NhbGN1bGF0b3IuYWRkQ2xpY2soMTAwMCk7XG4gICAgICB0cHNDYWxjdWxhdG9yLmFkZENsaWNrKDEyMDApO1xuICAgICAgdHBzQ2FsY3VsYXRvci5hZGRDbGljaygxNjAwKTsgLy8g6LaF6YGOIDUwMG1zIOeql+WPo1xuXG4gICAgICBleHBlY3QodHBzQ2FsY3VsYXRvci5nZXRDdXJyZW50VFBTKCkpLnRvQmUoMSk7IC8vIOWPquacieacgOW+jOS4gOWAi1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnSW5wdXRNYW5hZ2VyJywgKCkgPT4ge1xuICBsZXQgaW5wdXRNYW5hZ2VyO1xuICBsZXQgbW9ja0dhbWVFbmdpbmU7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gTW9jayBHYW1lRW5naW5lXG4gICAgbW9ja0dhbWVFbmdpbmUgPSB7XG4gICAgICBoYW5kbGVDbGljazogamVzdC5mbigpLFxuICAgICAgaGFuZGxlTXVsdGlUb3VjaDogamVzdC5mbigpLFxuICAgICAgZ2V0U3RhdGU6IGplc3QuZm4oKCkgPT4gKHsgbW9kZTogJ3BsYXlpbmcnIH0pKSxcbiAgICB9O1xuXG4gICAgLy8g5qih5pOsIElucHV0TWFuYWdlciDpoZ7liKVcbiAgICBjbGFzcyBJbnB1dE1hbmFnZXIge1xuICAgICAgY29uc3RydWN0b3IoZ2FtZUVuZ2luZSkge1xuICAgICAgICB0aGlzLmdhbWVFbmdpbmUgPSBnYW1lRW5naW5lO1xuICAgICAgICB0aGlzLnRvdWNoUG9pbnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmRlYm91bmNlRGVsYXkgPSAxNjtcbiAgICAgICAgdGhpcy5sYXN0Q2xpY2tUaW1lID0gMDtcbiAgICAgICAgdGhpcy5oYXB0aWNFbmFibGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlVG91Y2hTdGFydChldmVudCkge1xuICAgICAgICBjb25zdCB0b3VjaGVzID0gQXJyYXkuZnJvbShldmVudC50b3VjaGVzIHx8IFtldmVudF0pO1xuXG4gICAgICAgIHRvdWNoZXMuZm9yRWFjaCgodG91Y2gsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgdG91Y2hEYXRhID0ge1xuICAgICAgICAgICAgeDogdG91Y2guY2xpZW50WCB8fCB0b3VjaC54IHx8IDAsXG4gICAgICAgICAgICB5OiB0b3VjaC5jbGllbnRZIHx8IHRvdWNoLnkgfHwgMCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogcGVyZm9ybWFuY2Uubm93KCksXG4gICAgICAgICAgICBwbGF5ZXJJZDogdGhpcy5kZXRlcm1pbmVQbGF5ZXJzKHRvdWNoLmNsaWVudFggfHwgdG91Y2gueCB8fCAwKSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdGhpcy50b3VjaFBvaW50cy5zZXQodG91Y2guaWRlbnRpZmllciB8fCBpbmRleCwgdG91Y2hEYXRhKTtcblxuICAgICAgICAgIC8vIOmYsuaKluWLleiZleeQhlxuICAgICAgICAgIGNvbnN0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgIGlmIChub3cgLSB0aGlzLmxhc3RDbGlja1RpbWUgPiB0aGlzLmRlYm91bmNlRGVsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZUVuZ2luZS5oYW5kbGVDbGljayh0b3VjaERhdGEpO1xuICAgICAgICAgICAgdGhpcy5sYXN0Q2xpY2tUaW1lID0gbm93O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZVRvdWNoRW5kKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHRvdWNoZXMgPSBBcnJheS5mcm9tKGV2ZW50LmNoYW5nZWRUb3VjaGVzIHx8IFtldmVudF0pO1xuXG4gICAgICAgIHRvdWNoZXMuZm9yRWFjaCgodG91Y2gsIGluZGV4KSA9PiB7XG4gICAgICAgICAgdGhpcy50b3VjaFBvaW50cy5kZWxldGUodG91Y2guaWRlbnRpZmllciB8fCBpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVNb3VzZUNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGNsaWNrRGF0YSA9IHtcbiAgICAgICAgICB4OiBldmVudC5jbGllbnRYIHx8IDAsXG4gICAgICAgICAgeTogZXZlbnQuY2xpZW50WSB8fCAwLFxuICAgICAgICAgIHRpbWVzdGFtcDogcGVyZm9ybWFuY2Uubm93KCksXG4gICAgICAgICAgcGxheWVySWQ6IHRoaXMuZGV0ZXJtaW5lUGxheWVycyhldmVudC5jbGllbnRYIHx8IDApLFxuICAgICAgICAgIHR5cGU6ICdtb3VzZScsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIGlmIChub3cgLSB0aGlzLmxhc3RDbGlja1RpbWUgPiB0aGlzLmRlYm91bmNlRGVsYXkpIHtcbiAgICAgICAgICB0aGlzLmdhbWVFbmdpbmUuaGFuZGxlQ2xpY2soY2xpY2tEYXRhKTtcbiAgICAgICAgICB0aGlzLmxhc3RDbGlja1RpbWUgPSBub3c7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGV0ZXJtaW5lUGxheWVycyh4KSB7XG4gICAgICAgIC8vIOewoeWWrueahOW3puWPs+WIhuWJsumCj+i8r1xuICAgICAgICBjb25zdCBzY3JlZW5XaWR0aCA9IDgwMDsgLy8g5YGH6Kit6J6i5bmV5a+s5bqmXG4gICAgICAgIHJldHVybiB4IDwgc2NyZWVuV2lkdGggLyAyID8gMSA6IDI7XG4gICAgICB9XG5cbiAgICAgIHNldERlYm91bmNlRGVsYXkoZGVsYXkpIHtcbiAgICAgICAgdGhpcy5kZWJvdW5jZURlbGF5ID0gZGVsYXk7XG4gICAgICB9XG5cbiAgICAgIGVuYWJsZUhhcHRpY0ZlZWRiYWNrKGVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5oYXB0aWNFbmFibGVkID0gZW5hYmxlZDtcbiAgICAgIH1cblxuICAgICAgZ2V0QWN0aXZlVG91Y2hlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG91Y2hQb2ludHMuc2l6ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnB1dE1hbmFnZXIgPSBuZXcgSW5wdXRNYW5hZ2VyKG1vY2tHYW1lRW5naW5lKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+inuOaOp+S6i+S7tuiZleeQhicsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73omZXnkIbllq7pu57op7jmjqcnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrVG91Y2hFdmVudCA9IHtcbiAgICAgICAgdG91Y2hlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IDAsXG4gICAgICAgICAgICBjbGllbnRYOiAxMDAsXG4gICAgICAgICAgICBjbGllbnRZOiAyMDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIGlucHV0TWFuYWdlci5oYW5kbGVUb3VjaFN0YXJ0KG1vY2tUb3VjaEV2ZW50KTtcblxuICAgICAgZXhwZWN0KG1vY2tHYW1lRW5naW5lLmhhbmRsZUNsaWNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHg6IDEwMCxcbiAgICAgICAgICB5OiAyMDAsXG4gICAgICAgICAgcGxheWVySWQ6IDEsIC8vIOW3puWBtFxuICAgICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveiZleeQhuWkmum7nuinuOaOpycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tUb3VjaEV2ZW50ID0ge1xuICAgICAgICB0b3VjaGVzOiBbXG4gICAgICAgICAgeyBpZGVudGlmaWVyOiAwLCBjbGllbnRYOiAxMDAsIGNsaWVudFk6IDIwMCB9LFxuICAgICAgICAgIHsgaWRlbnRpZmllcjogMSwgY2xpZW50WDogNjAwLCBjbGllbnRZOiAzMDAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIGlucHV0TWFuYWdlci5oYW5kbGVUb3VjaFN0YXJ0KG1vY2tUb3VjaEV2ZW50KTtcblxuICAgICAgZXhwZWN0KG1vY2tHYW1lRW5naW5lLmhhbmRsZUNsaWNrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG4gICAgICBleHBlY3QoaW5wdXRNYW5hZ2VyLmdldEFjdGl2ZVRvdWNoZXMoKSkudG9CZSgyKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveiZleeQhuinuOaOp+e1kOadnycsICgpID0+IHtcbiAgICAgIC8vIOWFiOmWi+Wni+inuOaOp1xuICAgICAgY29uc3Qgc3RhcnRFdmVudCA9IHtcbiAgICAgICAgdG91Y2hlczogW3sgaWRlbnRpZmllcjogMCwgY2xpZW50WDogMTAwLCBjbGllbnRZOiAyMDAgfV0sXG4gICAgICB9O1xuICAgICAgaW5wdXRNYW5hZ2VyLmhhbmRsZVRvdWNoU3RhcnQoc3RhcnRFdmVudCk7XG4gICAgICBleHBlY3QoaW5wdXRNYW5hZ2VyLmdldEFjdGl2ZVRvdWNoZXMoKSkudG9CZSgxKTtcblxuICAgICAgLy8g57WQ5p2f6Ke45o6nXG4gICAgICBjb25zdCBlbmRFdmVudCA9IHtcbiAgICAgICAgY2hhbmdlZFRvdWNoZXM6IFt7IGlkZW50aWZpZXI6IDAgfV0sXG4gICAgICB9O1xuICAgICAgaW5wdXRNYW5hZ2VyLmhhbmRsZVRvdWNoRW5kKGVuZEV2ZW50KTtcbiAgICAgIGV4cGVjdChpbnB1dE1hbmFnZXIuZ2V0QWN0aXZlVG91Y2hlcygpKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn5ruR6byg5LqL5Lu26JmV55CGJywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsuiDveiZleeQhua7kem8oOm7nuaTiicsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tNb3VzZUV2ZW50ID0ge1xuICAgICAgICBjbGllbnRYOiAzMDAsXG4gICAgICAgIGNsaWVudFk6IDQwMCxcbiAgICAgIH07XG5cbiAgICAgIGlucHV0TWFuYWdlci5oYW5kbGVNb3VzZUNsaWNrKG1vY2tNb3VzZUV2ZW50KTtcblxuICAgICAgZXhwZWN0KG1vY2tHYW1lRW5naW5lLmhhbmRsZUNsaWNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHg6IDMwMCxcbiAgICAgICAgICB5OiA0MDAsXG4gICAgICAgICAgcGxheWVySWQ6IDEsXG4gICAgICAgICAgdHlwZTogJ21vdXNlJyxcbiAgICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfnjqnlrrbliKTlrponLCAoKSA9PiB7XG4gICAgdGVzdCgn5oeJ6Kmy5q2j56K65Yik5a6a5bem5YG0546p5a62JywgKCkgPT4ge1xuICAgICAgY29uc3QgbGVmdFggPSAyMDA7XG4gICAgICBjb25zdCBwbGF5ZXJJZCA9IGlucHV0TWFuYWdlci5kZXRlcm1pbmVQbGF5ZXJzKGxlZnRYKTtcbiAgICAgIGV4cGVjdChwbGF5ZXJJZCkudG9CZSgxKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuato+eiuuWIpOWumuWPs+WBtOeOqeWuticsICgpID0+IHtcbiAgICAgIGNvbnN0IHJpZ2h0WCA9IDYwMDtcbiAgICAgIGNvbnN0IHBsYXllcklkID0gaW5wdXRNYW5hZ2VyLmRldGVybWluZVBsYXllcnMocmlnaHRYKTtcbiAgICAgIGV4cGVjdChwbGF5ZXJJZCkudG9CZSgyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+mYsuaKluWLleapn+WIticsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLpmLLmraLlv6vpgJ/ph43opIfpu57mk4onLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrRXZlbnQgPSB7XG4gICAgICAgIHRvdWNoZXM6IFt7IGlkZW50aWZpZXI6IDAsIGNsaWVudFg6IDEwMCwgY2xpZW50WTogMjAwIH1dLFxuICAgICAgfTtcblxuICAgICAgLy8g5b+r6YCf6YCj57qM6bue5pOKXG4gICAgICBpbnB1dE1hbmFnZXIuaGFuZGxlVG91Y2hTdGFydChtb2NrRXZlbnQpO1xuICAgICAgaW5wdXRNYW5hZ2VyLmhhbmRsZVRvdWNoU3RhcnQobW9ja0V2ZW50KTtcbiAgICAgIGlucHV0TWFuYWdlci5oYW5kbGVUb3VjaFN0YXJ0KG1vY2tFdmVudCk7XG5cbiAgICAgIC8vIOaHieipsuWPquiZleeQhuS4gOasoe+8iOmYsuaKluWLle+8iVxuICAgICAgZXhwZWN0KG1vY2tHYW1lRW5naW5lLmhhbmRsZUNsaWNrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLlhYHoqLHoqK3lrprpmLLmipbli5Xlu7bpgbInLCAoKSA9PiB7XG4gICAgICBpbnB1dE1hbmFnZXIuc2V0RGVib3VuY2VEZWxheSg1MCk7XG4gICAgICBleHBlY3QoaW5wdXRNYW5hZ2VyLmRlYm91bmNlRGVsYXkpLnRvQmUoNTApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn6YWN572u5Yqf6IO9JywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsuiDveWVn+eUqC/lgZznlKjpnIfli5Xlm57ppYsnLCAoKSA9PiB7XG4gICAgICBpbnB1dE1hbmFnZXIuZW5hYmxlSGFwdGljRmVlZGJhY2soZmFsc2UpO1xuICAgICAgZXhwZWN0KGlucHV0TWFuYWdlci5oYXB0aWNFbmFibGVkKS50b0JlKGZhbHNlKTtcblxuICAgICAgaW5wdXRNYW5hZ2VyLmVuYWJsZUhhcHRpY0ZlZWRiYWNrKHRydWUpO1xuICAgICAgZXhwZWN0KGlucHV0TWFuYWdlci5oYXB0aWNFbmFibGVkKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnR2FtZUVuZ2luZScsICgpID0+IHtcbiAgbGV0IGdhbWVFbmdpbmU7XG4gIGxldCBtb2NrVFBTQ2FsY3VsYXRvcjtcbiAgbGV0IG1vY2tJbnB1dE1hbmFnZXI7XG4gIGxldCBtb2NrQXVkaW9NYW5hZ2VyO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIE1vY2sgVFBTIENhbGN1bGF0b3JcbiAgICBtb2NrVFBTQ2FsY3VsYXRvciA9IHtcbiAgICAgIGFkZENsaWNrOiBqZXN0LmZuKCksXG4gICAgICBnZXRDdXJyZW50VFBTOiBqZXN0LmZuKCgpID0+IDE1KSxcbiAgICAgIGdldFN0YXRpc3RpY3M6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgY3VycmVudDogMTUsXG4gICAgICAgIGF2ZXJhZ2U6IDEyLFxuICAgICAgICBwZWFrOiAyMCxcbiAgICAgICAgdG90YWw6IDE1MCxcbiAgICAgIH0pKSxcbiAgICAgIHJlc2V0OiBqZXN0LmZuKCksXG4gICAgfTtcblxuICAgIC8vIE1vY2sgQXVkaW8gTWFuYWdlclxuICAgIG1vY2tBdWRpb01hbmFnZXIgPSB7XG4gICAgICBwbGF5Q2xpY2tTb3VuZDogamVzdC5mbigpLFxuICAgICAgcGxheVN1Y2Nlc3NTb3VuZDogamVzdC5mbigpLFxuICAgICAgc2V0RW5hYmxlZDogamVzdC5mbigpLFxuICAgIH07XG5cbiAgICAvLyDmqKHmk6wgR2FtZUVuZ2luZSDpoZ7liKVcbiAgICBjbGFzcyBHYW1lRW5naW5lIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgIG1vZGU6ICdpZGxlJyxcbiAgICAgICAgICBnYW1lVHlwZTogJ3NpbmdsZScsXG4gICAgICAgICAgZHVyYXRpb246IDMwMDAwLFxuICAgICAgICAgIHJlbWFpbmluZ1RpbWU6IDAsXG4gICAgICAgICAgcGxheWVyczogW1xuICAgICAgICAgICAgeyBpZDogMSwgc2NvcmU6IDAsIHRwczogMCwgYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgeyBpZDogMiwgc2NvcmU6IDAsIHRwczogMCwgYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudHBzQ2FsY3VsYXRvciA9IG1vY2tUUFNDYWxjdWxhdG9yO1xuICAgICAgICB0aGlzLmF1ZGlvTWFuYWdlciA9IG1vY2tBdWRpb01hbmFnZXI7XG4gICAgICAgIHRoaXMuZ2FtZVRpbWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy51cGRhdGVJbnRlcnZhbCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0R2FtZShtb2RlLCBkdXJhdGlvbikge1xuICAgICAgICB0aGlzLnN0YXRlLm1vZGUgPSAncGxheWluZyc7XG4gICAgICAgIHRoaXMuc3RhdGUuZ2FtZVR5cGUgPSBtb2RlO1xuICAgICAgICB0aGlzLnN0YXRlLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMuc3RhdGUucmVtYWluaW5nVGltZSA9IGR1cmF0aW9uO1xuXG4gICAgICAgIC8vIOmHjee9rue1seioiFxuICAgICAgICB0aGlzLnRwc0NhbGN1bGF0b3IucmVzZXQoKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5wbGF5ZXJzLmZvckVhY2gocGxheWVyID0+IHtcbiAgICAgICAgICBwbGF5ZXIuc2NvcmUgPSAwO1xuICAgICAgICAgIHBsYXllci50cHMgPSAwO1xuICAgICAgICAgIHBsYXllci5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyDplovlp4voqIjmmYLlmahcbiAgICAgICAgdGhpcy5nYW1lVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmVuZEdhbWUoKTtcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuXG4gICAgICAgIC8vIOmWi+Wni+abtOaWsOW+queSsFxuICAgICAgICB0aGlzLnVwZGF0ZUludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIHRoaXMudXBkYXRlR2FtZSgpO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuXG4gICAgICBwYXVzZUdhbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1vZGUgPT09ICdwbGF5aW5nJykge1xuICAgICAgICAgIHRoaXMuc3RhdGUubW9kZSA9ICdwYXVzZWQnO1xuICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bWVHYW1lKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5tb2RlID09PSAncGF1c2VkJykge1xuICAgICAgICAgIHRoaXMuc3RhdGUubW9kZSA9ICdwbGF5aW5nJztcbiAgICAgICAgICB0aGlzLnN0YXJ0VGltZXJzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZW5kR2FtZSgpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5tb2RlID0gJ2VuZGVkJztcbiAgICAgICAgdGhpcy5jbGVhclRpbWVycygpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRzID0gdGhpcy50cHNDYWxjdWxhdG9yLmdldFN0YXRpc3RpY3MoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1vZGU6IHRoaXMuc3RhdGUuZ2FtZVR5cGUsXG4gICAgICAgICAgZHVyYXRpb246IHRoaXMuc3RhdGUuZHVyYXRpb24sXG4gICAgICAgICAgc2NvcmU6IHRoaXMuZ2V0VG90YWxTY29yZSgpLFxuICAgICAgICAgIHBlYWtUUFM6IHN0YXRzLnBlYWssXG4gICAgICAgICAgYXZlcmFnZVRQUzogc3RhdHMuYXZlcmFnZSxcbiAgICAgICAgICBwbGF5ZXJzOiB0aGlzLnN0YXRlLnBsYXllcnMubWFwKHAgPT4gKHsgLi4ucCB9KSksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZUNsaWNrKGNsaWNrRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubW9kZSAhPT0gJ3BsYXlpbmcnKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcGxheWVyID0gdGhpcy5zdGF0ZS5wbGF5ZXJzLmZpbmQocCA9PiBwLmlkID09PSBjbGlja0V2ZW50LnBsYXllcklkKTtcbiAgICAgICAgaWYgKHBsYXllciAmJiBwbGF5ZXIuYWN0aXZlKSB7XG4gICAgICAgICAgcGxheWVyLnNjb3JlKys7XG4gICAgICAgICAgdGhpcy50cHNDYWxjdWxhdG9yLmFkZENsaWNrKGNsaWNrRXZlbnQudGltZXN0YW1wKTtcbiAgICAgICAgICB0aGlzLmF1ZGlvTWFuYWdlci5wbGF5Q2xpY2tTb3VuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZUdhbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1vZGUgPT09ICdwbGF5aW5nJykge1xuICAgICAgICAgIHRoaXMuc3RhdGUucmVtYWluaW5nVGltZSA9IE1hdGgubWF4KDAsIHRoaXMuc3RhdGUucmVtYWluaW5nVGltZSAtIDEwMCk7XG5cbiAgICAgICAgICAvLyDmm7TmlrAgVFBTXG4gICAgICAgICAgY29uc3QgY3VycmVudFRQUyA9IHRoaXMudHBzQ2FsY3VsYXRvci5nZXRDdXJyZW50VFBTKCk7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5wbGF5ZXJzLmZvckVhY2gocGxheWVyID0+IHtcbiAgICAgICAgICAgIGlmIChwbGF5ZXIuYWN0aXZlKSB7XG4gICAgICAgICAgICAgIHBsYXllci50cHMgPSBjdXJyZW50VFBTO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVtYWluaW5nVGltZSA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVuZEdhbWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZ2V0U3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnRoaXMuc3RhdGUgfTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUobmV3U3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHsgLi4udGhpcy5zdGF0ZSwgLi4ubmV3U3RhdGUgfTtcbiAgICAgIH1cblxuICAgICAgZ2V0VFBTKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cHNDYWxjdWxhdG9yLmdldEN1cnJlbnRUUFMoKTtcbiAgICAgIH1cblxuICAgICAgZ2V0U2NvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRvdGFsU2NvcmUoKTtcbiAgICAgIH1cblxuICAgICAgZ2V0VG90YWxTY29yZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucGxheWVycy5yZWR1Y2UoKHRvdGFsLCBwbGF5ZXIpID0+IHRvdGFsICsgcGxheWVyLnNjb3JlLCAwKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lcnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmdhbWVUaW1lcikge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmdhbWVUaW1lcik7XG4gICAgICAgICAgdGhpcy5nYW1lVGltZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZUludGVydmFsKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnVwZGF0ZUludGVydmFsKTtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdGFydFRpbWVycygpIHtcbiAgICAgICAgLy8g6YeN5paw6ZaL5aeL6KiI5pmC5Zmo77yI57Ch5YyW5a+m5L2c77yJXG4gICAgICAgIHRoaXMuZ2FtZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5lbmRHYW1lKCk7XG4gICAgICAgIH0sIHRoaXMuc3RhdGUucmVtYWluaW5nVGltZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2FtZUVuZ2luZSA9IG5ldyBHYW1lRW5naW5lKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgZ2FtZUVuZ2luZS5jbGVhclRpbWVycygpO1xuICB9KTtcblxuICBkZXNjcmliZSgn6YGK5oiy54uA5oWL566h55CGJywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsuato+eiuuWIneWni+WMlumBiuaIsueLgOaFiycsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gZ2FtZUVuZ2luZS5nZXRTdGF0ZSgpO1xuXG4gICAgICBleHBlY3Qoc3RhdGUubW9kZSkudG9CZSgnaWRsZScpO1xuICAgICAgZXhwZWN0KHN0YXRlLnBsYXllcnMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChzdGF0ZS5wbGF5ZXJzWzBdLnNjb3JlKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHN0YXRlLnBsYXllcnNbMV0uc2NvcmUpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLog73plovlp4vpgYrmiLInLCAoKSA9PiB7XG4gICAgICBnYW1lRW5naW5lLnN0YXJ0R2FtZSgnc2luZ2xlJywgMzAwMDApO1xuXG4gICAgICBjb25zdCBzdGF0ZSA9IGdhbWVFbmdpbmUuZ2V0U3RhdGUoKTtcbiAgICAgIGV4cGVjdChzdGF0ZS5tb2RlKS50b0JlKCdwbGF5aW5nJyk7XG4gICAgICBleHBlY3Qoc3RhdGUuZ2FtZVR5cGUpLnRvQmUoJ3NpbmdsZScpO1xuICAgICAgZXhwZWN0KHN0YXRlLmR1cmF0aW9uKS50b0JlKDMwMDAwKTtcbiAgICAgIGV4cGVjdChzdGF0ZS5yZW1haW5pbmdUaW1lKS50b0JlKDMwMDAwKTtcbiAgICAgIGV4cGVjdChtb2NrVFBTQ2FsY3VsYXRvci5yZXNldCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6IO95pqr5YGc6YGK5oiyJywgKCkgPT4ge1xuICAgICAgZ2FtZUVuZ2luZS5zdGFydEdhbWUoJ3NpbmdsZScsIDMwMDAwKTtcbiAgICAgIGdhbWVFbmdpbmUucGF1c2VHYW1lKCk7XG5cbiAgICAgIGNvbnN0IHN0YXRlID0gZ2FtZUVuZ2luZS5nZXRTdGF0ZSgpO1xuICAgICAgZXhwZWN0KHN0YXRlLm1vZGUpLnRvQmUoJ3BhdXNlZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6IO95oGi5b6p6YGK5oiyJywgKCkgPT4ge1xuICAgICAgZ2FtZUVuZ2luZS5zdGFydEdhbWUoJ3NpbmdsZScsIDMwMDAwKTtcbiAgICAgIGdhbWVFbmdpbmUucGF1c2VHYW1lKCk7XG4gICAgICBnYW1lRW5naW5lLnJlc3VtZUdhbWUoKTtcblxuICAgICAgY29uc3Qgc3RhdGUgPSBnYW1lRW5naW5lLmdldFN0YXRlKCk7XG4gICAgICBleHBlY3Qoc3RhdGUubW9kZSkudG9CZSgncGxheWluZycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6IO957WQ5p2f6YGK5oiy5Lim6L+U5Zue57WQ5p6cJywgKCkgPT4ge1xuICAgICAgZ2FtZUVuZ2luZS5zdGFydEdhbWUoJ3NpbmdsZScsIDMwMDAwKTtcblxuICAgICAgLy8g5qih5pOs5LiA5Lqb6bue5pOKXG4gICAgICBnYW1lRW5naW5lLmhhbmRsZUNsaWNrKHsgcGxheWVySWQ6IDEsIHRpbWVzdGFtcDogMTAwMCB9KTtcbiAgICAgIGdhbWVFbmdpbmUuaGFuZGxlQ2xpY2soeyBwbGF5ZXJJZDogMSwgdGltZXN0YW1wOiAxMTAwIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBnYW1lRW5naW5lLmVuZEdhbWUoKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ21vZGUnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdkdXJhdGlvbicpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3Njb3JlJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgncGVha1RQUycpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ2F2ZXJhZ2VUUFMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubW9kZSkudG9CZSgnc2luZ2xlJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmR1cmF0aW9uKS50b0JlKDMwMDAwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+m7nuaTiuiZleeQhicsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLmraPnorromZXnkIbnjqnlrrbpu57mk4onLCAoKSA9PiB7XG4gICAgICBnYW1lRW5naW5lLnN0YXJ0R2FtZSgnc2luZ2xlJywgMzAwMDApO1xuXG4gICAgICBjb25zdCBjbGlja0V2ZW50ID0ge1xuICAgICAgICBwbGF5ZXJJZDogMSxcbiAgICAgICAgeDogMTAwLFxuICAgICAgICB5OiAyMDAsXG4gICAgICAgIHRpbWVzdGFtcDogMTAwMCxcbiAgICAgIH07XG5cbiAgICAgIGdhbWVFbmdpbmUuaGFuZGxlQ2xpY2soY2xpY2tFdmVudCk7XG5cbiAgICAgIGNvbnN0IHN0YXRlID0gZ2FtZUVuZ2luZS5nZXRTdGF0ZSgpO1xuICAgICAgZXhwZWN0KHN0YXRlLnBsYXllcnNbMF0uc2NvcmUpLnRvQmUoMSk7XG4gICAgICBleHBlY3QobW9ja1RQU0NhbGN1bGF0b3IuYWRkQ2xpY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDEwMDApO1xuICAgICAgZXhwZWN0KG1vY2tBdWRpb01hbmFnZXIucGxheUNsaWNrU291bmQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+mdnumBiuaIsueLgOaFi+S4i+S4jeaHieiZleeQhum7nuaTiicsICgpID0+IHtcbiAgICAgIGNvbnN0IGNsaWNrRXZlbnQgPSB7IHBsYXllcklkOiAxLCB0aW1lc3RhbXA6IDEwMDAgfTtcblxuICAgICAgZ2FtZUVuZ2luZS5oYW5kbGVDbGljayhjbGlja0V2ZW50KTtcblxuICAgICAgY29uc3Qgc3RhdGUgPSBnYW1lRW5naW5lLmdldFN0YXRlKCk7XG4gICAgICBleHBlY3Qoc3RhdGUucGxheWVyc1swXS5zY29yZSkudG9CZSgwKTtcbiAgICAgIGV4cGVjdChtb2NrVFBTQ2FsY3VsYXRvci5hZGRDbGljaykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuato+eiuuioiOeul+e4veWIhicsICgpID0+IHtcbiAgICAgIGdhbWVFbmdpbmUuc3RhcnRHYW1lKCdkdWFsJywgMzAwMDApO1xuXG4gICAgICAvLyDnjqnlrrYgMSDpu57mk4ogMyDmrKFcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIGdhbWVFbmdpbmUuaGFuZGxlQ2xpY2soeyBwbGF5ZXJJZDogMSwgdGltZXN0YW1wOiAxMDAwICsgaSAqIDEwMCB9KTtcbiAgICAgIH1cblxuICAgICAgLy8g546p5a62IDIg6bue5pOKIDIg5qyhXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI7IGkrKykge1xuICAgICAgICBnYW1lRW5naW5lLmhhbmRsZUNsaWNrKHsgcGxheWVySWQ6IDIsIHRpbWVzdGFtcDogMjAwMCArIGkgKiAxMDAgfSk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChnYW1lRW5naW5lLmdldFRvdGFsU2NvcmUoKSkudG9CZSg1KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+e1seioiOWKn+iDvScsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73njbLlj5bnlbbliY0gVFBTJywgKCkgPT4ge1xuICAgICAgY29uc3QgdHBzID0gZ2FtZUVuZ2luZS5nZXRUUFMoKTtcbiAgICAgIGV4cGVjdCh0cHMpLnRvQmUoMTUpO1xuICAgICAgZXhwZWN0KG1vY2tUUFNDYWxjdWxhdG9yLmdldEN1cnJlbnRUUFMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveeNsuWPlueVtuWJjeWIhuaVuCcsICgpID0+IHtcbiAgICAgIGdhbWVFbmdpbmUuc3RhcnRHYW1lKCdzaW5nbGUnLCAzMDAwMCk7XG4gICAgICBnYW1lRW5naW5lLmhhbmRsZUNsaWNrKHsgcGxheWVySWQ6IDEsIHRpbWVzdGFtcDogMTAwMCB9KTtcbiAgICAgIGdhbWVFbmdpbmUuaGFuZGxlQ2xpY2soeyBwbGF5ZXJJZDogMSwgdGltZXN0YW1wOiAxMTAwIH0pO1xuXG4gICAgICBjb25zdCBzY29yZSA9IGdhbWVFbmdpbmUuZ2V0U2NvcmUoKTtcbiAgICAgIGV4cGVjdChzY29yZSkudG9CZSgyKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ+aVtOWQiOa4rOippicsICgpID0+IHtcbiAgdGVzdCgn5a6M5pW06YGK5oiy5rWB56iL5ris6KmmJywgKCkgPT4ge1xuICAgIC8vIOmAmeWAi+a4rOippuaooeaTrOS4gOWAi+WujOaVtOeahOmBiuaIsua1geeoi1xuICAgIGNvbnN0IG1vY2tHYW1lRW5naW5lID0ge1xuICAgICAgc3RhdGU6IHsgbW9kZTogJ2lkbGUnIH0sXG4gICAgICBzdGFydEdhbWU6IGplc3QuZm4oKSxcbiAgICAgIGhhbmRsZUNsaWNrOiBqZXN0LmZuKCksXG4gICAgICBlbmRHYW1lOiBqZXN0LmZuKCksXG4gICAgICBnZXRTdGF0ZTogamVzdC5mbigoKSA9PiAoeyBtb2RlOiAncGxheWluZycgfSkpLFxuICAgIH07XG5cbiAgICBjb25zdCBtb2NrSW5wdXRNYW5hZ2VyID0ge1xuICAgICAgc2V0dXBFdmVudExpc3RlbmVyczogamVzdC5mbigpLFxuICAgICAgaGFuZGxlVG91Y2hTdGFydDogamVzdC5mbigpLFxuICAgICAgc2V0RGVib3VuY2VEZWxheTogamVzdC5mbigpLFxuICAgIH07XG5cbiAgICAvLyAxLiDliJ3lp4vljJZcbiAgICBleHBlY3QobW9ja0dhbWVFbmdpbmUuc3RhdGUubW9kZSkudG9CZSgnaWRsZScpO1xuXG4gICAgLy8gMi4g6ZaL5aeL6YGK5oiyXG4gICAgbW9ja0dhbWVFbmdpbmUuc3RhcnRHYW1lKCdzaW5nbGUnLCAzMDAwMCk7XG4gICAgZXhwZWN0KG1vY2tHYW1lRW5naW5lLnN0YXJ0R2FtZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3NpbmdsZScsIDMwMDAwKTtcblxuICAgIC8vIDMuIOiZleeQhui8uOWFpVxuICAgIGNvbnN0IHRvdWNoRXZlbnQgPSB7XG4gICAgICB0b3VjaGVzOiBbeyBpZGVudGlmaWVyOiAwLCBjbGllbnRYOiAxMDAsIGNsaWVudFk6IDIwMCB9XSxcbiAgICB9O1xuICAgIG1vY2tJbnB1dE1hbmFnZXIuaGFuZGxlVG91Y2hTdGFydCh0b3VjaEV2ZW50KTtcbiAgICBleHBlY3QobW9ja0lucHV0TWFuYWdlci5oYW5kbGVUb3VjaFN0YXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0b3VjaEV2ZW50KTtcblxuICAgIC8vIDQuIOe1kOadn+mBiuaIslxuICAgIG1vY2tHYW1lRW5naW5lLmVuZEdhbWUoKTtcbiAgICBleHBlY3QobW9ja0dhbWVFbmdpbmUuZW5kR2FtZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQUEsTUFBTSxDQUFDQyxXQUFXLEdBQUc7RUFDbkJDLEdBQUcsRUFBRUMs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