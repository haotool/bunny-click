2f497dff6daac57a9a0a5a13a55310cf
"use strict";

/**
 * 效能測試
 * 測試應用的效能指標和最佳化功能
 *
 * @author haotool
 * @version 7.2.3
 * @created 2025-08-18T02:39:58+08:00
 */

// Mock Performance API
global.performance = {
  now: jest.fn(() => Date.now()),
  mark: jest.fn(),
  measure: jest.fn(),
  getEntriesByType: jest.fn(() => []),
  getEntriesByName: jest.fn(() => []),
  clearMarks: jest.fn(),
  clearMeasures: jest.fn(),
  memory: {
    usedJSHeapSize: 10 * 1024 * 1024,
    // 10MB
    totalJSHeapSize: 50 * 1024 * 1024,
    // 50MB
    jsHeapSizeLimit: 100 * 1024 * 1024 // 100MB
  }
};
describe('效能監控', () => {
  let performanceMonitor;
  beforeEach(() => {
    jest.clearAllMocks();

    // 模擬效能監控器
    class PerformanceMonitor {
      constructor() {
        this.metrics = {
          loadTime: 0,
          tpsAverage: 0,
          errorCount: 0,
          cacheHitRate: 0,
          memoryUsage: 0,
          renderTime: 0
        };
        this.isTracking = false;
      }
      startTracking() {
        this.isTracking = true;
        this.trackLoadTime();
        this.trackMemoryUsage();
        this.trackRenderPerformance();
      }
      stopTracking() {
        this.isTracking = false;
      }
      trackLoadTime() {
        performance.mark('load-start');

        // 模擬載入完成
        setTimeout(() => {
          performance.mark('load-end');
          performance.measure('load-time', 'load-start', 'load-end');
          const loadMeasure = performance.getEntriesByName('load-time')[0];
          this.metrics.loadTime = loadMeasure?.duration || 2100;
        }, 100);
      }
      trackMemoryUsage() {
        if ('memory' in performance) {
          const memory = performance.memory;
          this.metrics.memoryUsage = memory.usedJSHeapSize;
        }
      }
      trackRenderPerformance() {
        const startTime = performance.now();

        // 模擬渲染操作
        requestAnimationFrame(() => {
          const endTime = performance.now();
          this.metrics.renderTime = endTime - startTime;
        });
      }
      trackGamePerformance(gameEngine) {
        if (!gameEngine) return;
        const tpsStats = gameEngine.tpsCalculator?.getStatistics();
        if (tpsStats) {
          this.metrics.tpsAverage = tpsStats.average;
        }
      }
      trackErrors() {
        window.addEventListener('error', () => {
          this.metrics.errorCount++;
        });
        window.addEventListener('unhandledrejection', () => {
          this.metrics.errorCount++;
        });
      }
      getMetrics() {
        return {
          ...this.metrics
        };
      }
      generateReport() {
        const metrics = this.getMetrics();
        return {
          timestamp: new Date().toISOString(),
          performance: {
            loadTime: metrics.loadTime,
            renderTime: metrics.renderTime,
            memoryUsage: this.formatBytes(metrics.memoryUsage)
          },
          game: {
            averageTPS: metrics.tpsAverage,
            errorCount: metrics.errorCount
          },
          status: this.getPerformanceStatus(metrics)
        };
      }
      getPerformanceStatus(metrics) {
        const issues = [];
        if (metrics.loadTime > 3000) {
          issues.push('載入時間過長');
        }
        if (metrics.memoryUsage > 100 * 1024 * 1024) {
          issues.push('記憶體使用過高');
        }
        if (metrics.renderTime > 16.67) {
          issues.push('渲染效能不佳');
        }
        if (metrics.errorCount > 0) {
          issues.push('存在錯誤');
        }
        return issues.length === 0 ? 'good' : 'warning';
      }
      formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }
      clearMetrics() {
        this.metrics = {
          loadTime: 0,
          tpsAverage: 0,
          errorCount: 0,
          cacheHitRate: 0,
          memoryUsage: 0,
          renderTime: 0
        };
      }
    }
    performanceMonitor = new PerformanceMonitor();
  });
  describe('載入效能', () => {
    beforeEach(() => {
      // 重新設置 performance mock
      global.performance.getEntriesByName = jest.fn();
      global.performance.mark = jest.fn();
      global.performance.measure = jest.fn();
      global.performance.now = jest.fn(() => Date.now());
    });
    test('應該追蹤載入時間', done => {
      global.performance.getEntriesByName.mockReturnValue([{
        duration: 2100
      }]);
      performanceMonitor.startTracking();
      setTimeout(() => {
        const metrics = performanceMonitor.getMetrics();
        expect(metrics.loadTime).toBe(2100);
        expect(global.performance.mark).toHaveBeenCalledWith('load-start');
        expect(global.performance.mark).toHaveBeenCalledWith('load-end');
        done();
      }, 150);
    });
    test('載入時間應該少於 3 秒', done => {
      global.performance.getEntriesByName.mockReturnValue([{
        duration: 2500
      }]);
      performanceMonitor.startTracking();
      setTimeout(() => {
        const metrics = performanceMonitor.getMetrics();
        expect(metrics.loadTime).toBeLessThan(3000);
        done();
      }, 150);
    });
  });
  describe('記憶體效能', () => {
    beforeEach(() => {
      // 確保 performance.memory 可用
      global.performance.memory = {
        usedJSHeapSize: 10 * 1024 * 1024,
        // 10MB
        totalJSHeapSize: 20 * 1024 * 1024,
        jsHeapSizeLimit: 100 * 1024 * 1024
      };
    });
    test('應該追蹤記憶體使用量', () => {
      performanceMonitor.trackMemoryUsage();
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.memoryUsage).toBe(10 * 1024 * 1024);
    });
    test('記憶體使用應該在合理範圍內', () => {
      performanceMonitor.trackMemoryUsage();
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.memoryUsage).toBeLessThan(100 * 1024 * 1024); // 少於 100MB
    });
    test('應該正確格式化記憶體大小', () => {
      const formatted = performanceMonitor.formatBytes(10 * 1024 * 1024);
      expect(formatted).toBe('10 MB');
    });
  });
  describe('渲染效能', () => {
    beforeEach(() => {
      // 重新設置 performance.now mock
      global.performance.now = jest.fn();
      global.requestAnimationFrame = jest.fn();
    });
    test('應該追蹤渲染時間', () => {
      global.performance.now.mockReturnValueOnce(1000).mockReturnValueOnce(1010);
      performanceMonitor.trackRenderPerformance();

      // 模擬 requestAnimationFrame
      if (global.requestAnimationFrame.mock.calls.length > 0) {
        const callback = global.requestAnimationFrame.mock.calls[0][0];
        callback();
      }
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.renderTime).toBe(10);
    });
    test('渲染時間應該少於 16.67ms (60 FPS)', () => {
      global.performance.now.mockReturnValueOnce(1000).mockReturnValueOnce(1015);
      performanceMonitor.trackRenderPerformance();
      if (global.requestAnimationFrame.mock.calls.length > 0) {
        const callback = global.requestAnimationFrame.mock.calls[0][0];
        callback();
      }
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.renderTime).toBeLessThan(16.67);
    });
  });
  describe('遊戲效能', () => {
    test('應該追蹤 TPS 效能', () => {
      const mockGameEngine = {
        tpsCalculator: {
          getStatistics: jest.fn(() => ({
            average: 15.5,
            peak: 25,
            current: 20
          }))
        }
      };
      performanceMonitor.trackGamePerformance(mockGameEngine);
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.tpsAverage).toBe(15.5);
      expect(mockGameEngine.tpsCalculator.getStatistics).toHaveBeenCalled();
    });
    test('應該處理沒有遊戲引擎的情況', () => {
      performanceMonitor.trackGamePerformance(null);
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.tpsAverage).toBe(0);
    });
  });
  describe('錯誤追蹤', () => {
    test('應該追蹤 JavaScript 錯誤', () => {
      performanceMonitor.trackErrors();

      // 模擬錯誤事件
      const errorEvent = new Event('error');
      window.dispatchEvent(errorEvent);
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.errorCount).toBe(1);
    });
    test('應該追蹤未處理的 Promise 拒絕', () => {
      performanceMonitor.trackErrors();

      // 模擬 unhandledrejection 事件
      const rejectionEvent = new Event('unhandledrejection');
      window.dispatchEvent(rejectionEvent);
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.errorCount).toBe(1);
    });
  });
  describe('效能報告', () => {
    test('應該生成完整的效能報告', () => {
      performanceMonitor.metrics = {
        loadTime: 2100,
        tpsAverage: 18.5,
        errorCount: 0,
        cacheHitRate: 85,
        memoryUsage: 15 * 1024 * 1024,
        renderTime: 12.5
      };
      const report = performanceMonitor.generateReport();
      expect(report).toHaveProperty('timestamp');
      expect(report).toHaveProperty('performance');
      expect(report).toHaveProperty('game');
      expect(report).toHaveProperty('status');
      expect(report.performance.loadTime).toBe(2100);
      expect(report.performance.memoryUsage).toBe('15 MB');
      expect(report.game.averageTPS).toBe(18.5);
      expect(report.status).toBe('good');
    });
    test('應該正確識別效能問題', () => {
      performanceMonitor.metrics = {
        loadTime: 4000,
        // 超過 3 秒
        memoryUsage: 120 * 1024 * 1024,
        // 超過 100MB
        renderTime: 20,
        // 超過 16.67ms
        errorCount: 2 // 有錯誤
      };
      const status = performanceMonitor.getPerformanceStatus(performanceMonitor.metrics);
      expect(status).toBe('warning');
    });
    test('應該能清除指標', () => {
      performanceMonitor.metrics.loadTime = 2000;
      performanceMonitor.metrics.errorCount = 1;
      performanceMonitor.clearMetrics();
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.loadTime).toBe(0);
      expect(metrics.errorCount).toBe(0);
    });
  });
});
describe('效能最佳化測試', () => {
  let optimizer;
  beforeEach(() => {
    // 模擬效能最佳化器
    class PerformanceOptimizer {
      constructor() {
        this.optimizations = {
          imageCompression: false,
          codeMinification: false,
          caching: false,
          lazyLoading: false
        };
      }
      enableImageCompression() {
        this.optimizations.imageCompression = true;
        return this;
      }
      enableCodeMinification() {
        this.optimizations.codeMinification = true;
        return this;
      }
      enableCaching() {
        this.optimizations.caching = true;
        return this;
      }
      enableLazyLoading() {
        this.optimizations.lazyLoading = true;
        return this;
      }
      getOptimizationScore() {
        const enabled = Object.values(this.optimizations).filter(Boolean).length;
        const total = Object.keys(this.optimizations).length;
        return enabled / total * 100;
      }
      generateOptimizationReport() {
        return {
          score: this.getOptimizationScore(),
          optimizations: {
            ...this.optimizations
          },
          recommendations: this.getRecommendations()
        };
      }
      getRecommendations() {
        const recommendations = [];
        if (!this.optimizations.imageCompression) {
          recommendations.push('啟用圖片壓縮');
        }
        if (!this.optimizations.codeMinification) {
          recommendations.push('啟用程式碼壓縮');
        }
        if (!this.optimizations.caching) {
          recommendations.push('啟用快取策略');
        }
        if (!this.optimizations.lazyLoading) {
          recommendations.push('啟用延遲載入');
        }
        return recommendations;
      }
    }
    optimizer = new PerformanceOptimizer();
  });
  describe('最佳化功能', () => {
    test('應該能啟用圖片壓縮', () => {
      optimizer.enableImageCompression();
      expect(optimizer.optimizations.imageCompression).toBe(true);
    });
    test('應該能啟用程式碼壓縮', () => {
      optimizer.enableCodeMinification();
      expect(optimizer.optimizations.codeMinification).toBe(true);
    });
    test('應該能啟用快取', () => {
      optimizer.enableCaching();
      expect(optimizer.optimizations.caching).toBe(true);
    });
    test('應該能啟用延遲載入', () => {
      optimizer.enableLazyLoading();
      expect(optimizer.optimizations.lazyLoading).toBe(true);
    });
  });
  describe('最佳化評分', () => {
    test('應該正確計算最佳化分數', () => {
      expect(optimizer.getOptimizationScore()).toBe(0);
      optimizer.enableImageCompression();
      expect(optimizer.getOptimizationScore()).toBe(25);
      optimizer.enableCodeMinification();
      expect(optimizer.getOptimizationScore()).toBe(50);
      optimizer.enableCaching();
      expect(optimizer.getOptimizationScore()).toBe(75);
      optimizer.enableLazyLoading();
      expect(optimizer.getOptimizationScore()).toBe(100);
    });
    test('應該生成最佳化報告', () => {
      optimizer.enableImageCompression();
      optimizer.enableCaching();
      const report = optimizer.generateOptimizationReport();
      expect(report.score).toBe(50);
      expect(report.optimizations.imageCompression).toBe(true);
      expect(report.optimizations.caching).toBe(true);
      expect(report.recommendations).toHaveLength(2);
      expect(report.recommendations).toContain('啟用程式碼壓縮');
      expect(report.recommendations).toContain('啟用延遲載入');
    });
  });
});
describe('快取效能測試', () => {
  let cachePerformance;
  beforeEach(() => {
    // 模擬快取效能測試器
    class CachePerformanceTest {
      constructor() {
        this.hitCount = 0;
        this.missCount = 0;
        this.totalRequests = 0;
      }
      simulateRequest(url, useCache = true) {
        this.totalRequests++;
        if (useCache && this.isInCache(url)) {
          this.hitCount++;
          return {
            cached: true,
            loadTime: 10
          };
        } else {
          this.missCount++;
          return {
            cached: false,
            loadTime: 200
          };
        }
      }
      isInCache(url) {
        // 模擬快取邏輯
        const cachedUrls = ['/index.html', '/styles.css', '/app.js', '/manifest.json'];
        return cachedUrls.includes(url);
      }
      getCacheHitRate() {
        if (this.totalRequests === 0) return 0;
        return this.hitCount / this.totalRequests * 100;
      }
      getAverageLoadTime() {
        const hitTime = this.hitCount * 10;
        const missTime = this.missCount * 200;
        const totalTime = hitTime + missTime;
        return this.totalRequests > 0 ? totalTime / this.totalRequests : 0;
      }
      generateCacheReport() {
        return {
          hitRate: this.getCacheHitRate(),
          hitCount: this.hitCount,
          missCount: this.missCount,
          totalRequests: this.totalRequests,
          averageLoadTime: this.getAverageLoadTime()
        };
      }
      reset() {
        this.hitCount = 0;
        this.missCount = 0;
        this.totalRequests = 0;
      }
    }
    cachePerformance = new CachePerformanceTest();
  });
  describe('快取命中測試', () => {
    test('應該正確計算快取命中率', () => {
      // 模擬請求快取的資源
      cachePerformance.simulateRequest('/index.html');
      cachePerformance.simulateRequest('/styles.css');
      cachePerformance.simulateRequest('/app.js');

      // 模擬請求未快取的資源
      cachePerformance.simulateRequest('/api/data');
      cachePerformance.simulateRequest('/images/large.jpg');
      const hitRate = cachePerformance.getCacheHitRate();
      expect(hitRate).toBe(60); // 3/5 = 60%
    });
    test('快取資源應該有更快的載入時間', () => {
      const cachedResult = cachePerformance.simulateRequest('/index.html');
      const uncachedResult = cachePerformance.simulateRequest('/api/data');
      expect(cachedResult.cached).toBe(true);
      expect(cachedResult.loadTime).toBe(10);
      expect(uncachedResult.cached).toBe(false);
      expect(uncachedResult.loadTime).toBe(200);
    });
    test('應該生成詳細的快取報告', () => {
      // 執行多個請求
      for (let i = 0; i < 5; i++) {
        cachePerformance.simulateRequest('/index.html');
      }
      for (let i = 0; i < 3; i++) {
        cachePerformance.simulateRequest('/api/data');
      }
      const report = cachePerformance.generateCacheReport();
      expect(report.hitRate).toBe(62.5); // 5/8 = 62.5%
      expect(report.hitCount).toBe(5);
      expect(report.missCount).toBe(3);
      expect(report.totalRequests).toBe(8);
      expect(report.averageLoadTime).toBe(81.25); // 實際計算結果
    });
  });
});
describe('網路效能測試', () => {
  beforeEach(() => {
    // 設置 performance.now 返回遞增的時間值
    let currentTime = 1000;
    global.performance.now = jest.fn(() => {
      currentTime += 150; // 模擬 150ms 間隔
      return currentTime;
    });
  });
  test('應該測量首次位元組時間 (TTFB)', async () => {
    const startTime = performance.now();

    // 模擬網路請求
    await new Promise(resolve => setTimeout(resolve, 50));
    const ttfb = performance.now() - startTime;
    expect(ttfb).toBeLessThan(200); // TTFB 應該少於 200ms
  });
  test('應該測量資源載入時間', async () => {
    const resources = [{
      name: 'styles.css',
      size: 50000
    }, {
      name: 'app.js',
      size: 200000
    }, {
      name: 'worker.js',
      size: 30000
    }];
    const loadPromises = resources.map(async resource => {
      const startTime = performance.now();

      // 模擬資源載入（基於大小的載入時間）
      const loadTime = resource.size / 1000; // 1KB/ms
      await new Promise(resolve => setTimeout(resolve, loadTime));
      return {
        name: resource.name,
        loadTime: performance.now() - startTime,
        size: resource.size
      };
    });
    const results = await Promise.all(loadPromises);

    // 檢查每個資源的載入時間是否合理
    results.forEach(result => {
      expect(result.loadTime).toBeLessThan(1000); // 應該少於 1 秒
    });

    // 檢查總載入時間
    const totalLoadTime = Math.max(...results.map(r => r.loadTime));
    expect(totalLoadTime).toBeLessThan(2000); // 總時間應該少於 2 秒
  });
  test('應該測量總體效能分數', () => {
    const metrics = {
      fcp: 1200,
      // First Contentful Paint
      lcp: 2400,
      // Largest Contentful Paint
      cls: 0.05,
      // Cumulative Layout Shift
      fid: 80,
      // First Input Delay
      ttfb: 150 // Time to First Byte
    };

    // 簡單的效能評分算法
    let score = 100;
    if (metrics.fcp > 1800) score -= 10;
    if (metrics.lcp > 2500) score -= 15;
    if (metrics.cls > 0.1) score -= 10;
    if (metrics.fid > 100) score -= 10;
    if (metrics.ttfb > 200) score -= 5;
    expect(score).toBeGreaterThanOrEqual(90); // 目標分數 90+
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImplc3QiLCJmbiIsIkRhdGUiLCJtYXJrIiwibWVhc3VyZSIsImdldEVudHJpZXNCeVR5cGUiLCJnZXRFbnRyaWVzQnlOYW1lIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJtZW1vcnkiLCJ1c2VkSlNIZWFwU2l6ZSIsInRvdGFsSlNIZWFwU2l6ZSIsImpzSGVhcFNpemVMaW1pdCIsImRlc2NyaWJlIiwicGVyZm9ybWFuY2VNb25pdG9yIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJQZXJmb3JtYW5jZU1vbml0b3IiLCJjb25zdHJ1Y3RvciIsIm1ldHJpY3MiLCJsb2FkVGltZSIsInRwc0F2ZXJhZ2UiLCJlcnJvckNvdW50IiwiY2FjaGVIaXRSYXRlIiwibWVtb3J5VXNhZ2UiLCJyZW5kZXJUaW1lIiwiaXNUcmFja2luZyIsInN0YXJ0VHJhY2tpbmciLCJ0cmFja0xvYWRUaW1lIiwidHJhY2tNZW1vcnlVc2FnZSIsInRyYWNrUmVuZGVyUGVyZm9ybWFuY2UiLCJzdG9wVHJhY2tpbmciLCJzZXRUaW1lb3V0IiwibG9hZE1lYXN1cmUiLCJkdXJhdGlvbiIsInN0YXJ0VGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImVuZFRpbWUiLCJ0cmFja0dhbWVQZXJmb3JtYW5jZSIsImdhbWVFbmdpbmUiLCJ0cHNTdGF0cyIsInRwc0NhbGN1bGF0b3IiLCJnZXRTdGF0aXN0aWNzIiwiYXZlcmFnZSIsInRyYWNrRXJyb3JzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldE1ldHJpY3MiLCJnZW5lcmF0ZVJlcG9ydCIsInRpbWVzdGFtcCIsInRvSVNPU3RyaW5nIiwiZm9ybWF0Qnl0ZXMiLCJnYW1lIiwiYXZlcmFnZVRQUyIsInN0YXR1cyIsImdldFBlcmZvcm1hbmNlU3RhdHVzIiwiaXNzdWVzIiwicHVzaCIsImxlbmd0aCIsImJ5dGVzIiwiayIsInNpemVzIiwiaSIsIk1hdGgiLCJmbG9vciIsImxvZyIsInBhcnNlRmxvYXQiLCJwb3ciLCJ0b0ZpeGVkIiwiY2xlYXJNZXRyaWNzIiwidGVzdCIsImRvbmUiLCJtb2NrUmV0dXJuVmFsdWUiLCJleHBlY3QiLCJ0b0JlIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0JlTGVzc1RoYW4iLCJmb3JtYXR0ZWQiLCJtb2NrUmV0dXJuVmFsdWVPbmNlIiwibW9jayIsImNhbGxzIiwiY2FsbGJhY2siLCJtb2NrR2FtZUVuZ2luZSIsInBlYWsiLCJjdXJyZW50IiwidG9IYXZlQmVlbkNhbGxlZCIsImVycm9yRXZlbnQiLCJFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJyZWplY3Rpb25FdmVudCIsInJlcG9ydCIsInRvSGF2ZVByb3BlcnR5Iiwib3B0aW1pemVyIiwiUGVyZm9ybWFuY2VPcHRpbWl6ZXIiLCJvcHRpbWl6YXRpb25zIiwiaW1hZ2VDb21wcmVzc2lvbiIsImNvZGVNaW5pZmljYXRpb24iLCJjYWNoaW5nIiwibGF6eUxvYWRpbmciLCJlbmFibGVJbWFnZUNvbXByZXNzaW9uIiwiZW5hYmxlQ29kZU1pbmlmaWNhdGlvbiIsImVuYWJsZUNhY2hpbmciLCJlbmFibGVMYXp5TG9hZGluZyIsImdldE9wdGltaXphdGlvblNjb3JlIiwiZW5hYmxlZCIsIk9iamVjdCIsInZhbHVlcyIsImZpbHRlciIsIkJvb2xlYW4iLCJ0b3RhbCIsImtleXMiLCJnZW5lcmF0ZU9wdGltaXphdGlvblJlcG9ydCIsInNjb3JlIiwicmVjb21tZW5kYXRpb25zIiwiZ2V0UmVjb21tZW5kYXRpb25zIiwidG9IYXZlTGVuZ3RoIiwidG9Db250YWluIiwiY2FjaGVQZXJmb3JtYW5jZSIsIkNhY2hlUGVyZm9ybWFuY2VUZXN0IiwiaGl0Q291bnQiLCJtaXNzQ291bnQiLCJ0b3RhbFJlcXVlc3RzIiwic2ltdWxhdGVSZXF1ZXN0IiwidXJsIiwidXNlQ2FjaGUiLCJpc0luQ2FjaGUiLCJjYWNoZWQiLCJjYWNoZWRVcmxzIiwiaW5jbHVkZXMiLCJnZXRDYWNoZUhpdFJhdGUiLCJnZXRBdmVyYWdlTG9hZFRpbWUiLCJoaXRUaW1lIiwibWlzc1RpbWUiLCJ0b3RhbFRpbWUiLCJnZW5lcmF0ZUNhY2hlUmVwb3J0IiwiaGl0UmF0ZSIsImF2ZXJhZ2VMb2FkVGltZSIsInJlc2V0IiwiY2FjaGVkUmVzdWx0IiwidW5jYWNoZWRSZXN1bHQiLCJjdXJyZW50VGltZSIsIlByb21pc2UiLCJyZXNvbHZlIiwidHRmYiIsInJlc291cmNlcyIsIm5hbWUiLCJzaXplIiwibG9hZFByb21pc2VzIiwibWFwIiwicmVzb3VyY2UiLCJyZXN1bHRzIiwiYWxsIiwiZm9yRWFjaCIsInJlc3VsdCIsInRvdGFsTG9hZFRpbWUiLCJtYXgiLCJyIiwiZmNwIiwibGNwIiwiY2xzIiwiZmlkIiwidG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCJdLCJzb3VyY2VzIjpbInBlcmZvcm1hbmNlLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDmlYjog73muKzoqaZcbiAqIOa4rOippuaHieeUqOeahOaViOiDveaMh+aomeWSjOacgOS9s+WMluWKn+iDvVxuICpcbiAqIEBhdXRob3IgaGFvdG9vbFxuICogQHZlcnNpb24gNy4yLjNcbiAqIEBjcmVhdGVkIDIwMjUtMDgtMThUMDI6Mzk6NTgrMDg6MDBcbiAqL1xuXG4vLyBNb2NrIFBlcmZvcm1hbmNlIEFQSVxuZ2xvYmFsLnBlcmZvcm1hbmNlID0ge1xuICBub3c6IGplc3QuZm4oKCkgPT4gRGF0ZS5ub3coKSksXG4gIG1hcms6IGplc3QuZm4oKSxcbiAgbWVhc3VyZTogamVzdC5mbigpLFxuICBnZXRFbnRyaWVzQnlUeXBlOiBqZXN0LmZuKCgpID0+IFtdKSxcbiAgZ2V0RW50cmllc0J5TmFtZTogamVzdC5mbigoKSA9PiBbXSksXG4gIGNsZWFyTWFya3M6IGplc3QuZm4oKSxcbiAgY2xlYXJNZWFzdXJlczogamVzdC5mbigpLFxuICBtZW1vcnk6IHtcbiAgICB1c2VkSlNIZWFwU2l6ZTogMTAgKiAxMDI0ICogMTAyNCwgLy8gMTBNQlxuICAgIHRvdGFsSlNIZWFwU2l6ZTogNTAgKiAxMDI0ICogMTAyNCwgLy8gNTBNQlxuICAgIGpzSGVhcFNpemVMaW1pdDogMTAwICogMTAyNCAqIDEwMjQsIC8vIDEwME1CXG4gIH0sXG59O1xuXG5kZXNjcmliZSgn5pWI6IO955uj5o6nJywgKCkgPT4ge1xuICBsZXQgcGVyZm9ybWFuY2VNb25pdG9yO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuXG4gICAgLy8g5qih5pOs5pWI6IO955uj5o6n5ZmoXG4gICAgY2xhc3MgUGVyZm9ybWFuY2VNb25pdG9yIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1ldHJpY3MgPSB7XG4gICAgICAgICAgbG9hZFRpbWU6IDAsXG4gICAgICAgICAgdHBzQXZlcmFnZTogMCxcbiAgICAgICAgICBlcnJvckNvdW50OiAwLFxuICAgICAgICAgIGNhY2hlSGl0UmF0ZTogMCxcbiAgICAgICAgICBtZW1vcnlVc2FnZTogMCxcbiAgICAgICAgICByZW5kZXJUaW1lOiAwLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlzVHJhY2tpbmcgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgc3RhcnRUcmFja2luZygpIHtcbiAgICAgICAgdGhpcy5pc1RyYWNraW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50cmFja0xvYWRUaW1lKCk7XG4gICAgICAgIHRoaXMudHJhY2tNZW1vcnlVc2FnZSgpO1xuICAgICAgICB0aGlzLnRyYWNrUmVuZGVyUGVyZm9ybWFuY2UoKTtcbiAgICAgIH1cblxuICAgICAgc3RvcFRyYWNraW5nKCkge1xuICAgICAgICB0aGlzLmlzVHJhY2tpbmcgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdHJhY2tMb2FkVGltZSgpIHtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbG9hZC1zdGFydCcpO1xuXG4gICAgICAgIC8vIOaooeaTrOi8ieWFpeWujOaIkFxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdsb2FkLWVuZCcpO1xuICAgICAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoJ2xvYWQtdGltZScsICdsb2FkLXN0YXJ0JywgJ2xvYWQtZW5kJyk7XG5cbiAgICAgICAgICBjb25zdCBsb2FkTWVhc3VyZSA9IHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoJ2xvYWQtdGltZScpWzBdO1xuICAgICAgICAgIHRoaXMubWV0cmljcy5sb2FkVGltZSA9IGxvYWRNZWFzdXJlPy5kdXJhdGlvbiB8fCAyMTAwO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuXG4gICAgICB0cmFja01lbW9yeVVzYWdlKCkge1xuICAgICAgICBpZiAoJ21lbW9yeScgaW4gcGVyZm9ybWFuY2UpIHtcbiAgICAgICAgICBjb25zdCBtZW1vcnkgPSBwZXJmb3JtYW5jZS5tZW1vcnk7XG4gICAgICAgICAgdGhpcy5tZXRyaWNzLm1lbW9yeVVzYWdlID0gbWVtb3J5LnVzZWRKU0hlYXBTaXplO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyYWNrUmVuZGVyUGVyZm9ybWFuY2UoKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgICAgIC8vIOaooeaTrOa4suafk+aTjeS9nFxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICB0aGlzLm1ldHJpY3MucmVuZGVyVGltZSA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0cmFja0dhbWVQZXJmb3JtYW5jZShnYW1lRW5naW5lKSB7XG4gICAgICAgIGlmICghZ2FtZUVuZ2luZSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHRwc1N0YXRzID0gZ2FtZUVuZ2luZS50cHNDYWxjdWxhdG9yPy5nZXRTdGF0aXN0aWNzKCk7XG4gICAgICAgIGlmICh0cHNTdGF0cykge1xuICAgICAgICAgIHRoaXMubWV0cmljcy50cHNBdmVyYWdlID0gdHBzU3RhdHMuYXZlcmFnZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0cmFja0Vycm9ycygpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMubWV0cmljcy5lcnJvckNvdW50Kys7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5tZXRyaWNzLmVycm9yQ291bnQrKztcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGdldE1ldHJpY3MoKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnRoaXMubWV0cmljcyB9O1xuICAgICAgfVxuXG4gICAgICBnZW5lcmF0ZVJlcG9ydCgpIHtcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IHRoaXMuZ2V0TWV0cmljcygpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgcGVyZm9ybWFuY2U6IHtcbiAgICAgICAgICAgIGxvYWRUaW1lOiBtZXRyaWNzLmxvYWRUaW1lLFxuICAgICAgICAgICAgcmVuZGVyVGltZTogbWV0cmljcy5yZW5kZXJUaW1lLFxuICAgICAgICAgICAgbWVtb3J5VXNhZ2U6IHRoaXMuZm9ybWF0Qnl0ZXMobWV0cmljcy5tZW1vcnlVc2FnZSksXG4gICAgICAgICAgfSxcbiAgICAgICAgICBnYW1lOiB7XG4gICAgICAgICAgICBhdmVyYWdlVFBTOiBtZXRyaWNzLnRwc0F2ZXJhZ2UsXG4gICAgICAgICAgICBlcnJvckNvdW50OiBtZXRyaWNzLmVycm9yQ291bnQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdGF0dXM6IHRoaXMuZ2V0UGVyZm9ybWFuY2VTdGF0dXMobWV0cmljcyksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGdldFBlcmZvcm1hbmNlU3RhdHVzKG1ldHJpY3MpIHtcbiAgICAgICAgY29uc3QgaXNzdWVzID0gW107XG5cbiAgICAgICAgaWYgKG1ldHJpY3MubG9hZFRpbWUgPiAzMDAwKSB7XG4gICAgICAgICAgaXNzdWVzLnB1c2goJ+i8ieWFpeaZgumWk+mBjumVtycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1ldHJpY3MubWVtb3J5VXNhZ2UgPiAxMDAgKiAxMDI0ICogMTAyNCkge1xuICAgICAgICAgIGlzc3Vlcy5wdXNoKCfoqJjmhrbpq5Tkvb/nlKjpgY7pq5gnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRyaWNzLnJlbmRlclRpbWUgPiAxNi42Nykge1xuICAgICAgICAgIGlzc3Vlcy5wdXNoKCfmuLLmn5PmlYjog73kuI3kvbMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRyaWNzLmVycm9yQ291bnQgPiAwKSB7XG4gICAgICAgICAgaXNzdWVzLnB1c2goJ+WtmOWcqOmMr+iqpCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzc3Vlcy5sZW5ndGggPT09IDAgPyAnZ29vZCcgOiAnd2FybmluZyc7XG4gICAgICB9XG5cbiAgICAgIGZvcm1hdEJ5dGVzKGJ5dGVzKSB7XG4gICAgICAgIGlmIChieXRlcyA9PT0gMCkgcmV0dXJuICcwIEJ5dGVzJztcbiAgICAgICAgY29uc3QgayA9IDEwMjQ7XG4gICAgICAgIGNvbnN0IHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQiddO1xuICAgICAgICBjb25zdCBpID0gTWF0aC5mbG9vcihNYXRoLmxvZyhieXRlcykgLyBNYXRoLmxvZyhrKSk7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIE1hdGgucG93KGssIGkpKS50b0ZpeGVkKDIpKSArICcgJyArIHNpemVzW2ldO1xuICAgICAgfVxuXG4gICAgICBjbGVhck1ldHJpY3MoKSB7XG4gICAgICAgIHRoaXMubWV0cmljcyA9IHtcbiAgICAgICAgICBsb2FkVGltZTogMCxcbiAgICAgICAgICB0cHNBdmVyYWdlOiAwLFxuICAgICAgICAgIGVycm9yQ291bnQ6IDAsXG4gICAgICAgICAgY2FjaGVIaXRSYXRlOiAwLFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiAwLFxuICAgICAgICAgIHJlbmRlclRpbWU6IDAsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGVyZm9ybWFuY2VNb25pdG9yID0gbmV3IFBlcmZvcm1hbmNlTW9uaXRvcigpO1xuICB9KTtcblxuICBkZXNjcmliZSgn6LyJ5YWl5pWI6IO9JywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgLy8g6YeN5paw6Kit572uIHBlcmZvcm1hbmNlIG1vY2tcbiAgICAgIGdsb2JhbC5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lID0gamVzdC5mbigpO1xuICAgICAgZ2xvYmFsLnBlcmZvcm1hbmNlLm1hcmsgPSBqZXN0LmZuKCk7XG4gICAgICBnbG9iYWwucGVyZm9ybWFuY2UubWVhc3VyZSA9IGplc3QuZm4oKTtcbiAgICAgIGdsb2JhbC5wZXJmb3JtYW5jZS5ub3cgPSBqZXN0LmZuKCgpID0+IERhdGUubm93KCkpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6L+96Lmk6LyJ5YWl5pmC6ZaTJywgZG9uZSA9PiB7XG4gICAgICBnbG9iYWwucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5TmFtZS5tb2NrUmV0dXJuVmFsdWUoW3sgZHVyYXRpb246IDIxMDAgfV0pO1xuXG4gICAgICBwZXJmb3JtYW5jZU1vbml0b3Iuc3RhcnRUcmFja2luZygpO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IHBlcmZvcm1hbmNlTW9uaXRvci5nZXRNZXRyaWNzKCk7XG4gICAgICAgIGV4cGVjdChtZXRyaWNzLmxvYWRUaW1lKS50b0JlKDIxMDApO1xuICAgICAgICBleHBlY3QoZ2xvYmFsLnBlcmZvcm1hbmNlLm1hcmspLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdsb2FkLXN0YXJ0Jyk7XG4gICAgICAgIGV4cGVjdChnbG9iYWwucGVyZm9ybWFuY2UubWFyaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2xvYWQtZW5kJyk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIDE1MCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfovInlhaXmmYLplpPmh4noqbLlsJHmlrwgMyDnp5InLCBkb25lID0+IHtcbiAgICAgIGdsb2JhbC5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lLm1vY2tSZXR1cm5WYWx1ZShbeyBkdXJhdGlvbjogMjUwMCB9XSk7XG5cbiAgICAgIHBlcmZvcm1hbmNlTW9uaXRvci5zdGFydFRyYWNraW5nKCk7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBtZXRyaWNzID0gcGVyZm9ybWFuY2VNb25pdG9yLmdldE1ldHJpY3MoKTtcbiAgICAgICAgZXhwZWN0KG1ldHJpY3MubG9hZFRpbWUpLnRvQmVMZXNzVGhhbigzMDAwKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgMTUwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+iomOaGtumrlOaViOiDvScsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIC8vIOeiuuS/nSBwZXJmb3JtYW5jZS5tZW1vcnkg5Y+v55SoXG4gICAgICBnbG9iYWwucGVyZm9ybWFuY2UubWVtb3J5ID0ge1xuICAgICAgICB1c2VkSlNIZWFwU2l6ZTogMTAgKiAxMDI0ICogMTAyNCwgLy8gMTBNQlxuICAgICAgICB0b3RhbEpTSGVhcFNpemU6IDIwICogMTAyNCAqIDEwMjQsXG4gICAgICAgIGpzSGVhcFNpemVMaW1pdDogMTAwICogMTAyNCAqIDEwMjQsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6L+96Lmk6KiY5oa26auU5L2/55So6YePJywgKCkgPT4ge1xuICAgICAgcGVyZm9ybWFuY2VNb25pdG9yLnRyYWNrTWVtb3J5VXNhZ2UoKTtcblxuICAgICAgY29uc3QgbWV0cmljcyA9IHBlcmZvcm1hbmNlTW9uaXRvci5nZXRNZXRyaWNzKCk7XG4gICAgICBleHBlY3QobWV0cmljcy5tZW1vcnlVc2FnZSkudG9CZSgxMCAqIDEwMjQgKiAxMDI0KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+iomOaGtumrlOS9v+eUqOaHieipsuWcqOWQiOeQhuevhOWcjeWFpycsICgpID0+IHtcbiAgICAgIHBlcmZvcm1hbmNlTW9uaXRvci50cmFja01lbW9yeVVzYWdlKCk7XG5cbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBwZXJmb3JtYW5jZU1vbml0b3IuZ2V0TWV0cmljcygpO1xuICAgICAgZXhwZWN0KG1ldHJpY3MubWVtb3J5VXNhZ2UpLnRvQmVMZXNzVGhhbigxMDAgKiAxMDI0ICogMTAyNCk7IC8vIOWwkeaWvCAxMDBNQlxuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy5q2j56K65qC85byP5YyW6KiY5oa26auU5aSn5bCPJywgKCkgPT4ge1xuICAgICAgY29uc3QgZm9ybWF0dGVkID0gcGVyZm9ybWFuY2VNb25pdG9yLmZvcm1hdEJ5dGVzKDEwICogMTAyNCAqIDEwMjQpO1xuICAgICAgZXhwZWN0KGZvcm1hdHRlZCkudG9CZSgnMTAgTUInKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+a4suafk+aViOiDvScsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIC8vIOmHjeaWsOioree9riBwZXJmb3JtYW5jZS5ub3cgbW9ja1xuICAgICAgZ2xvYmFsLnBlcmZvcm1hbmNlLm5vdyA9IGplc3QuZm4oKTtcbiAgICAgIGdsb2JhbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBqZXN0LmZuKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLov73ouaTmuLLmn5PmmYLplpMnLCAoKSA9PiB7XG4gICAgICBnbG9iYWwucGVyZm9ybWFuY2Uubm93Lm1vY2tSZXR1cm5WYWx1ZU9uY2UoMTAwMCkubW9ja1JldHVyblZhbHVlT25jZSgxMDEwKTtcblxuICAgICAgcGVyZm9ybWFuY2VNb25pdG9yLnRyYWNrUmVuZGVyUGVyZm9ybWFuY2UoKTtcblxuICAgICAgLy8g5qih5pOsIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgaWYgKGdsb2JhbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUubW9jay5jYWxscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZ2xvYmFsLnJlcXVlc3RBbmltYXRpb25GcmFtZS5tb2NrLmNhbGxzWzBdWzBdO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtZXRyaWNzID0gcGVyZm9ybWFuY2VNb25pdG9yLmdldE1ldHJpY3MoKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLnJlbmRlclRpbWUpLnRvQmUoMTApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5riy5p+T5pmC6ZaT5oeJ6Kmy5bCR5pa8IDE2LjY3bXMgKDYwIEZQUyknLCAoKSA9PiB7XG4gICAgICBnbG9iYWwucGVyZm9ybWFuY2Uubm93Lm1vY2tSZXR1cm5WYWx1ZU9uY2UoMTAwMCkubW9ja1JldHVyblZhbHVlT25jZSgxMDE1KTtcblxuICAgICAgcGVyZm9ybWFuY2VNb25pdG9yLnRyYWNrUmVuZGVyUGVyZm9ybWFuY2UoKTtcblxuICAgICAgaWYgKGdsb2JhbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUubW9jay5jYWxscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZ2xvYmFsLnJlcXVlc3RBbmltYXRpb25GcmFtZS5tb2NrLmNhbGxzWzBdWzBdO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtZXRyaWNzID0gcGVyZm9ybWFuY2VNb25pdG9yLmdldE1ldHJpY3MoKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLnJlbmRlclRpbWUpLnRvQmVMZXNzVGhhbigxNi42Nyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfpgYrmiLLmlYjog70nLCAoKSA9PiB7XG4gICAgdGVzdCgn5oeJ6Kmy6L+96LmkIFRQUyDmlYjog70nLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrR2FtZUVuZ2luZSA9IHtcbiAgICAgICAgdHBzQ2FsY3VsYXRvcjoge1xuICAgICAgICAgIGdldFN0YXRpc3RpY3M6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICAgIGF2ZXJhZ2U6IDE1LjUsXG4gICAgICAgICAgICBwZWFrOiAyNSxcbiAgICAgICAgICAgIGN1cnJlbnQ6IDIwLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIHBlcmZvcm1hbmNlTW9uaXRvci50cmFja0dhbWVQZXJmb3JtYW5jZShtb2NrR2FtZUVuZ2luZSk7XG5cbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBwZXJmb3JtYW5jZU1vbml0b3IuZ2V0TWV0cmljcygpO1xuICAgICAgZXhwZWN0KG1ldHJpY3MudHBzQXZlcmFnZSkudG9CZSgxNS41KTtcbiAgICAgIGV4cGVjdChtb2NrR2FtZUVuZ2luZS50cHNDYWxjdWxhdG9yLmdldFN0YXRpc3RpY3MpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiZleeQhuaykuaciemBiuaIsuW8leaTjueahOaDheazgScsICgpID0+IHtcbiAgICAgIHBlcmZvcm1hbmNlTW9uaXRvci50cmFja0dhbWVQZXJmb3JtYW5jZShudWxsKTtcblxuICAgICAgY29uc3QgbWV0cmljcyA9IHBlcmZvcm1hbmNlTW9uaXRvci5nZXRNZXRyaWNzKCk7XG4gICAgICBleHBlY3QobWV0cmljcy50cHNBdmVyYWdlKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn6Yyv6Kqk6L+96LmkJywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsui/vei5pCBKYXZhU2NyaXB0IOmMr+iqpCcsICgpID0+IHtcbiAgICAgIHBlcmZvcm1hbmNlTW9uaXRvci50cmFja0Vycm9ycygpO1xuXG4gICAgICAvLyDmqKHmk6zpjK/oqqTkuovku7ZcbiAgICAgIGNvbnN0IGVycm9yRXZlbnQgPSBuZXcgRXZlbnQoJ2Vycm9yJyk7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChlcnJvckV2ZW50KTtcblxuICAgICAgY29uc3QgbWV0cmljcyA9IHBlcmZvcm1hbmNlTW9uaXRvci5nZXRNZXRyaWNzKCk7XG4gICAgICBleHBlY3QobWV0cmljcy5lcnJvckNvdW50KS50b0JlKDEpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6L+96Lmk5pyq6JmV55CG55qEIFByb21pc2Ug5ouS57WVJywgKCkgPT4ge1xuICAgICAgcGVyZm9ybWFuY2VNb25pdG9yLnRyYWNrRXJyb3JzKCk7XG5cbiAgICAgIC8vIOaooeaTrCB1bmhhbmRsZWRyZWplY3Rpb24g5LqL5Lu2XG4gICAgICBjb25zdCByZWplY3Rpb25FdmVudCA9IG5ldyBFdmVudCgndW5oYW5kbGVkcmVqZWN0aW9uJyk7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChyZWplY3Rpb25FdmVudCk7XG5cbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBwZXJmb3JtYW5jZU1vbml0b3IuZ2V0TWV0cmljcygpO1xuICAgICAgZXhwZWN0KG1ldHJpY3MuZXJyb3JDb3VudCkudG9CZSgxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+aViOiDveWgseWRiicsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLnlJ/miJDlrozmlbTnmoTmlYjog73loLHlkYonLCAoKSA9PiB7XG4gICAgICBwZXJmb3JtYW5jZU1vbml0b3IubWV0cmljcyA9IHtcbiAgICAgICAgbG9hZFRpbWU6IDIxMDAsXG4gICAgICAgIHRwc0F2ZXJhZ2U6IDE4LjUsXG4gICAgICAgIGVycm9yQ291bnQ6IDAsXG4gICAgICAgIGNhY2hlSGl0UmF0ZTogODUsXG4gICAgICAgIG1lbW9yeVVzYWdlOiAxNSAqIDEwMjQgKiAxMDI0LFxuICAgICAgICByZW5kZXJUaW1lOiAxMi41LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVwb3J0ID0gcGVyZm9ybWFuY2VNb25pdG9yLmdlbmVyYXRlUmVwb3J0KCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvSGF2ZVByb3BlcnR5KCd0aW1lc3RhbXAnKTtcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvSGF2ZVByb3BlcnR5KCdwZXJmb3JtYW5jZScpO1xuICAgICAgZXhwZWN0KHJlcG9ydCkudG9IYXZlUHJvcGVydHkoJ2dhbWUnKTtcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvSGF2ZVByb3BlcnR5KCdzdGF0dXMnKTtcblxuICAgICAgZXhwZWN0KHJlcG9ydC5wZXJmb3JtYW5jZS5sb2FkVGltZSkudG9CZSgyMTAwKTtcbiAgICAgIGV4cGVjdChyZXBvcnQucGVyZm9ybWFuY2UubWVtb3J5VXNhZ2UpLnRvQmUoJzE1IE1CJyk7XG4gICAgICBleHBlY3QocmVwb3J0LmdhbWUuYXZlcmFnZVRQUykudG9CZSgxOC41KTtcbiAgICAgIGV4cGVjdChyZXBvcnQuc3RhdHVzKS50b0JlKCdnb29kJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLmraPnorrorZjliKXmlYjog73llY/poYwnLCAoKSA9PiB7XG4gICAgICBwZXJmb3JtYW5jZU1vbml0b3IubWV0cmljcyA9IHtcbiAgICAgICAgbG9hZFRpbWU6IDQwMDAsIC8vIOi2hemBjiAzIOenklxuICAgICAgICBtZW1vcnlVc2FnZTogMTIwICogMTAyNCAqIDEwMjQsIC8vIOi2hemBjiAxMDBNQlxuICAgICAgICByZW5kZXJUaW1lOiAyMCwgLy8g6LaF6YGOIDE2LjY3bXNcbiAgICAgICAgZXJyb3JDb3VudDogMiwgLy8g5pyJ6Yyv6KqkXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzdGF0dXMgPSBwZXJmb3JtYW5jZU1vbml0b3IuZ2V0UGVyZm9ybWFuY2VTdGF0dXMocGVyZm9ybWFuY2VNb25pdG9yLm1ldHJpY3MpO1xuICAgICAgZXhwZWN0KHN0YXR1cykudG9CZSgnd2FybmluZycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6IO95riF6Zmk5oyH5qiZJywgKCkgPT4ge1xuICAgICAgcGVyZm9ybWFuY2VNb25pdG9yLm1ldHJpY3MubG9hZFRpbWUgPSAyMDAwO1xuICAgICAgcGVyZm9ybWFuY2VNb25pdG9yLm1ldHJpY3MuZXJyb3JDb3VudCA9IDE7XG5cbiAgICAgIHBlcmZvcm1hbmNlTW9uaXRvci5jbGVhck1ldHJpY3MoKTtcblxuICAgICAgY29uc3QgbWV0cmljcyA9IHBlcmZvcm1hbmNlTW9uaXRvci5nZXRNZXRyaWNzKCk7XG4gICAgICBleHBlY3QobWV0cmljcy5sb2FkVGltZSkudG9CZSgwKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLmVycm9yQ291bnQpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCfmlYjog73mnIDkvbPljJbmuKzoqaYnLCAoKSA9PiB7XG4gIGxldCBvcHRpbWl6ZXI7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8g5qih5pOs5pWI6IO95pyA5L2z5YyW5ZmoXG4gICAgY2xhc3MgUGVyZm9ybWFuY2VPcHRpbWl6ZXIge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMub3B0aW1pemF0aW9ucyA9IHtcbiAgICAgICAgICBpbWFnZUNvbXByZXNzaW9uOiBmYWxzZSxcbiAgICAgICAgICBjb2RlTWluaWZpY2F0aW9uOiBmYWxzZSxcbiAgICAgICAgICBjYWNoaW5nOiBmYWxzZSxcbiAgICAgICAgICBsYXp5TG9hZGluZzogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGVuYWJsZUltYWdlQ29tcHJlc3Npb24oKSB7XG4gICAgICAgIHRoaXMub3B0aW1pemF0aW9ucy5pbWFnZUNvbXByZXNzaW9uID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGVuYWJsZUNvZGVNaW5pZmljYXRpb24oKSB7XG4gICAgICAgIHRoaXMub3B0aW1pemF0aW9ucy5jb2RlTWluaWZpY2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGVuYWJsZUNhY2hpbmcoKSB7XG4gICAgICAgIHRoaXMub3B0aW1pemF0aW9ucy5jYWNoaW5nID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGVuYWJsZUxhenlMb2FkaW5nKCkge1xuICAgICAgICB0aGlzLm9wdGltaXphdGlvbnMubGF6eUxvYWRpbmcgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgZ2V0T3B0aW1pemF0aW9uU2NvcmUoKSB7XG4gICAgICAgIGNvbnN0IGVuYWJsZWQgPSBPYmplY3QudmFsdWVzKHRoaXMub3B0aW1pemF0aW9ucykuZmlsdGVyKEJvb2xlYW4pLmxlbmd0aDtcbiAgICAgICAgY29uc3QgdG90YWwgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGltaXphdGlvbnMpLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIChlbmFibGVkIC8gdG90YWwpICogMTAwO1xuICAgICAgfVxuXG4gICAgICBnZW5lcmF0ZU9wdGltaXphdGlvblJlcG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzY29yZTogdGhpcy5nZXRPcHRpbWl6YXRpb25TY29yZSgpLFxuICAgICAgICAgIG9wdGltaXphdGlvbnM6IHsgLi4udGhpcy5vcHRpbWl6YXRpb25zIH0sXG4gICAgICAgICAgcmVjb21tZW5kYXRpb25zOiB0aGlzLmdldFJlY29tbWVuZGF0aW9ucygpLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBnZXRSZWNvbW1lbmRhdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IFtdO1xuXG4gICAgICAgIGlmICghdGhpcy5vcHRpbWl6YXRpb25zLmltYWdlQ29tcHJlc3Npb24pIHtcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgn5ZWf55So5ZyW54mH5aOT57iuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMub3B0aW1pemF0aW9ucy5jb2RlTWluaWZpY2F0aW9uKSB7XG4gICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ+WVn+eUqOeoi+W8j+eivOWjk+e4ricpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGltaXphdGlvbnMuY2FjaGluZykge1xuICAgICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCfllZ/nlKjlv6vlj5bnrZbnlaUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5vcHRpbWl6YXRpb25zLmxhenlMb2FkaW5nKSB7XG4gICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ+WVn+eUqOW7tumBsui8ieWFpScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRpbWl6ZXIgPSBuZXcgUGVyZm9ybWFuY2VPcHRpbWl6ZXIoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+acgOS9s+WMluWKn+iDvScsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73llZ/nlKjlnJbniYflo5PnuK4nLCAoKSA9PiB7XG4gICAgICBvcHRpbWl6ZXIuZW5hYmxlSW1hZ2VDb21wcmVzc2lvbigpO1xuXG4gICAgICBleHBlY3Qob3B0aW1pemVyLm9wdGltaXphdGlvbnMuaW1hZ2VDb21wcmVzc2lvbikudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveWVn+eUqOeoi+W8j+eivOWjk+e4ricsICgpID0+IHtcbiAgICAgIG9wdGltaXplci5lbmFibGVDb2RlTWluaWZpY2F0aW9uKCk7XG5cbiAgICAgIGV4cGVjdChvcHRpbWl6ZXIub3B0aW1pemF0aW9ucy5jb2RlTWluaWZpY2F0aW9uKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6IO95ZWf55So5b+r5Y+WJywgKCkgPT4ge1xuICAgICAgb3B0aW1pemVyLmVuYWJsZUNhY2hpbmcoKTtcblxuICAgICAgZXhwZWN0KG9wdGltaXplci5vcHRpbWl6YXRpb25zLmNhY2hpbmcpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLog73llZ/nlKjlu7bpgbLovInlhaUnLCAoKSA9PiB7XG4gICAgICBvcHRpbWl6ZXIuZW5hYmxlTGF6eUxvYWRpbmcoKTtcblxuICAgICAgZXhwZWN0KG9wdGltaXplci5vcHRpbWl6YXRpb25zLmxhenlMb2FkaW5nKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn5pyA5L2z5YyW6KmV5YiGJywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsuato+eiuuioiOeul+acgOS9s+WMluWIhuaVuCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChvcHRpbWl6ZXIuZ2V0T3B0aW1pemF0aW9uU2NvcmUoKSkudG9CZSgwKTtcblxuICAgICAgb3B0aW1pemVyLmVuYWJsZUltYWdlQ29tcHJlc3Npb24oKTtcbiAgICAgIGV4cGVjdChvcHRpbWl6ZXIuZ2V0T3B0aW1pemF0aW9uU2NvcmUoKSkudG9CZSgyNSk7XG5cbiAgICAgIG9wdGltaXplci5lbmFibGVDb2RlTWluaWZpY2F0aW9uKCk7XG4gICAgICBleHBlY3Qob3B0aW1pemVyLmdldE9wdGltaXphdGlvblNjb3JlKCkpLnRvQmUoNTApO1xuXG4gICAgICBvcHRpbWl6ZXIuZW5hYmxlQ2FjaGluZygpO1xuICAgICAgZXhwZWN0KG9wdGltaXplci5nZXRPcHRpbWl6YXRpb25TY29yZSgpKS50b0JlKDc1KTtcblxuICAgICAgb3B0aW1pemVyLmVuYWJsZUxhenlMb2FkaW5nKCk7XG4gICAgICBleHBlY3Qob3B0aW1pemVyLmdldE9wdGltaXphdGlvblNjb3JlKCkpLnRvQmUoMTAwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsueUn+aIkOacgOS9s+WMluWgseWRiicsICgpID0+IHtcbiAgICAgIG9wdGltaXplci5lbmFibGVJbWFnZUNvbXByZXNzaW9uKCk7XG4gICAgICBvcHRpbWl6ZXIuZW5hYmxlQ2FjaGluZygpO1xuXG4gICAgICBjb25zdCByZXBvcnQgPSBvcHRpbWl6ZXIuZ2VuZXJhdGVPcHRpbWl6YXRpb25SZXBvcnQoKTtcblxuICAgICAgZXhwZWN0KHJlcG9ydC5zY29yZSkudG9CZSg1MCk7XG4gICAgICBleHBlY3QocmVwb3J0Lm9wdGltaXphdGlvbnMuaW1hZ2VDb21wcmVzc2lvbikudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXBvcnQub3B0aW1pemF0aW9ucy5jYWNoaW5nKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5yZWNvbW1lbmRhdGlvbnMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChyZXBvcnQucmVjb21tZW5kYXRpb25zKS50b0NvbnRhaW4oJ+WVn+eUqOeoi+W8j+eivOWjk+e4ricpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5yZWNvbW1lbmRhdGlvbnMpLnRvQ29udGFpbign5ZWf55So5bu26YGy6LyJ5YWlJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCflv6vlj5bmlYjog73muKzoqaYnLCAoKSA9PiB7XG4gIGxldCBjYWNoZVBlcmZvcm1hbmNlO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIOaooeaTrOW/q+WPluaViOiDvea4rOippuWZqFxuICAgIGNsYXNzIENhY2hlUGVyZm9ybWFuY2VUZXN0IHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmhpdENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5taXNzQ291bnQgPSAwO1xuICAgICAgICB0aGlzLnRvdGFsUmVxdWVzdHMgPSAwO1xuICAgICAgfVxuXG4gICAgICBzaW11bGF0ZVJlcXVlc3QodXJsLCB1c2VDYWNoZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy50b3RhbFJlcXVlc3RzKys7XG5cbiAgICAgICAgaWYgKHVzZUNhY2hlICYmIHRoaXMuaXNJbkNhY2hlKHVybCkpIHtcbiAgICAgICAgICB0aGlzLmhpdENvdW50Kys7XG4gICAgICAgICAgcmV0dXJuIHsgY2FjaGVkOiB0cnVlLCBsb2FkVGltZTogMTAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm1pc3NDb3VudCsrO1xuICAgICAgICAgIHJldHVybiB7IGNhY2hlZDogZmFsc2UsIGxvYWRUaW1lOiAyMDAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpc0luQ2FjaGUodXJsKSB7XG4gICAgICAgIC8vIOaooeaTrOW/q+WPlumCj+i8r1xuICAgICAgICBjb25zdCBjYWNoZWRVcmxzID0gWycvaW5kZXguaHRtbCcsICcvc3R5bGVzLmNzcycsICcvYXBwLmpzJywgJy9tYW5pZmVzdC5qc29uJ107XG4gICAgICAgIHJldHVybiBjYWNoZWRVcmxzLmluY2x1ZGVzKHVybCk7XG4gICAgICB9XG5cbiAgICAgIGdldENhY2hlSGl0UmF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMudG90YWxSZXF1ZXN0cyA9PT0gMCkgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiAodGhpcy5oaXRDb3VudCAvIHRoaXMudG90YWxSZXF1ZXN0cykgKiAxMDA7XG4gICAgICB9XG5cbiAgICAgIGdldEF2ZXJhZ2VMb2FkVGltZSgpIHtcbiAgICAgICAgY29uc3QgaGl0VGltZSA9IHRoaXMuaGl0Q291bnQgKiAxMDtcbiAgICAgICAgY29uc3QgbWlzc1RpbWUgPSB0aGlzLm1pc3NDb3VudCAqIDIwMDtcbiAgICAgICAgY29uc3QgdG90YWxUaW1lID0gaGl0VGltZSArIG1pc3NUaW1lO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnRvdGFsUmVxdWVzdHMgPiAwID8gdG90YWxUaW1lIC8gdGhpcy50b3RhbFJlcXVlc3RzIDogMDtcbiAgICAgIH1cblxuICAgICAgZ2VuZXJhdGVDYWNoZVJlcG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBoaXRSYXRlOiB0aGlzLmdldENhY2hlSGl0UmF0ZSgpLFxuICAgICAgICAgIGhpdENvdW50OiB0aGlzLmhpdENvdW50LFxuICAgICAgICAgIG1pc3NDb3VudDogdGhpcy5taXNzQ291bnQsXG4gICAgICAgICAgdG90YWxSZXF1ZXN0czogdGhpcy50b3RhbFJlcXVlc3RzLFxuICAgICAgICAgIGF2ZXJhZ2VMb2FkVGltZTogdGhpcy5nZXRBdmVyYWdlTG9hZFRpbWUoKSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuaGl0Q291bnQgPSAwO1xuICAgICAgICB0aGlzLm1pc3NDb3VudCA9IDA7XG4gICAgICAgIHRoaXMudG90YWxSZXF1ZXN0cyA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2FjaGVQZXJmb3JtYW5jZSA9IG5ldyBDYWNoZVBlcmZvcm1hbmNlVGVzdCgpO1xuICB9KTtcblxuICBkZXNjcmliZSgn5b+r5Y+W5ZG95Lit5ris6KmmJywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsuato+eiuuioiOeul+W/q+WPluWRveS4reeOhycsICgpID0+IHtcbiAgICAgIC8vIOaooeaTrOiri+axguW/q+WPlueahOizh+a6kFxuICAgICAgY2FjaGVQZXJmb3JtYW5jZS5zaW11bGF0ZVJlcXVlc3QoJy9pbmRleC5odG1sJyk7XG4gICAgICBjYWNoZVBlcmZvcm1hbmNlLnNpbXVsYXRlUmVxdWVzdCgnL3N0eWxlcy5jc3MnKTtcbiAgICAgIGNhY2hlUGVyZm9ybWFuY2Uuc2ltdWxhdGVSZXF1ZXN0KCcvYXBwLmpzJyk7XG5cbiAgICAgIC8vIOaooeaTrOiri+axguacquW/q+WPlueahOizh+a6kFxuICAgICAgY2FjaGVQZXJmb3JtYW5jZS5zaW11bGF0ZVJlcXVlc3QoJy9hcGkvZGF0YScpO1xuICAgICAgY2FjaGVQZXJmb3JtYW5jZS5zaW11bGF0ZVJlcXVlc3QoJy9pbWFnZXMvbGFyZ2UuanBnJyk7XG5cbiAgICAgIGNvbnN0IGhpdFJhdGUgPSBjYWNoZVBlcmZvcm1hbmNlLmdldENhY2hlSGl0UmF0ZSgpO1xuICAgICAgZXhwZWN0KGhpdFJhdGUpLnRvQmUoNjApOyAvLyAzLzUgPSA2MCVcbiAgICB9KTtcblxuICAgIHRlc3QoJ+W/q+WPluizh+a6kOaHieipsuacieabtOW/q+eahOi8ieWFpeaZgumWkycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhY2hlZFJlc3VsdCA9IGNhY2hlUGVyZm9ybWFuY2Uuc2ltdWxhdGVSZXF1ZXN0KCcvaW5kZXguaHRtbCcpO1xuICAgICAgY29uc3QgdW5jYWNoZWRSZXN1bHQgPSBjYWNoZVBlcmZvcm1hbmNlLnNpbXVsYXRlUmVxdWVzdCgnL2FwaS9kYXRhJyk7XG5cbiAgICAgIGV4cGVjdChjYWNoZWRSZXN1bHQuY2FjaGVkKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGNhY2hlZFJlc3VsdC5sb2FkVGltZSkudG9CZSgxMCk7XG5cbiAgICAgIGV4cGVjdCh1bmNhY2hlZFJlc3VsdC5jYWNoZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHVuY2FjaGVkUmVzdWx0LmxvYWRUaW1lKS50b0JlKDIwMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLnlJ/miJDoqbPntLDnmoTlv6vlj5bloLHlkYonLCAoKSA9PiB7XG4gICAgICAvLyDln7fooYzlpJrlgIvoq4vmsYJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgIGNhY2hlUGVyZm9ybWFuY2Uuc2ltdWxhdGVSZXF1ZXN0KCcvaW5kZXguaHRtbCcpO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgY2FjaGVQZXJmb3JtYW5jZS5zaW11bGF0ZVJlcXVlc3QoJy9hcGkvZGF0YScpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXBvcnQgPSBjYWNoZVBlcmZvcm1hbmNlLmdlbmVyYXRlQ2FjaGVSZXBvcnQoKTtcblxuICAgICAgZXhwZWN0KHJlcG9ydC5oaXRSYXRlKS50b0JlKDYyLjUpOyAvLyA1LzggPSA2Mi41JVxuICAgICAgZXhwZWN0KHJlcG9ydC5oaXRDb3VudCkudG9CZSg1KTtcbiAgICAgIGV4cGVjdChyZXBvcnQubWlzc0NvdW50KS50b0JlKDMpO1xuICAgICAgZXhwZWN0KHJlcG9ydC50b3RhbFJlcXVlc3RzKS50b0JlKDgpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5hdmVyYWdlTG9hZFRpbWUpLnRvQmUoODEuMjUpOyAvLyDlr6bpmpvoqIjnrpfntZDmnpxcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ+e2sui3r+aViOiDvea4rOippicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8g6Kit572uIHBlcmZvcm1hbmNlLm5vdyDov5Tlm57pgZ7lop7nmoTmmYLplpPlgLxcbiAgICBsZXQgY3VycmVudFRpbWUgPSAxMDAwO1xuICAgIGdsb2JhbC5wZXJmb3JtYW5jZS5ub3cgPSBqZXN0LmZuKCgpID0+IHtcbiAgICAgIGN1cnJlbnRUaW1lICs9IDE1MDsgLy8g5qih5pOsIDE1MG1zIOmWk+malFxuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCfmh4noqbLmuKzph4/pppbmrKHkvY3lhYPntYTmmYLplpMgKFRURkIpJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgLy8g5qih5pOs57ay6Lev6KuL5rGCXG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwKSk7XG5cbiAgICBjb25zdCB0dGZiID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWU7XG5cbiAgICBleHBlY3QodHRmYikudG9CZUxlc3NUaGFuKDIwMCk7IC8vIFRURkIg5oeJ6Kmy5bCR5pa8IDIwMG1zXG4gIH0pO1xuXG4gIHRlc3QoJ+aHieipsua4rOmHj+izh+a6kOi8ieWFpeaZgumWkycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNvdXJjZXMgPSBbXG4gICAgICB7IG5hbWU6ICdzdHlsZXMuY3NzJywgc2l6ZTogNTAwMDAgfSxcbiAgICAgIHsgbmFtZTogJ2FwcC5qcycsIHNpemU6IDIwMDAwMCB9LFxuICAgICAgeyBuYW1lOiAnd29ya2VyLmpzJywgc2l6ZTogMzAwMDAgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgbG9hZFByb21pc2VzID0gcmVzb3VyY2VzLm1hcChhc3luYyByZXNvdXJjZSA9PiB7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgICAgLy8g5qih5pOs6LOH5rqQ6LyJ5YWl77yI5Z+65pa85aSn5bCP55qE6LyJ5YWl5pmC6ZaT77yJXG4gICAgICBjb25zdCBsb2FkVGltZSA9IHJlc291cmNlLnNpemUgLyAxMDAwOyAvLyAxS0IvbXNcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBsb2FkVGltZSkpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiByZXNvdXJjZS5uYW1lLFxuICAgICAgICBsb2FkVGltZTogcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWUsXG4gICAgICAgIHNpemU6IHJlc291cmNlLnNpemUsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKGxvYWRQcm9taXNlcyk7XG5cbiAgICAvLyDmqqLmn6Xmr4/lgIvos4fmupDnmoTovInlhaXmmYLplpPmmK/lkKblkIjnkIZcbiAgICByZXN1bHRzLmZvckVhY2gocmVzdWx0ID0+IHtcbiAgICAgIGV4cGVjdChyZXN1bHQubG9hZFRpbWUpLnRvQmVMZXNzVGhhbigxMDAwKTsgLy8g5oeJ6Kmy5bCR5pa8IDEg56eSXG4gICAgfSk7XG5cbiAgICAvLyDmqqLmn6XnuL3ovInlhaXmmYLplpNcbiAgICBjb25zdCB0b3RhbExvYWRUaW1lID0gTWF0aC5tYXgoLi4ucmVzdWx0cy5tYXAociA9PiByLmxvYWRUaW1lKSk7XG4gICAgZXhwZWN0KHRvdGFsTG9hZFRpbWUpLnRvQmVMZXNzVGhhbigyMDAwKTsgLy8g57i95pmC6ZaT5oeJ6Kmy5bCR5pa8IDIg56eSXG4gIH0pO1xuXG4gIHRlc3QoJ+aHieipsua4rOmHj+e4vemrlOaViOiDveWIhuaVuCcsICgpID0+IHtcbiAgICBjb25zdCBtZXRyaWNzID0ge1xuICAgICAgZmNwOiAxMjAwLCAvLyBGaXJzdCBDb250ZW50ZnVsIFBhaW50XG4gICAgICBsY3A6IDI0MDAsIC8vIExhcmdlc3QgQ29udGVudGZ1bCBQYWludFxuICAgICAgY2xzOiAwLjA1LCAvLyBDdW11bGF0aXZlIExheW91dCBTaGlmdFxuICAgICAgZmlkOiA4MCwgLy8gRmlyc3QgSW5wdXQgRGVsYXlcbiAgICAgIHR0ZmI6IDE1MCwgLy8gVGltZSB0byBGaXJzdCBCeXRlXG4gICAgfTtcblxuICAgIC8vIOewoeWWrueahOaViOiDveipleWIhueul+azlVxuICAgIGxldCBzY29yZSA9IDEwMDtcblxuICAgIGlmIChtZXRyaWNzLmZjcCA+IDE4MDApIHNjb3JlIC09IDEwO1xuICAgIGlmIChtZXRyaWNzLmxjcCA+IDI1MDApIHNjb3JlIC09IDE1O1xuICAgIGlmIChtZXRyaWNzLmNscyA+IDAuMSkgc2NvcmUgLT0gMTA7XG4gICAgaWYgKG1ldHJpY3MuZmlkID4gMTAwKSBzY29yZSAtPSAxMDtcbiAgICBpZiAobWV0cmljcy50dGZiID4gMjAwKSBzY29yZSAtPSA1O1xuXG4gICAgZXhwZWN0KHNjb3JlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDkwKTsgLy8g55uu5qiZ5YiG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