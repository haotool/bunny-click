{"version":3,"names":["global","performance","now","jest","fn","Date","mark","measure","getEntriesByType","getEntriesByName","clearMarks","clearMeasures","memory","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","describe","performanceMonitor","beforeEach","clearAllMocks","PerformanceMonitor","constructor","metrics","loadTime","tpsAverage","errorCount","cacheHitRate","memoryUsage","renderTime","isTracking","startTracking","trackLoadTime","trackMemoryUsage","trackRenderPerformance","stopTracking","setTimeout","loadMeasure","duration","startTime","requestAnimationFrame","endTime","trackGamePerformance","gameEngine","tpsStats","tpsCalculator","getStatistics","average","trackErrors","window","addEventListener","getMetrics","generateReport","timestamp","toISOString","formatBytes","game","averageTPS","status","getPerformanceStatus","issues","push","length","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","clearMetrics","test","done","mockReturnValue","expect","toBe","toHaveBeenCalledWith","toBeLessThan","formatted","mockReturnValueOnce","mock","calls","callback","mockGameEngine","peak","current","toHaveBeenCalled","errorEvent","Event","dispatchEvent","rejectionEvent","report","toHaveProperty","optimizer","PerformanceOptimizer","optimizations","imageCompression","codeMinification","caching","lazyLoading","enableImageCompression","enableCodeMinification","enableCaching","enableLazyLoading","getOptimizationScore","enabled","Object","values","filter","Boolean","total","keys","generateOptimizationReport","score","recommendations","getRecommendations","toHaveLength","toContain","cachePerformance","CachePerformanceTest","hitCount","missCount","totalRequests","simulateRequest","url","useCache","isInCache","cached","cachedUrls","includes","getCacheHitRate","getAverageLoadTime","hitTime","missTime","totalTime","generateCacheReport","hitRate","averageLoadTime","reset","cachedResult","uncachedResult","currentTime","Promise","resolve","ttfb","resources","name","size","loadPromises","map","resource","results","all","forEach","result","totalLoadTime","max","r","fcp","lcp","cls","fid","toBeGreaterThanOrEqual"],"sources":["performance.test.js"],"sourcesContent":["/**\n * 效能測試\n * 測試應用的效能指標和最佳化功能\n *\n * @author haotool\n * @version 7.2.3\n * @created 2025-08-18T02:39:58+08:00\n */\n\n// Mock Performance API\nglobal.performance = {\n  now: jest.fn(() => Date.now()),\n  mark: jest.fn(),\n  measure: jest.fn(),\n  getEntriesByType: jest.fn(() => []),\n  getEntriesByName: jest.fn(() => []),\n  clearMarks: jest.fn(),\n  clearMeasures: jest.fn(),\n  memory: {\n    usedJSHeapSize: 10 * 1024 * 1024, // 10MB\n    totalJSHeapSize: 50 * 1024 * 1024, // 50MB\n    jsHeapSizeLimit: 100 * 1024 * 1024, // 100MB\n  },\n};\n\ndescribe('效能監控', () => {\n  let performanceMonitor;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // 模擬效能監控器\n    class PerformanceMonitor {\n      constructor() {\n        this.metrics = {\n          loadTime: 0,\n          tpsAverage: 0,\n          errorCount: 0,\n          cacheHitRate: 0,\n          memoryUsage: 0,\n          renderTime: 0,\n        };\n        this.isTracking = false;\n      }\n\n      startTracking() {\n        this.isTracking = true;\n        this.trackLoadTime();\n        this.trackMemoryUsage();\n        this.trackRenderPerformance();\n      }\n\n      stopTracking() {\n        this.isTracking = false;\n      }\n\n      trackLoadTime() {\n        performance.mark('load-start');\n\n        // 模擬載入完成\n        setTimeout(() => {\n          performance.mark('load-end');\n          performance.measure('load-time', 'load-start', 'load-end');\n\n          const loadMeasure = performance.getEntriesByName('load-time')[0];\n          this.metrics.loadTime = loadMeasure?.duration || 2100;\n        }, 100);\n      }\n\n      trackMemoryUsage() {\n        if ('memory' in performance) {\n          const memory = performance.memory;\n          this.metrics.memoryUsage = memory.usedJSHeapSize;\n        }\n      }\n\n      trackRenderPerformance() {\n        const startTime = performance.now();\n\n        // 模擬渲染操作\n        requestAnimationFrame(() => {\n          const endTime = performance.now();\n          this.metrics.renderTime = endTime - startTime;\n        });\n      }\n\n      trackGamePerformance(gameEngine) {\n        if (!gameEngine) return;\n\n        const tpsStats = gameEngine.tpsCalculator?.getStatistics();\n        if (tpsStats) {\n          this.metrics.tpsAverage = tpsStats.average;\n        }\n      }\n\n      trackErrors() {\n        window.addEventListener('error', () => {\n          this.metrics.errorCount++;\n        });\n\n        window.addEventListener('unhandledrejection', () => {\n          this.metrics.errorCount++;\n        });\n      }\n\n      getMetrics() {\n        return { ...this.metrics };\n      }\n\n      generateReport() {\n        const metrics = this.getMetrics();\n\n        return {\n          timestamp: new Date().toISOString(),\n          performance: {\n            loadTime: metrics.loadTime,\n            renderTime: metrics.renderTime,\n            memoryUsage: this.formatBytes(metrics.memoryUsage),\n          },\n          game: {\n            averageTPS: metrics.tpsAverage,\n            errorCount: metrics.errorCount,\n          },\n          status: this.getPerformanceStatus(metrics),\n        };\n      }\n\n      getPerformanceStatus(metrics) {\n        const issues = [];\n\n        if (metrics.loadTime > 3000) {\n          issues.push('載入時間過長');\n        }\n\n        if (metrics.memoryUsage > 100 * 1024 * 1024) {\n          issues.push('記憶體使用過高');\n        }\n\n        if (metrics.renderTime > 16.67) {\n          issues.push('渲染效能不佳');\n        }\n\n        if (metrics.errorCount > 0) {\n          issues.push('存在錯誤');\n        }\n\n        return issues.length === 0 ? 'good' : 'warning';\n      }\n\n      formatBytes(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n      }\n\n      clearMetrics() {\n        this.metrics = {\n          loadTime: 0,\n          tpsAverage: 0,\n          errorCount: 0,\n          cacheHitRate: 0,\n          memoryUsage: 0,\n          renderTime: 0,\n        };\n      }\n    }\n\n    performanceMonitor = new PerformanceMonitor();\n  });\n\n  describe('載入效能', () => {\n    beforeEach(() => {\n      // 重新設置 performance mock\n      global.performance.getEntriesByName = jest.fn();\n      global.performance.mark = jest.fn();\n      global.performance.measure = jest.fn();\n      global.performance.now = jest.fn(() => Date.now());\n    });\n\n    test('應該追蹤載入時間', done => {\n      global.performance.getEntriesByName.mockReturnValue([{ duration: 2100 }]);\n\n      performanceMonitor.startTracking();\n\n      setTimeout(() => {\n        const metrics = performanceMonitor.getMetrics();\n        expect(metrics.loadTime).toBe(2100);\n        expect(global.performance.mark).toHaveBeenCalledWith('load-start');\n        expect(global.performance.mark).toHaveBeenCalledWith('load-end');\n        done();\n      }, 150);\n    });\n\n    test('載入時間應該少於 3 秒', done => {\n      global.performance.getEntriesByName.mockReturnValue([{ duration: 2500 }]);\n\n      performanceMonitor.startTracking();\n\n      setTimeout(() => {\n        const metrics = performanceMonitor.getMetrics();\n        expect(metrics.loadTime).toBeLessThan(3000);\n        done();\n      }, 150);\n    });\n  });\n\n  describe('記憶體效能', () => {\n    beforeEach(() => {\n      // 確保 performance.memory 可用\n      global.performance.memory = {\n        usedJSHeapSize: 10 * 1024 * 1024, // 10MB\n        totalJSHeapSize: 20 * 1024 * 1024,\n        jsHeapSizeLimit: 100 * 1024 * 1024,\n      };\n    });\n\n    test('應該追蹤記憶體使用量', () => {\n      performanceMonitor.trackMemoryUsage();\n\n      const metrics = performanceMonitor.getMetrics();\n      expect(metrics.memoryUsage).toBe(10 * 1024 * 1024);\n    });\n\n    test('記憶體使用應該在合理範圍內', () => {\n      performanceMonitor.trackMemoryUsage();\n\n      const metrics = performanceMonitor.getMetrics();\n      expect(metrics.memoryUsage).toBeLessThan(100 * 1024 * 1024); // 少於 100MB\n    });\n\n    test('應該正確格式化記憶體大小', () => {\n      const formatted = performanceMonitor.formatBytes(10 * 1024 * 1024);\n      expect(formatted).toBe('10 MB');\n    });\n  });\n\n  describe('渲染效能', () => {\n    beforeEach(() => {\n      // 重新設置 performance.now mock\n      global.performance.now = jest.fn();\n      global.requestAnimationFrame = jest.fn();\n    });\n\n    test('應該追蹤渲染時間', () => {\n      global.performance.now.mockReturnValueOnce(1000).mockReturnValueOnce(1010);\n\n      performanceMonitor.trackRenderPerformance();\n\n      // 模擬 requestAnimationFrame\n      if (global.requestAnimationFrame.mock.calls.length > 0) {\n        const callback = global.requestAnimationFrame.mock.calls[0][0];\n        callback();\n      }\n\n      const metrics = performanceMonitor.getMetrics();\n      expect(metrics.renderTime).toBe(10);\n    });\n\n    test('渲染時間應該少於 16.67ms (60 FPS)', () => {\n      global.performance.now.mockReturnValueOnce(1000).mockReturnValueOnce(1015);\n\n      performanceMonitor.trackRenderPerformance();\n\n      if (global.requestAnimationFrame.mock.calls.length > 0) {\n        const callback = global.requestAnimationFrame.mock.calls[0][0];\n        callback();\n      }\n\n      const metrics = performanceMonitor.getMetrics();\n      expect(metrics.renderTime).toBeLessThan(16.67);\n    });\n  });\n\n  describe('遊戲效能', () => {\n    test('應該追蹤 TPS 效能', () => {\n      const mockGameEngine = {\n        tpsCalculator: {\n          getStatistics: jest.fn(() => ({\n            average: 15.5,\n            peak: 25,\n            current: 20,\n          })),\n        },\n      };\n\n      performanceMonitor.trackGamePerformance(mockGameEngine);\n\n      const metrics = performanceMonitor.getMetrics();\n      expect(metrics.tpsAverage).toBe(15.5);\n      expect(mockGameEngine.tpsCalculator.getStatistics).toHaveBeenCalled();\n    });\n\n    test('應該處理沒有遊戲引擎的情況', () => {\n      performanceMonitor.trackGamePerformance(null);\n\n      const metrics = performanceMonitor.getMetrics();\n      expect(metrics.tpsAverage).toBe(0);\n    });\n  });\n\n  describe('錯誤追蹤', () => {\n    test('應該追蹤 JavaScript 錯誤', () => {\n      performanceMonitor.trackErrors();\n\n      // 模擬錯誤事件\n      const errorEvent = new Event('error');\n      window.dispatchEvent(errorEvent);\n\n      const metrics = performanceMonitor.getMetrics();\n      expect(metrics.errorCount).toBe(1);\n    });\n\n    test('應該追蹤未處理的 Promise 拒絕', () => {\n      performanceMonitor.trackErrors();\n\n      // 模擬 unhandledrejection 事件\n      const rejectionEvent = new Event('unhandledrejection');\n      window.dispatchEvent(rejectionEvent);\n\n      const metrics = performanceMonitor.getMetrics();\n      expect(metrics.errorCount).toBe(1);\n    });\n  });\n\n  describe('效能報告', () => {\n    test('應該生成完整的效能報告', () => {\n      performanceMonitor.metrics = {\n        loadTime: 2100,\n        tpsAverage: 18.5,\n        errorCount: 0,\n        cacheHitRate: 85,\n        memoryUsage: 15 * 1024 * 1024,\n        renderTime: 12.5,\n      };\n\n      const report = performanceMonitor.generateReport();\n\n      expect(report).toHaveProperty('timestamp');\n      expect(report).toHaveProperty('performance');\n      expect(report).toHaveProperty('game');\n      expect(report).toHaveProperty('status');\n\n      expect(report.performance.loadTime).toBe(2100);\n      expect(report.performance.memoryUsage).toBe('15 MB');\n      expect(report.game.averageTPS).toBe(18.5);\n      expect(report.status).toBe('good');\n    });\n\n    test('應該正確識別效能問題', () => {\n      performanceMonitor.metrics = {\n        loadTime: 4000, // 超過 3 秒\n        memoryUsage: 120 * 1024 * 1024, // 超過 100MB\n        renderTime: 20, // 超過 16.67ms\n        errorCount: 2, // 有錯誤\n      };\n\n      const status = performanceMonitor.getPerformanceStatus(performanceMonitor.metrics);\n      expect(status).toBe('warning');\n    });\n\n    test('應該能清除指標', () => {\n      performanceMonitor.metrics.loadTime = 2000;\n      performanceMonitor.metrics.errorCount = 1;\n\n      performanceMonitor.clearMetrics();\n\n      const metrics = performanceMonitor.getMetrics();\n      expect(metrics.loadTime).toBe(0);\n      expect(metrics.errorCount).toBe(0);\n    });\n  });\n});\n\ndescribe('效能最佳化測試', () => {\n  let optimizer;\n\n  beforeEach(() => {\n    // 模擬效能最佳化器\n    class PerformanceOptimizer {\n      constructor() {\n        this.optimizations = {\n          imageCompression: false,\n          codeMinification: false,\n          caching: false,\n          lazyLoading: false,\n        };\n      }\n\n      enableImageCompression() {\n        this.optimizations.imageCompression = true;\n        return this;\n      }\n\n      enableCodeMinification() {\n        this.optimizations.codeMinification = true;\n        return this;\n      }\n\n      enableCaching() {\n        this.optimizations.caching = true;\n        return this;\n      }\n\n      enableLazyLoading() {\n        this.optimizations.lazyLoading = true;\n        return this;\n      }\n\n      getOptimizationScore() {\n        const enabled = Object.values(this.optimizations).filter(Boolean).length;\n        const total = Object.keys(this.optimizations).length;\n        return (enabled / total) * 100;\n      }\n\n      generateOptimizationReport() {\n        return {\n          score: this.getOptimizationScore(),\n          optimizations: { ...this.optimizations },\n          recommendations: this.getRecommendations(),\n        };\n      }\n\n      getRecommendations() {\n        const recommendations = [];\n\n        if (!this.optimizations.imageCompression) {\n          recommendations.push('啟用圖片壓縮');\n        }\n\n        if (!this.optimizations.codeMinification) {\n          recommendations.push('啟用程式碼壓縮');\n        }\n\n        if (!this.optimizations.caching) {\n          recommendations.push('啟用快取策略');\n        }\n\n        if (!this.optimizations.lazyLoading) {\n          recommendations.push('啟用延遲載入');\n        }\n\n        return recommendations;\n      }\n    }\n\n    optimizer = new PerformanceOptimizer();\n  });\n\n  describe('最佳化功能', () => {\n    test('應該能啟用圖片壓縮', () => {\n      optimizer.enableImageCompression();\n\n      expect(optimizer.optimizations.imageCompression).toBe(true);\n    });\n\n    test('應該能啟用程式碼壓縮', () => {\n      optimizer.enableCodeMinification();\n\n      expect(optimizer.optimizations.codeMinification).toBe(true);\n    });\n\n    test('應該能啟用快取', () => {\n      optimizer.enableCaching();\n\n      expect(optimizer.optimizations.caching).toBe(true);\n    });\n\n    test('應該能啟用延遲載入', () => {\n      optimizer.enableLazyLoading();\n\n      expect(optimizer.optimizations.lazyLoading).toBe(true);\n    });\n  });\n\n  describe('最佳化評分', () => {\n    test('應該正確計算最佳化分數', () => {\n      expect(optimizer.getOptimizationScore()).toBe(0);\n\n      optimizer.enableImageCompression();\n      expect(optimizer.getOptimizationScore()).toBe(25);\n\n      optimizer.enableCodeMinification();\n      expect(optimizer.getOptimizationScore()).toBe(50);\n\n      optimizer.enableCaching();\n      expect(optimizer.getOptimizationScore()).toBe(75);\n\n      optimizer.enableLazyLoading();\n      expect(optimizer.getOptimizationScore()).toBe(100);\n    });\n\n    test('應該生成最佳化報告', () => {\n      optimizer.enableImageCompression();\n      optimizer.enableCaching();\n\n      const report = optimizer.generateOptimizationReport();\n\n      expect(report.score).toBe(50);\n      expect(report.optimizations.imageCompression).toBe(true);\n      expect(report.optimizations.caching).toBe(true);\n      expect(report.recommendations).toHaveLength(2);\n      expect(report.recommendations).toContain('啟用程式碼壓縮');\n      expect(report.recommendations).toContain('啟用延遲載入');\n    });\n  });\n});\n\ndescribe('快取效能測試', () => {\n  let cachePerformance;\n\n  beforeEach(() => {\n    // 模擬快取效能測試器\n    class CachePerformanceTest {\n      constructor() {\n        this.hitCount = 0;\n        this.missCount = 0;\n        this.totalRequests = 0;\n      }\n\n      simulateRequest(url, useCache = true) {\n        this.totalRequests++;\n\n        if (useCache && this.isInCache(url)) {\n          this.hitCount++;\n          return { cached: true, loadTime: 10 };\n        } else {\n          this.missCount++;\n          return { cached: false, loadTime: 200 };\n        }\n      }\n\n      isInCache(url) {\n        // 模擬快取邏輯\n        const cachedUrls = ['/index.html', '/styles.css', '/app.js', '/manifest.json'];\n        return cachedUrls.includes(url);\n      }\n\n      getCacheHitRate() {\n        if (this.totalRequests === 0) return 0;\n        return (this.hitCount / this.totalRequests) * 100;\n      }\n\n      getAverageLoadTime() {\n        const hitTime = this.hitCount * 10;\n        const missTime = this.missCount * 200;\n        const totalTime = hitTime + missTime;\n\n        return this.totalRequests > 0 ? totalTime / this.totalRequests : 0;\n      }\n\n      generateCacheReport() {\n        return {\n          hitRate: this.getCacheHitRate(),\n          hitCount: this.hitCount,\n          missCount: this.missCount,\n          totalRequests: this.totalRequests,\n          averageLoadTime: this.getAverageLoadTime(),\n        };\n      }\n\n      reset() {\n        this.hitCount = 0;\n        this.missCount = 0;\n        this.totalRequests = 0;\n      }\n    }\n\n    cachePerformance = new CachePerformanceTest();\n  });\n\n  describe('快取命中測試', () => {\n    test('應該正確計算快取命中率', () => {\n      // 模擬請求快取的資源\n      cachePerformance.simulateRequest('/index.html');\n      cachePerformance.simulateRequest('/styles.css');\n      cachePerformance.simulateRequest('/app.js');\n\n      // 模擬請求未快取的資源\n      cachePerformance.simulateRequest('/api/data');\n      cachePerformance.simulateRequest('/images/large.jpg');\n\n      const hitRate = cachePerformance.getCacheHitRate();\n      expect(hitRate).toBe(60); // 3/5 = 60%\n    });\n\n    test('快取資源應該有更快的載入時間', () => {\n      const cachedResult = cachePerformance.simulateRequest('/index.html');\n      const uncachedResult = cachePerformance.simulateRequest('/api/data');\n\n      expect(cachedResult.cached).toBe(true);\n      expect(cachedResult.loadTime).toBe(10);\n\n      expect(uncachedResult.cached).toBe(false);\n      expect(uncachedResult.loadTime).toBe(200);\n    });\n\n    test('應該生成詳細的快取報告', () => {\n      // 執行多個請求\n      for (let i = 0; i < 5; i++) {\n        cachePerformance.simulateRequest('/index.html');\n      }\n      for (let i = 0; i < 3; i++) {\n        cachePerformance.simulateRequest('/api/data');\n      }\n\n      const report = cachePerformance.generateCacheReport();\n\n      expect(report.hitRate).toBe(62.5); // 5/8 = 62.5%\n      expect(report.hitCount).toBe(5);\n      expect(report.missCount).toBe(3);\n      expect(report.totalRequests).toBe(8);\n      expect(report.averageLoadTime).toBe(81.25); // 實際計算結果\n    });\n  });\n});\n\ndescribe('網路效能測試', () => {\n  beforeEach(() => {\n    // 設置 performance.now 返回遞增的時間值\n    let currentTime = 1000;\n    global.performance.now = jest.fn(() => {\n      currentTime += 150; // 模擬 150ms 間隔\n      return currentTime;\n    });\n  });\n\n  test('應該測量首次位元組時間 (TTFB)', async () => {\n    const startTime = performance.now();\n\n    // 模擬網路請求\n    await new Promise(resolve => setTimeout(resolve, 50));\n\n    const ttfb = performance.now() - startTime;\n\n    expect(ttfb).toBeLessThan(200); // TTFB 應該少於 200ms\n  });\n\n  test('應該測量資源載入時間', async () => {\n    const resources = [\n      { name: 'styles.css', size: 50000 },\n      { name: 'app.js', size: 200000 },\n      { name: 'worker.js', size: 30000 },\n    ];\n\n    const loadPromises = resources.map(async resource => {\n      const startTime = performance.now();\n\n      // 模擬資源載入（基於大小的載入時間）\n      const loadTime = resource.size / 1000; // 1KB/ms\n      await new Promise(resolve => setTimeout(resolve, loadTime));\n\n      return {\n        name: resource.name,\n        loadTime: performance.now() - startTime,\n        size: resource.size,\n      };\n    });\n\n    const results = await Promise.all(loadPromises);\n\n    // 檢查每個資源的載入時間是否合理\n    results.forEach(result => {\n      expect(result.loadTime).toBeLessThan(1000); // 應該少於 1 秒\n    });\n\n    // 檢查總載入時間\n    const totalLoadTime = Math.max(...results.map(r => r.loadTime));\n    expect(totalLoadTime).toBeLessThan(2000); // 總時間應該少於 2 秒\n  });\n\n  test('應該測量總體效能分數', () => {\n    const metrics = {\n      fcp: 1200, // First Contentful Paint\n      lcp: 2400, // Largest Contentful Paint\n      cls: 0.05, // Cumulative Layout Shift\n      fid: 80, // First Input Delay\n      ttfb: 150, // Time to First Byte\n    };\n\n    // 簡單的效能評分算法\n    let score = 100;\n\n    if (metrics.fcp > 1800) score -= 10;\n    if (metrics.lcp > 2500) score -= 15;\n    if (metrics.cls > 0.1) score -= 10;\n    if (metrics.fid > 100) score -= 10;\n    if (metrics.ttfb > 200) score -= 5;\n\n    expect(score).toBeGreaterThanOrEqual(90); // 目標分數 90+\n  });\n});\n"],"mappings":"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","ignoreList":[]}