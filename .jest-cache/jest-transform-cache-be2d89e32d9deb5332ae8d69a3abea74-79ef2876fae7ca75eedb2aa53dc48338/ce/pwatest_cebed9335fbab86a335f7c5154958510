8d98a72b9a817feb5acfcac8bbbe6962
"use strict";

/**
 * PWA 功能測試
 * 測試 Service Worker、更新機制、離線功能等
 *
 * @author haotool
 * @version 7.2.3
 * @created 2025-08-18T02:39:58+08:00
 */

// Mock PWA 相關 API
global.navigator = {
  serviceWorker: {
    register: jest.fn(),
    ready: Promise.resolve({
      update: jest.fn(),
      unregister: jest.fn()
    }),
    getRegistration: jest.fn()
  },
  storage: {
    estimate: jest.fn(() => Promise.resolve({
      quota: 10 * 1024 * 1024 * 1024,
      // 10GB
      usage: 50 * 1024 * 1024 // 50MB
    })),
    persist: jest.fn(() => Promise.resolve(true))
  }
};
global.window = {
  ...global.window,
  navigator: global.navigator,
  location: {
    protocol: 'https:',
    host: 'example.com'
  },
  caches: {
    open: jest.fn(),
    delete: jest.fn(),
    keys: jest.fn()
  }
};

// Mock Notification API
global.Notification = {
  permission: 'default',
  requestPermission: jest.fn(() => Promise.resolve('granted'))
};
describe('PWAUpdateManager', () => {
  let updateManager;
  let mockUpdateSW;
  beforeEach(() => {
    // 清除所有 mock
    jest.clearAllMocks();

    // Mock registerSW 函數
    mockUpdateSW = jest.fn();

    // 模擬 PWAUpdateManager 類別
    class PWAUpdateManager {
      constructor() {
        this.updateSW = null;
        this.isOfflineReady = false;
        this.needRefresh = false;
        this.registration = null;
      }
      async registerServiceWorker() {
        try {
          // 模擬 vite-plugin-pwa 的 registerSW
          this.updateSW = mockUpdateSW;
          const mockRegisterSW = options => {
            this.onNeedRefresh = options.onNeedRefresh;
            this.onOfflineReady = options.onOfflineReady;
            this.onRegistered = options.onRegistered;

            // 模擬註冊成功
            setTimeout(() => {
              this.registration = {
                update: jest.fn(),
                unregister: jest.fn()
              };
              this.onRegistered?.(this.registration);
            }, 100);
            return mockUpdateSW;
          };
          this.updateSW = mockRegisterSW({
            onNeedRefresh: () => this.showUpdatePrompt(),
            onOfflineReady: () => this.showOfflinePrompt(),
            onRegistered: registration => {
              this.registration = registration;
              // 每小時檢查更新
              setInterval(() => registration.update(), 60 * 60 * 1000);
            }
          });
          return true;
        } catch (error) {
          console.error('Service Worker 註冊失敗:', error);
          return false;
        }
      }
      showUpdatePrompt() {
        this.needRefresh = true;
        // 模擬顯示更新提示
        const promptElement = this.createUpdatePrompt();
        document.body?.appendChild(promptElement);
      }
      showOfflinePrompt() {
        this.isOfflineReady = true;
        // 模擬顯示離線就緒提示
        const promptElement = this.createOfflinePrompt();
        document.body?.appendChild(promptElement);
      }
      hidePrompt() {
        const prompts = document.querySelectorAll('.pwa-prompt');
        prompts.forEach(prompt => prompt.remove());
      }
      createUpdatePrompt() {
        const div = document.createElement('div');
        div.className = 'pwa-prompt update-prompt';
        div.innerHTML = `
          <div class="prompt-content">
            <p>應用程式有新版本可用</p>
            <button id="update-btn">更新</button>
            <button id="close-btn">關閉</button>
          </div>
        `;
        return div;
      }
      createOfflinePrompt() {
        const div = document.createElement('div');
        div.className = 'pwa-prompt offline-prompt';
        div.innerHTML = `
          <div class="prompt-content">
            <p>應用程式已準備好離線使用</p>
            <button id="ok-btn">確定</button>
          </div>
        `;
        return div;
      }
      async checkForUpdates() {
        if (this.registration) {
          try {
            await this.registration.update();
            return true;
          } catch (error) {
            console.error('檢查更新失敗:', error);
            return false;
          }
        }
        return false;
      }
      async applyUpdate() {
        if (this.updateSW) {
          try {
            await this.updateSW();
            return true;
          } catch (error) {
            console.error('應用更新失敗:', error);
            return false;
          }
        }
        return false;
      }
      getStatus() {
        return {
          needRefresh: this.needRefresh,
          isOfflineReady: this.isOfflineReady,
          hasRegistration: !!this.registration
        };
      }
    }
    updateManager = new PWAUpdateManager();
  });
  describe('Service Worker 註冊', () => {
    test('應該能成功註冊 Service Worker', async () => {
      const result = await updateManager.registerServiceWorker();
      expect(result).toBe(true);
      expect(updateManager.updateSW).toBeDefined();
    });
    test('註冊後應該能獲取 registration', done => {
      updateManager.registerServiceWorker();
      setTimeout(() => {
        expect(updateManager.registration).toBeDefined();
        expect(updateManager.registration.update).toBeDefined();
        done();
      }, 150);
    });
  });
  describe('更新提示', () => {
    test('應該能顯示更新提示', () => {
      // Mock DOM
      global.document = {
        body: {
          appendChild: jest.fn()
        },
        createElement: jest.fn(tag => ({
          className: '',
          innerHTML: '',
          addEventListener: jest.fn(),
          remove: jest.fn()
        }))
      };
      updateManager.showUpdatePrompt();
      expect(updateManager.needRefresh).toBe(true);
      expect(document.body.appendChild).toHaveBeenCalled();
    });
    test('應該能顯示離線就緒提示', () => {
      global.document = {
        body: {
          appendChild: jest.fn()
        },
        createElement: jest.fn(tag => ({
          className: '',
          innerHTML: '',
          addEventListener: jest.fn(),
          remove: jest.fn()
        }))
      };
      updateManager.showOfflinePrompt();
      expect(updateManager.isOfflineReady).toBe(true);
      expect(document.body.appendChild).toHaveBeenCalled();
    });
    test('應該能隱藏提示', () => {
      global.document = {
        querySelectorAll: jest.fn(() => [{
          remove: jest.fn()
        }, {
          remove: jest.fn()
        }])
      };
      updateManager.hidePrompt();
      expect(document.querySelectorAll).toHaveBeenCalledWith('.pwa-prompt');
    });
  });
  describe('更新功能', () => {
    test('應該能檢查更新', async () => {
      await updateManager.registerServiceWorker();

      // 等待 registration 設置
      await new Promise(resolve => setTimeout(resolve, 150));
      const result = await updateManager.checkForUpdates();
      expect(result).toBe(true);
      expect(updateManager.registration.update).toHaveBeenCalled();
    });
    test('沒有 registration 時檢查更新應該返回 false', async () => {
      const result = await updateManager.checkForUpdates();
      expect(result).toBe(false);
    });
    test('應該能應用更新', async () => {
      await updateManager.registerServiceWorker();
      const result = await updateManager.applyUpdate();
      expect(result).toBe(true);
      expect(mockUpdateSW).toHaveBeenCalled();
    });
  });
  describe('狀態查詢', () => {
    test('應該能獲取正確的狀態', async () => {
      const initialStatus = updateManager.getStatus();
      expect(initialStatus).toEqual({
        needRefresh: false,
        isOfflineReady: false,
        hasRegistration: false
      });
      await updateManager.registerServiceWorker();
      updateManager.showUpdatePrompt();
      updateManager.showOfflinePrompt();
      const finalStatus = updateManager.getStatus();
      expect(finalStatus.needRefresh).toBe(true);
      expect(finalStatus.isOfflineReady).toBe(true);
    });
  });
});
describe('Cache Strategy', () => {
  let cacheManager;
  beforeEach(() => {
    // Mock Cache API
    const mockCache = {
      add: jest.fn(() => Promise.resolve()),
      addAll: jest.fn(() => Promise.resolve()),
      put: jest.fn(() => Promise.resolve()),
      match: jest.fn(() => Promise.resolve(null)),
      delete: jest.fn(() => Promise.resolve(true)),
      keys: jest.fn(() => Promise.resolve([]))
    };
    global.caches = {
      open: jest.fn(() => Promise.resolve(mockCache)),
      delete: jest.fn(() => Promise.resolve(true)),
      keys: jest.fn(() => Promise.resolve(['cache-v1', 'cache-v2']))
    };

    // 模擬 CacheManager 類別
    class CacheManager {
      constructor() {
        this.cacheName = 'bunny-click-cache-v1';
        this.staticCacheName = 'bunny-click-static-v1';
      }
      async preCache(urls) {
        try {
          const cache = await caches.open(this.cacheName);
          await cache.addAll(urls);
          return true;
        } catch (error) {
          console.error('預快取失敗:', error);
          return false;
        }
      }
      async cacheResponse(request, response) {
        try {
          const cache = await caches.open(this.cacheName);
          await cache.put(request, response.clone());
          return true;
        } catch (error) {
          console.error('快取回應失敗:', error);
          return false;
        }
      }
      async getCachedResponse(request) {
        try {
          const cache = await caches.open(this.cacheName);
          const response = await cache.match(request);
          return response;
        } catch (error) {
          console.error('獲取快取失敗:', error);
          return null;
        }
      }
      async clearOldCaches(currentVersion) {
        try {
          const cacheNames = await caches.keys();
          const oldCaches = cacheNames.filter(name => name.startsWith('bunny-click-') && name !== currentVersion);
          const deletePromises = oldCaches.map(name => caches.delete(name));
          await Promise.all(deletePromises);
          return oldCaches.length;
        } catch (error) {
          console.error('清理舊快取失敗:', error);
          return 0;
        }
      }
      async getCacheStats() {
        try {
          const cache = await caches.open(this.cacheName);
          const keys = await cache.keys();
          return {
            cacheName: this.cacheName,
            itemCount: keys.length,
            keys: keys.map(req => req.url)
          };
        } catch (error) {
          console.error('獲取快取統計失敗:', error);
          return null;
        }
      }
    }
    cacheManager = new CacheManager();
  });
  describe('預快取功能', () => {
    test('應該能預快取指定 URL', async () => {
      const urls = ['/index.html', '/styles.css', '/app.js', '/manifest.json'];
      const result = await cacheManager.preCache(urls);
      expect(result).toBe(true);
      expect(caches.open).toHaveBeenCalledWith('bunny-click-cache-v1');
    });
  });
  describe('動態快取', () => {
    test('應該能快取回應', async () => {
      const mockRequest = new Request('/api/data');
      const mockResponse = new Response('{"data": "test"}', {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      // Mock Response.clone()
      mockResponse.clone = jest.fn(() => mockResponse);
      const result = await cacheManager.cacheResponse(mockRequest, mockResponse);
      expect(result).toBe(true);
      expect(mockResponse.clone).toHaveBeenCalled();
    });
    test('應該能獲取快取的回應', async () => {
      const mockRequest = new Request('/api/data');
      const response = await cacheManager.getCachedResponse(mockRequest);
      expect(caches.open).toHaveBeenCalledWith('bunny-click-cache-v1');
    });
  });
  describe('快取管理', () => {
    test('應該能清理舊快取', async () => {
      const deletedCount = await cacheManager.clearOldCaches('bunny-click-cache-v2');
      expect(deletedCount).toBeGreaterThanOrEqual(0);
      expect(caches.keys).toHaveBeenCalled();
    });
    test('應該能獲取快取統計', async () => {
      const stats = await cacheManager.getCacheStats();
      expect(stats).toHaveProperty('cacheName');
      expect(stats).toHaveProperty('itemCount');
      expect(stats).toHaveProperty('keys');
      expect(stats.cacheName).toBe('bunny-click-cache-v1');
    });
  });
});
describe('Offline Detection', () => {
  let offlineManager;
  beforeEach(() => {
    // Mock online/offline events
    global.navigator.onLine = true;
    global.window.addEventListener = jest.fn();
    global.window.removeEventListener = jest.fn();

    // 模擬 OfflineManager 類別
    class OfflineManager {
      constructor() {
        this.isOnline = navigator.onLine;
        this.callbacks = {
          online: [],
          offline: []
        };
        this.setupEventListeners();
      }
      setupEventListeners() {
        window.addEventListener('online', this.handleOnline.bind(this));
        window.addEventListener('offline', this.handleOffline.bind(this));
      }
      handleOnline() {
        this.isOnline = true;
        this.callbacks.online.forEach(callback => callback());
      }
      handleOffline() {
        this.isOnline = false;
        this.callbacks.offline.forEach(callback => callback());
      }
      onOnline(callback) {
        this.callbacks.online.push(callback);
      }
      onOffline(callback) {
        this.callbacks.offline.push(callback);
      }
      getStatus() {
        return {
          isOnline: this.isOnline,
          lastCheck: Date.now()
        };
      }
      async checkConnection() {
        try {
          // 模擬網路檢查
          const response = await fetch('/ping', {
            method: 'HEAD',
            cache: 'no-cache'
          });
          return response.ok;
        } catch (error) {
          return false;
        }
      }
      removeEventListeners() {
        window.removeEventListener('online', this.handleOnline);
        window.removeEventListener('offline', this.handleOffline);
      }
    }

    // Mock fetch for connection check
    global.fetch = jest.fn(() => Promise.resolve({
      ok: true,
      status: 200
    }));
    offlineManager = new OfflineManager();
  });
  describe('事件監聽', () => {
    test('應該設置線上/離線事件監聽器', () => {
      expect(window.addEventListener).toHaveBeenCalledWith('online', expect.any(Function));
      expect(window.addEventListener).toHaveBeenCalledWith('offline', expect.any(Function));
    });
    test('應該能註冊線上回調', () => {
      const callback = jest.fn();
      offlineManager.onOnline(callback);
      expect(offlineManager.callbacks.online).toContain(callback);
    });
    test('應該能註冊離線回調', () => {
      const callback = jest.fn();
      offlineManager.onOffline(callback);
      expect(offlineManager.callbacks.offline).toContain(callback);
    });
  });
  describe('狀態檢測', () => {
    test('應該能獲取連線狀態', () => {
      const status = offlineManager.getStatus();
      expect(status).toHaveProperty('isOnline');
      expect(status).toHaveProperty('lastCheck');
      expect(status.isOnline).toBe(true);
    });
    test('應該能檢查網路連線', async () => {
      const isConnected = await offlineManager.checkConnection();
      expect(isConnected).toBe(true);
      expect(fetch).toHaveBeenCalledWith('/ping', {
        method: 'HEAD',
        cache: 'no-cache'
      });
    });
  });
  describe('事件處理', () => {
    test('線上事件應該觸發回調', () => {
      const callback = jest.fn();
      offlineManager.onOnline(callback);
      offlineManager.handleOnline();
      expect(callback).toHaveBeenCalled();
      expect(offlineManager.isOnline).toBe(true);
    });
    test('離線事件應該觸發回調', () => {
      const callback = jest.fn();
      offlineManager.onOffline(callback);
      offlineManager.handleOffline();
      expect(callback).toHaveBeenCalled();
      expect(offlineManager.isOnline).toBe(false);
    });
  });
});
describe('Storage Quota Management', () => {
  let quotaManager;
  beforeEach(() => {
    // 模擬 QuotaManager 類別
    class QuotaManager {
      constructor() {
        this.warningThreshold = 0.8; // 80%
        this.criticalThreshold = 0.95; // 95%
      }
      async getStorageEstimate() {
        if ('storage' in navigator && 'estimate' in navigator.storage) {
          return await navigator.storage.estimate();
        }
        return null;
      }
      async checkQuota() {
        const estimate = await this.getStorageEstimate();
        if (!estimate) return null;
        const {
          quota,
          usage
        } = estimate;
        const usagePercentage = quota > 0 ? usage / quota : 0;
        return {
          quota,
          usage,
          available: quota - usage,
          usagePercentage,
          status: this.getQuotaStatus(usagePercentage)
        };
      }
      getQuotaStatus(percentage) {
        if (percentage >= this.criticalThreshold) return 'critical';
        if (percentage >= this.warningThreshold) return 'warning';
        return 'normal';
      }
      async requestPersistentStorage() {
        if ('storage' in navigator && 'persist' in navigator.storage) {
          return await navigator.storage.persist();
        }
        return false;
      }
      formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }
    }
    quotaManager = new QuotaManager();
  });
  describe('配額檢查', () => {
    test('應該能獲取儲存估算', async () => {
      const estimate = await quotaManager.getStorageEstimate();
      expect(estimate).toHaveProperty('quota');
      expect(estimate).toHaveProperty('usage');
      expect(navigator.storage.estimate).toHaveBeenCalled();
    });
    test('應該能檢查配額狀態', async () => {
      const quotaInfo = await quotaManager.checkQuota();
      expect(quotaInfo).toHaveProperty('quota');
      expect(quotaInfo).toHaveProperty('usage');
      expect(quotaInfo).toHaveProperty('available');
      expect(quotaInfo).toHaveProperty('usagePercentage');
      expect(quotaInfo).toHaveProperty('status');
    });
    test('應該正確判斷配額狀態', () => {
      expect(quotaManager.getQuotaStatus(0.5)).toBe('normal');
      expect(quotaManager.getQuotaStatus(0.85)).toBe('warning');
      expect(quotaManager.getQuotaStatus(0.98)).toBe('critical');
    });
  });
  describe('持久化儲存', () => {
    test('應該能請求持久化儲存', async () => {
      const result = await quotaManager.requestPersistentStorage();
      expect(result).toBe(true);
      expect(navigator.storage.persist).toHaveBeenCalled();
    });
  });
  describe('工具函數', () => {
    test('應該正確格式化位元組', () => {
      expect(quotaManager.formatBytes(0)).toBe('0 Bytes');
      expect(quotaManager.formatBytes(1024)).toBe('1 KB');
      expect(quotaManager.formatBytes(1048576)).toBe('1 MB');
      expect(quotaManager.formatBytes(1073741824)).toBe('1 GB');
    });
  });
});
describe('PWA Installation', () => {
  let installManager;
  beforeEach(() => {
    // Mock beforeinstallprompt event
    global.window.addEventListener = jest.fn();

    // 模擬 InstallManager 類別
    class InstallManager {
      constructor() {
        this.deferredPrompt = null;
        this.isInstallable = false;
        this.isInstalled = false;
        this.setupEventListeners();
      }
      setupEventListeners() {
        window.addEventListener('beforeinstallprompt', this.handleBeforeInstallPrompt.bind(this));
        window.addEventListener('appinstalled', this.handleAppInstalled.bind(this));
      }
      handleBeforeInstallPrompt(event) {
        event.preventDefault();
        this.deferredPrompt = event;
        this.isInstallable = true;
      }
      handleAppInstalled() {
        this.isInstalled = true;
        this.deferredPrompt = null;
        this.isInstallable = false;
      }
      async showInstallPrompt() {
        if (!this.deferredPrompt) return null;
        try {
          const result = await this.deferredPrompt.prompt();
          this.deferredPrompt = null;
          this.isInstallable = false;
          return result;
        } catch (error) {
          console.error('安裝提示失敗:', error);
          return null;
        }
      }
      getInstallStatus() {
        return {
          isInstallable: this.isInstallable,
          isInstalled: this.isInstalled,
          canPrompt: !!this.deferredPrompt
        };
      }
      checkIfInstalled() {
        // 檢查是否在獨立模式下運行
        const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
        const isInWebAppScope = window.navigator.standalone === true;
        return isStandalone || isInWebAppScope;
      }
    }

    // Mock matchMedia
    global.window.matchMedia = jest.fn(() => ({
      matches: false,
      addListener: jest.fn(),
      removeListener: jest.fn()
    }));
    installManager = new InstallManager();
  });
  describe('安裝事件處理', () => {
    test('應該設置安裝事件監聽器', () => {
      expect(window.addEventListener).toHaveBeenCalledWith('beforeinstallprompt', expect.any(Function));
      expect(window.addEventListener).toHaveBeenCalledWith('appinstalled', expect.any(Function));
    });
    test('應該處理 beforeinstallprompt 事件', () => {
      const mockEvent = {
        preventDefault: jest.fn(),
        prompt: jest.fn(() => Promise.resolve({
          outcome: 'accepted'
        }))
      };
      installManager.handleBeforeInstallPrompt(mockEvent);
      expect(mockEvent.preventDefault).toHaveBeenCalled();
      expect(installManager.isInstallable).toBe(true);
      expect(installManager.deferredPrompt).toBe(mockEvent);
    });
    test('應該處理 appinstalled 事件', () => {
      installManager.deferredPrompt = {
        prompt: jest.fn()
      };
      installManager.isInstallable = true;
      installManager.handleAppInstalled();
      expect(installManager.isInstalled).toBe(true);
      expect(installManager.deferredPrompt).toBeNull();
      expect(installManager.isInstallable).toBe(false);
    });
  });
  describe('安裝提示', () => {
    test('應該能顯示安裝提示', async () => {
      const mockPrompt = jest.fn(() => Promise.resolve({
        outcome: 'accepted'
      }));
      installManager.deferredPrompt = {
        prompt: mockPrompt
      };
      const result = await installManager.showInstallPrompt();
      expect(mockPrompt).toHaveBeenCalled();
      expect(result).toEqual({
        outcome: 'accepted'
      });
      expect(installManager.deferredPrompt).toBeNull();
    });
    test('沒有 deferred prompt 時應該返回 null', async () => {
      installManager.deferredPrompt = null;
      const result = await installManager.showInstallPrompt();
      expect(result).toBeNull();
    });
  });
  describe('安裝狀態', () => {
    test('應該能獲取安裝狀態', () => {
      const status = installManager.getInstallStatus();
      expect(status).toHaveProperty('isInstallable');
      expect(status).toHaveProperty('isInstalled');
      expect(status).toHaveProperty('canPrompt');
    });
    test('應該能檢查是否已安裝', () => {
      const isInstalled = installManager.checkIfInstalled();
      expect(typeof isInstalled).toBe('boolean');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0ZXIiLCJqZXN0IiwiZm4iLCJyZWFkeSIsIlByb21pc2UiLCJyZXNvbHZlIiwidXBkYXRlIiwidW5yZWdpc3RlciIsImdldFJlZ2lzdHJhdGlvbiIsInN0b3JhZ2UiLCJlc3RpbWF0ZSIsInF1b3RhIiwidXNhZ2UiLCJwZXJzaXN0Iiwid2luZG93IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJjYWNoZXMiLCJvcGVuIiwiZGVsZXRlIiwia2V5cyIsIk5vdGlmaWNhdGlvbiIsInBlcm1pc3Npb24iLCJyZXF1ZXN0UGVybWlzc2lvbiIsImRlc2NyaWJlIiwidXBkYXRlTWFuYWdlciIsIm1vY2tVcGRhdGVTVyIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiUFdBVXBkYXRlTWFuYWdlciIsImNvbnN0cnVjdG9yIiwidXBkYXRlU1ciLCJpc09mZmxpbmVSZWFkeSIsIm5lZWRSZWZyZXNoIiwicmVnaXN0cmF0aW9uIiwicmVnaXN0ZXJTZXJ2aWNlV29ya2VyIiwibW9ja1JlZ2lzdGVyU1ciLCJvcHRpb25zIiwib25OZWVkUmVmcmVzaCIsIm9uT2ZmbGluZVJlYWR5Iiwib25SZWdpc3RlcmVkIiwic2V0VGltZW91dCIsInNob3dVcGRhdGVQcm9tcHQiLCJzaG93T2ZmbGluZVByb21wdCIsInNldEludGVydmFsIiwiZXJyb3IiLCJjb25zb2xlIiwicHJvbXB0RWxlbWVudCIsImNyZWF0ZVVwZGF0ZVByb21wdCIsImRvY3VtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY3JlYXRlT2ZmbGluZVByb21wdCIsImhpZGVQcm9tcHQiLCJwcm9tcHRzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJwcm9tcHQiLCJyZW1vdmUiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiaW5uZXJIVE1MIiwiY2hlY2tGb3JVcGRhdGVzIiwiYXBwbHlVcGRhdGUiLCJnZXRTdGF0dXMiLCJoYXNSZWdpc3RyYXRpb24iLCJ0ZXN0IiwicmVzdWx0IiwiZXhwZWN0IiwidG9CZSIsInRvQmVEZWZpbmVkIiwiZG9uZSIsInRhZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJpbml0aWFsU3RhdHVzIiwidG9FcXVhbCIsImZpbmFsU3RhdHVzIiwiY2FjaGVNYW5hZ2VyIiwibW9ja0NhY2hlIiwiYWRkIiwiYWRkQWxsIiwicHV0IiwibWF0Y2giLCJDYWNoZU1hbmFnZXIiLCJjYWNoZU5hbWUiLCJzdGF0aWNDYWNoZU5hbWUiLCJwcmVDYWNoZSIsInVybHMiLCJjYWNoZSIsImNhY2hlUmVzcG9uc2UiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJjbG9uZSIsImdldENhY2hlZFJlc3BvbnNlIiwiY2xlYXJPbGRDYWNoZXMiLCJjdXJyZW50VmVyc2lvbiIsImNhY2hlTmFtZXMiLCJvbGRDYWNoZXMiLCJmaWx0ZXIiLCJuYW1lIiwic3RhcnRzV2l0aCIsImRlbGV0ZVByb21pc2VzIiwibWFwIiwiYWxsIiwibGVuZ3RoIiwiZ2V0Q2FjaGVTdGF0cyIsIml0ZW1Db3VudCIsInJlcSIsInVybCIsIm1vY2tSZXF1ZXN0IiwiUmVxdWVzdCIsIm1vY2tSZXNwb25zZSIsIlJlc3BvbnNlIiwiaGVhZGVycyIsImRlbGV0ZWRDb3VudCIsInRvQmVHcmVhdGVyVGhhbk9yRXF1YWwiLCJzdGF0cyIsInRvSGF2ZVByb3BlcnR5Iiwib2ZmbGluZU1hbmFnZXIiLCJvbkxpbmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiT2ZmbGluZU1hbmFnZXIiLCJpc09ubGluZSIsImNhbGxiYWNrcyIsIm9ubGluZSIsIm9mZmxpbmUiLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwiaGFuZGxlT25saW5lIiwiYmluZCIsImhhbmRsZU9mZmxpbmUiLCJjYWxsYmFjayIsIm9uT25saW5lIiwicHVzaCIsIm9uT2ZmbGluZSIsImxhc3RDaGVjayIsIkRhdGUiLCJub3ciLCJjaGVja0Nvbm5lY3Rpb24iLCJmZXRjaCIsIm1ldGhvZCIsIm9rIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJzdGF0dXMiLCJhbnkiLCJGdW5jdGlvbiIsInRvQ29udGFpbiIsImlzQ29ubmVjdGVkIiwicXVvdGFNYW5hZ2VyIiwiUXVvdGFNYW5hZ2VyIiwid2FybmluZ1RocmVzaG9sZCIsImNyaXRpY2FsVGhyZXNob2xkIiwiZ2V0U3RvcmFnZUVzdGltYXRlIiwiY2hlY2tRdW90YSIsInVzYWdlUGVyY2VudGFnZSIsImF2YWlsYWJsZSIsImdldFF1b3RhU3RhdHVzIiwicGVyY2VudGFnZSIsInJlcXVlc3RQZXJzaXN0ZW50U3RvcmFnZSIsImZvcm1hdEJ5dGVzIiwiYnl0ZXMiLCJrIiwic2l6ZXMiLCJpIiwiTWF0aCIsImZsb29yIiwibG9nIiwicGFyc2VGbG9hdCIsInBvdyIsInRvRml4ZWQiLCJxdW90YUluZm8iLCJpbnN0YWxsTWFuYWdlciIsIkluc3RhbGxNYW5hZ2VyIiwiZGVmZXJyZWRQcm9tcHQiLCJpc0luc3RhbGxhYmxlIiwiaXNJbnN0YWxsZWQiLCJoYW5kbGVCZWZvcmVJbnN0YWxsUHJvbXB0IiwiaGFuZGxlQXBwSW5zdGFsbGVkIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInNob3dJbnN0YWxsUHJvbXB0IiwiZ2V0SW5zdGFsbFN0YXR1cyIsImNhblByb21wdCIsImNoZWNrSWZJbnN0YWxsZWQiLCJpc1N0YW5kYWxvbmUiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImlzSW5XZWJBcHBTY29wZSIsInN0YW5kYWxvbmUiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwibW9ja0V2ZW50Iiwib3V0Y29tZSIsInRvQmVOdWxsIiwibW9ja1Byb21wdCJdLCJzb3VyY2VzIjpbInB3YS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUFdBIOWKn+iDvea4rOipplxuICog5ris6KmmIFNlcnZpY2UgV29ya2Vy44CB5pu05paw5qmf5Yi244CB6Zui57ea5Yqf6IO9562JXG4gKlxuICogQGF1dGhvciBoYW90b29sXG4gKiBAdmVyc2lvbiA3LjIuM1xuICogQGNyZWF0ZWQgMjAyNS0wOC0xOFQwMjozOTo1OCswODowMFxuICovXG5cbi8vIE1vY2sgUFdBIOebuOmXnCBBUElcbmdsb2JhbC5uYXZpZ2F0b3IgPSB7XG4gIHNlcnZpY2VXb3JrZXI6IHtcbiAgICByZWdpc3RlcjogamVzdC5mbigpLFxuICAgIHJlYWR5OiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgICB1bnJlZ2lzdGVyOiBqZXN0LmZuKCksXG4gICAgfSksXG4gICAgZ2V0UmVnaXN0cmF0aW9uOiBqZXN0LmZuKCksXG4gIH0sXG4gIHN0b3JhZ2U6IHtcbiAgICBlc3RpbWF0ZTogamVzdC5mbigoKSA9PlxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgcXVvdGE6IDEwICogMTAyNCAqIDEwMjQgKiAxMDI0LCAvLyAxMEdCXG4gICAgICAgIHVzYWdlOiA1MCAqIDEwMjQgKiAxMDI0LCAvLyA1ME1CXG4gICAgICB9KVxuICAgICksXG4gICAgcGVyc2lzdDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUodHJ1ZSkpLFxuICB9LFxufTtcblxuZ2xvYmFsLndpbmRvdyA9IHtcbiAgLi4uZ2xvYmFsLndpbmRvdyxcbiAgbmF2aWdhdG9yOiBnbG9iYWwubmF2aWdhdG9yLFxuICBsb2NhdGlvbjoge1xuICAgIHByb3RvY29sOiAnaHR0cHM6JyxcbiAgICBob3N0OiAnZXhhbXBsZS5jb20nLFxuICB9LFxuICBjYWNoZXM6IHtcbiAgICBvcGVuOiBqZXN0LmZuKCksXG4gICAgZGVsZXRlOiBqZXN0LmZuKCksXG4gICAga2V5czogamVzdC5mbigpLFxuICB9LFxufTtcblxuLy8gTW9jayBOb3RpZmljYXRpb24gQVBJXG5nbG9iYWwuTm90aWZpY2F0aW9uID0ge1xuICBwZXJtaXNzaW9uOiAnZGVmYXVsdCcsXG4gIHJlcXVlc3RQZXJtaXNzaW9uOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgnZ3JhbnRlZCcpKSxcbn07XG5cbmRlc2NyaWJlKCdQV0FVcGRhdGVNYW5hZ2VyJywgKCkgPT4ge1xuICBsZXQgdXBkYXRlTWFuYWdlcjtcbiAgbGV0IG1vY2tVcGRhdGVTVztcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyDmuIXpmaTmiYDmnIkgbW9ja1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuXG4gICAgLy8gTW9jayByZWdpc3RlclNXIOWHveaVuFxuICAgIG1vY2tVcGRhdGVTVyA9IGplc3QuZm4oKTtcblxuICAgIC8vIOaooeaTrCBQV0FVcGRhdGVNYW5hZ2VyIOmhnuWIpVxuICAgIGNsYXNzIFBXQVVwZGF0ZU1hbmFnZXIge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU1cgPSBudWxsO1xuICAgICAgICB0aGlzLmlzT2ZmbGluZVJlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMubmVlZFJlZnJlc2ggPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWdpc3RyYXRpb24gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBhc3luYyByZWdpc3RlclNlcnZpY2VXb3JrZXIoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8g5qih5pOsIHZpdGUtcGx1Z2luLXB3YSDnmoQgcmVnaXN0ZXJTV1xuICAgICAgICAgIHRoaXMudXBkYXRlU1cgPSBtb2NrVXBkYXRlU1c7XG5cbiAgICAgICAgICBjb25zdCBtb2NrUmVnaXN0ZXJTVyA9IG9wdGlvbnMgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbk5lZWRSZWZyZXNoID0gb3B0aW9ucy5vbk5lZWRSZWZyZXNoO1xuICAgICAgICAgICAgdGhpcy5vbk9mZmxpbmVSZWFkeSA9IG9wdGlvbnMub25PZmZsaW5lUmVhZHk7XG4gICAgICAgICAgICB0aGlzLm9uUmVnaXN0ZXJlZCA9IG9wdGlvbnMub25SZWdpc3RlcmVkO1xuXG4gICAgICAgICAgICAvLyDmqKHmk6zoqLvlhormiJDlip9cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnJlZ2lzdHJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICAgICAgICAgICAgICB1bnJlZ2lzdGVyOiBqZXN0LmZuKCksXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHRoaXMub25SZWdpc3RlcmVkPy4odGhpcy5yZWdpc3RyYXRpb24pO1xuICAgICAgICAgICAgfSwgMTAwKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1vY2tVcGRhdGVTVztcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdGhpcy51cGRhdGVTVyA9IG1vY2tSZWdpc3RlclNXKHtcbiAgICAgICAgICAgIG9uTmVlZFJlZnJlc2g6ICgpID0+IHRoaXMuc2hvd1VwZGF0ZVByb21wdCgpLFxuICAgICAgICAgICAgb25PZmZsaW5lUmVhZHk6ICgpID0+IHRoaXMuc2hvd09mZmxpbmVQcm9tcHQoKSxcbiAgICAgICAgICAgIG9uUmVnaXN0ZXJlZDogcmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5yZWdpc3RyYXRpb24gPSByZWdpc3RyYXRpb247XG4gICAgICAgICAgICAgIC8vIOavj+Wwj+aZguaqouafpeabtOaWsFxuICAgICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiByZWdpc3RyYXRpb24udXBkYXRlKCksIDYwICogNjAgKiAxMDAwKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdTZXJ2aWNlIFdvcmtlciDoqLvlhorlpLHmlZc6JywgZXJyb3IpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzaG93VXBkYXRlUHJvbXB0KCkge1xuICAgICAgICB0aGlzLm5lZWRSZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgLy8g5qih5pOs6aGv56S65pu05paw5o+Q56S6XG4gICAgICAgIGNvbnN0IHByb21wdEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVVwZGF0ZVByb21wdCgpO1xuICAgICAgICBkb2N1bWVudC5ib2R5Py5hcHBlbmRDaGlsZChwcm9tcHRFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgc2hvd09mZmxpbmVQcm9tcHQoKSB7XG4gICAgICAgIHRoaXMuaXNPZmZsaW5lUmVhZHkgPSB0cnVlO1xuICAgICAgICAvLyDmqKHmk6zpoa/npLrpm6Lnt5rlsLHnt5Lmj5DnpLpcbiAgICAgICAgY29uc3QgcHJvbXB0RWxlbWVudCA9IHRoaXMuY3JlYXRlT2ZmbGluZVByb21wdCgpO1xuICAgICAgICBkb2N1bWVudC5ib2R5Py5hcHBlbmRDaGlsZChwcm9tcHRFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaGlkZVByb21wdCgpIHtcbiAgICAgICAgY29uc3QgcHJvbXB0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wd2EtcHJvbXB0Jyk7XG4gICAgICAgIHByb21wdHMuZm9yRWFjaChwcm9tcHQgPT4gcHJvbXB0LnJlbW92ZSgpKTtcbiAgICAgIH1cblxuICAgICAgY3JlYXRlVXBkYXRlUHJvbXB0KCkge1xuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZGl2LmNsYXNzTmFtZSA9ICdwd2EtcHJvbXB0IHVwZGF0ZS1wcm9tcHQnO1xuICAgICAgICBkaXYuaW5uZXJIVE1MID0gYFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9tcHQtY29udGVudFwiPlxuICAgICAgICAgICAgPHA+5oeJ55So56iL5byP5pyJ5paw54mI5pys5Y+v55SoPC9wPlxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cInVwZGF0ZS1idG5cIj7mm7TmlrA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJjbG9zZS1idG5cIj7pl5zplok8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICAgIH1cblxuICAgICAgY3JlYXRlT2ZmbGluZVByb21wdCgpIHtcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSAncHdhLXByb21wdCBvZmZsaW5lLXByb21wdCc7XG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInByb21wdC1jb250ZW50XCI+XG4gICAgICAgICAgICA8cD7mh4nnlKjnqIvlvI/lt7Lmupblgpnlpb3pm6Lnt5rkvb/nlKg8L3A+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwib2stYnRuXCI+56K65a6aPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgICAgIHJldHVybiBkaXY7XG4gICAgICB9XG5cbiAgICAgIGFzeW5jIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgICAgaWYgKHRoaXMucmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVnaXN0cmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+aqouafpeabtOaWsOWkseaVlzonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgYXN5bmMgYXBwbHlVcGRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZVNXKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlU1coKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfmh4nnlKjmm7TmlrDlpLHmlZc6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGdldFN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuZWVkUmVmcmVzaDogdGhpcy5uZWVkUmVmcmVzaCxcbiAgICAgICAgICBpc09mZmxpbmVSZWFkeTogdGhpcy5pc09mZmxpbmVSZWFkeSxcbiAgICAgICAgICBoYXNSZWdpc3RyYXRpb246ICEhdGhpcy5yZWdpc3RyYXRpb24sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlTWFuYWdlciA9IG5ldyBQV0FVcGRhdGVNYW5hZ2VyKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTZXJ2aWNlIFdvcmtlciDoqLvlhoonLCAoKSA9PiB7XG4gICAgdGVzdCgn5oeJ6Kmy6IO95oiQ5Yqf6Ki75YaKIFNlcnZpY2UgV29ya2VyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBkYXRlTWFuYWdlci5yZWdpc3RlclNlcnZpY2VXb3JrZXIoKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdCh1cGRhdGVNYW5hZ2VyLnVwZGF0ZVNXKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn6Ki75YaK5b6M5oeJ6Kmy6IO9542y5Y+WIHJlZ2lzdHJhdGlvbicsIGRvbmUgPT4ge1xuICAgICAgdXBkYXRlTWFuYWdlci5yZWdpc3RlclNlcnZpY2VXb3JrZXIoKTtcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGV4cGVjdCh1cGRhdGVNYW5hZ2VyLnJlZ2lzdHJhdGlvbikudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KHVwZGF0ZU1hbmFnZXIucmVnaXN0cmF0aW9uLnVwZGF0ZSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgMTUwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+abtOaWsOaPkOekuicsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73poa/npLrmm7TmlrDmj5DnpLonLCAoKSA9PiB7XG4gICAgICAvLyBNb2NrIERPTVxuICAgICAgZ2xvYmFsLmRvY3VtZW50ID0ge1xuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgYXBwZW5kQ2hpbGQ6IGplc3QuZm4oKSxcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlRWxlbWVudDogamVzdC5mbih0YWcgPT4gKHtcbiAgICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgICAgIGlubmVySFRNTDogJycsXG4gICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICAgIHJlbW92ZTogamVzdC5mbigpLFxuICAgICAgICB9KSksXG4gICAgICB9O1xuXG4gICAgICB1cGRhdGVNYW5hZ2VyLnNob3dVcGRhdGVQcm9tcHQoKTtcblxuICAgICAgZXhwZWN0KHVwZGF0ZU1hbmFnZXIubmVlZFJlZnJlc2gpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6IO96aGv56S66Zui57ea5bCx57eS5o+Q56S6JywgKCkgPT4ge1xuICAgICAgZ2xvYmFsLmRvY3VtZW50ID0ge1xuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgYXBwZW5kQ2hpbGQ6IGplc3QuZm4oKSxcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlRWxlbWVudDogamVzdC5mbih0YWcgPT4gKHtcbiAgICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgICAgIGlubmVySFRNTDogJycsXG4gICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICAgIHJlbW92ZTogamVzdC5mbigpLFxuICAgICAgICB9KSksXG4gICAgICB9O1xuXG4gICAgICB1cGRhdGVNYW5hZ2VyLnNob3dPZmZsaW5lUHJvbXB0KCk7XG5cbiAgICAgIGV4cGVjdCh1cGRhdGVNYW5hZ2VyLmlzT2ZmbGluZVJlYWR5KS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDvemaseiXj+aPkOekuicsICgpID0+IHtcbiAgICAgIGdsb2JhbC5kb2N1bWVudCA9IHtcbiAgICAgICAgcXVlcnlTZWxlY3RvckFsbDogamVzdC5mbigoKSA9PiBbeyByZW1vdmU6IGplc3QuZm4oKSB9LCB7IHJlbW92ZTogamVzdC5mbigpIH1dKSxcbiAgICAgIH07XG5cbiAgICAgIHVwZGF0ZU1hbmFnZXIuaGlkZVByb21wdCgpO1xuXG4gICAgICBleHBlY3QoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy5wd2EtcHJvbXB0Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfmm7TmlrDlip/og70nLCAoKSA9PiB7XG4gICAgdGVzdCgn5oeJ6Kmy6IO95qqi5p+l5pu05pawJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdXBkYXRlTWFuYWdlci5yZWdpc3RlclNlcnZpY2VXb3JrZXIoKTtcblxuICAgICAgLy8g562J5b6FIHJlZ2lzdHJhdGlvbiDoqK3nva5cbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxNTApKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBkYXRlTWFuYWdlci5jaGVja0ZvclVwZGF0ZXMoKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdCh1cGRhdGVNYW5hZ2VyLnJlZ2lzdHJhdGlvbi51cGRhdGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aykuaciSByZWdpc3RyYXRpb24g5pmC5qqi5p+l5pu05paw5oeJ6Kmy6L+U5ZueIGZhbHNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBkYXRlTWFuYWdlci5jaGVja0ZvclVwZGF0ZXMoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6IO95oeJ55So5pu05pawJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdXBkYXRlTWFuYWdlci5yZWdpc3RlclNlcnZpY2VXb3JrZXIoKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBkYXRlTWFuYWdlci5hcHBseVVwZGF0ZSgpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChtb2NrVXBkYXRlU1cpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+eLgOaFi+afpeipoicsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73njbLlj5bmraPnorrnmoTni4DmhYsnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbml0aWFsU3RhdHVzID0gdXBkYXRlTWFuYWdlci5nZXRTdGF0dXMoKTtcbiAgICAgIGV4cGVjdChpbml0aWFsU3RhdHVzKS50b0VxdWFsKHtcbiAgICAgICAgbmVlZFJlZnJlc2g6IGZhbHNlLFxuICAgICAgICBpc09mZmxpbmVSZWFkeTogZmFsc2UsXG4gICAgICAgIGhhc1JlZ2lzdHJhdGlvbjogZmFsc2UsXG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgdXBkYXRlTWFuYWdlci5yZWdpc3RlclNlcnZpY2VXb3JrZXIoKTtcbiAgICAgIHVwZGF0ZU1hbmFnZXIuc2hvd1VwZGF0ZVByb21wdCgpO1xuICAgICAgdXBkYXRlTWFuYWdlci5zaG93T2ZmbGluZVByb21wdCgpO1xuXG4gICAgICBjb25zdCBmaW5hbFN0YXR1cyA9IHVwZGF0ZU1hbmFnZXIuZ2V0U3RhdHVzKCk7XG4gICAgICBleHBlY3QoZmluYWxTdGF0dXMubmVlZFJlZnJlc2gpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZmluYWxTdGF0dXMuaXNPZmZsaW5lUmVhZHkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdDYWNoZSBTdHJhdGVneScsICgpID0+IHtcbiAgbGV0IGNhY2hlTWFuYWdlcjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyBNb2NrIENhY2hlIEFQSVxuICAgIGNvbnN0IG1vY2tDYWNoZSA9IHtcbiAgICAgIGFkZDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG4gICAgICBhZGRBbGw6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxuICAgICAgcHV0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbiAgICAgIG1hdGNoOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSksXG4gICAgICBkZWxldGU6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRydWUpKSxcbiAgICAgIGtleXM6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFtdKSksXG4gICAgfTtcblxuICAgIGdsb2JhbC5jYWNoZXMgPSB7XG4gICAgICBvcGVuOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShtb2NrQ2FjaGUpKSxcbiAgICAgIGRlbGV0ZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUodHJ1ZSkpLFxuICAgICAga2V5czogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoWydjYWNoZS12MScsICdjYWNoZS12MiddKSksXG4gICAgfTtcblxuICAgIC8vIOaooeaTrCBDYWNoZU1hbmFnZXIg6aGe5YilXG4gICAgY2xhc3MgQ2FjaGVNYW5hZ2VyIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNhY2hlTmFtZSA9ICdidW5ueS1jbGljay1jYWNoZS12MSc7XG4gICAgICAgIHRoaXMuc3RhdGljQ2FjaGVOYW1lID0gJ2J1bm55LWNsaWNrLXN0YXRpYy12MSc7XG4gICAgICB9XG5cbiAgICAgIGFzeW5jIHByZUNhY2hlKHVybHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBjYWNoZSA9IGF3YWl0IGNhY2hlcy5vcGVuKHRoaXMuY2FjaGVOYW1lKTtcbiAgICAgICAgICBhd2FpdCBjYWNoZS5hZGRBbGwodXJscyk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign6aCQ5b+r5Y+W5aSx5pWXOicsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYXN5bmMgY2FjaGVSZXNwb25zZShyZXF1ZXN0LCByZXNwb25zZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGNhY2hlID0gYXdhaXQgY2FjaGVzLm9wZW4odGhpcy5jYWNoZU5hbWUpO1xuICAgICAgICAgIGF3YWl0IGNhY2hlLnB1dChyZXF1ZXN0LCByZXNwb25zZS5jbG9uZSgpKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCflv6vlj5blm57mh4nlpLHmlZc6JywgZXJyb3IpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhc3luYyBnZXRDYWNoZWRSZXNwb25zZShyZXF1ZXN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgY2FjaGUgPSBhd2FpdCBjYWNoZXMub3Blbih0aGlzLmNhY2hlTmFtZSk7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjYWNoZS5tYXRjaChyZXF1ZXN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign542y5Y+W5b+r5Y+W5aSx5pWXOicsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhc3luYyBjbGVhck9sZENhY2hlcyhjdXJyZW50VmVyc2lvbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGNhY2hlTmFtZXMgPSBhd2FpdCBjYWNoZXMua2V5cygpO1xuICAgICAgICAgIGNvbnN0IG9sZENhY2hlcyA9IGNhY2hlTmFtZXMuZmlsdGVyKFxuICAgICAgICAgICAgbmFtZSA9PiBuYW1lLnN0YXJ0c1dpdGgoJ2J1bm55LWNsaWNrLScpICYmIG5hbWUgIT09IGN1cnJlbnRWZXJzaW9uXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNvbnN0IGRlbGV0ZVByb21pc2VzID0gb2xkQ2FjaGVzLm1hcChuYW1lID0+IGNhY2hlcy5kZWxldGUobmFtZSkpO1xuICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGRlbGV0ZVByb21pc2VzKTtcblxuICAgICAgICAgIHJldHVybiBvbGRDYWNoZXMubGVuZ3RoO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+a4heeQhuiIiuW/q+WPluWkseaVlzonLCBlcnJvcik7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYXN5bmMgZ2V0Q2FjaGVTdGF0cygpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBjYWNoZSA9IGF3YWl0IGNhY2hlcy5vcGVuKHRoaXMuY2FjaGVOYW1lKTtcbiAgICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgY2FjaGUua2V5cygpO1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNhY2hlTmFtZTogdGhpcy5jYWNoZU5hbWUsXG4gICAgICAgICAgICBpdGVtQ291bnQ6IGtleXMubGVuZ3RoLFxuICAgICAgICAgICAga2V5czoga2V5cy5tYXAocmVxID0+IHJlcS51cmwpLFxuICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign542y5Y+W5b+r5Y+W57Wx6KiI5aSx5pWXOicsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNhY2hlTWFuYWdlciA9IG5ldyBDYWNoZU1hbmFnZXIoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+mgkOW/q+WPluWKn+iDvScsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73poJDlv6vlj5bmjIflrpogVVJMJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXJscyA9IFsnL2luZGV4Lmh0bWwnLCAnL3N0eWxlcy5jc3MnLCAnL2FwcC5qcycsICcvbWFuaWZlc3QuanNvbiddO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWNoZU1hbmFnZXIucHJlQ2FjaGUodXJscyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoY2FjaGVzLm9wZW4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdidW5ueS1jbGljay1jYWNoZS12MScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn5YuV5oWL5b+r5Y+WJywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsuiDveW/q+WPluWbnuaHiScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0gbmV3IFJlcXVlc3QoJy9hcGkvZGF0YScpO1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0gbmV3IFJlc3BvbnNlKCd7XCJkYXRhXCI6IFwidGVzdFwifScsIHtcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gTW9jayBSZXNwb25zZS5jbG9uZSgpXG4gICAgICBtb2NrUmVzcG9uc2UuY2xvbmUgPSBqZXN0LmZuKCgpID0+IG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhY2hlTWFuYWdlci5jYWNoZVJlc3BvbnNlKG1vY2tSZXF1ZXN0LCBtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG1vY2tSZXNwb25zZS5jbG9uZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy6IO9542y5Y+W5b+r5Y+W55qE5Zue5oeJJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1JlcXVlc3QgPSBuZXcgUmVxdWVzdCgnL2FwaS9kYXRhJyk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2FjaGVNYW5hZ2VyLmdldENhY2hlZFJlc3BvbnNlKG1vY2tSZXF1ZXN0KTtcblxuICAgICAgZXhwZWN0KGNhY2hlcy5vcGVuKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYnVubnktY2xpY2stY2FjaGUtdjEnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+W/q+WPlueuoeeQhicsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73muIXnkIboiIrlv6vlj5YnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkZWxldGVkQ291bnQgPSBhd2FpdCBjYWNoZU1hbmFnZXIuY2xlYXJPbGRDYWNoZXMoJ2J1bm55LWNsaWNrLWNhY2hlLXYyJyk7XG5cbiAgICAgIGV4cGVjdChkZWxldGVkQ291bnQpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICBleHBlY3QoY2FjaGVzLmtleXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveeNsuWPluW/q+WPlue1seioiCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgY2FjaGVNYW5hZ2VyLmdldENhY2hlU3RhdHMoKTtcblxuICAgICAgZXhwZWN0KHN0YXRzKS50b0hhdmVQcm9wZXJ0eSgnY2FjaGVOYW1lJyk7XG4gICAgICBleHBlY3Qoc3RhdHMpLnRvSGF2ZVByb3BlcnR5KCdpdGVtQ291bnQnKTtcbiAgICAgIGV4cGVjdChzdGF0cykudG9IYXZlUHJvcGVydHkoJ2tleXMnKTtcbiAgICAgIGV4cGVjdChzdGF0cy5jYWNoZU5hbWUpLnRvQmUoJ2J1bm55LWNsaWNrLWNhY2hlLXYxJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdPZmZsaW5lIERldGVjdGlvbicsICgpID0+IHtcbiAgbGV0IG9mZmxpbmVNYW5hZ2VyO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIE1vY2sgb25saW5lL29mZmxpbmUgZXZlbnRzXG4gICAgZ2xvYmFsLm5hdmlnYXRvci5vbkxpbmUgPSB0cnVlO1xuICAgIGdsb2JhbC53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciA9IGplc3QuZm4oKTtcbiAgICBnbG9iYWwud2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBqZXN0LmZuKCk7XG5cbiAgICAvLyDmqKHmk6wgT2ZmbGluZU1hbmFnZXIg6aGe5YilXG4gICAgY2xhc3MgT2ZmbGluZU1hbmFnZXIge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaXNPbmxpbmUgPSBuYXZpZ2F0b3Iub25MaW5lO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IHtcbiAgICAgICAgICBvbmxpbmU6IFtdLFxuICAgICAgICAgIG9mZmxpbmU6IFtdLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldHVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIH1cblxuICAgICAgc2V0dXBFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsIHRoaXMuaGFuZGxlT25saW5lLmJpbmQodGhpcykpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIHRoaXMuaGFuZGxlT2ZmbGluZS5iaW5kKHRoaXMpKTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlT25saW5lKCkge1xuICAgICAgICB0aGlzLmlzT25saW5lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25saW5lLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSk7XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZU9mZmxpbmUoKSB7XG4gICAgICAgIHRoaXMuaXNPbmxpbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Mub2ZmbGluZS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpO1xuICAgICAgfVxuXG4gICAgICBvbk9ubGluZShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNhbGxiYWNrcy5vbmxpbmUucHVzaChjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIG9uT2ZmbGluZShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNhbGxiYWNrcy5vZmZsaW5lLnB1c2goY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBnZXRTdGF0dXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNPbmxpbmU6IHRoaXMuaXNPbmxpbmUsXG4gICAgICAgICAgbGFzdENoZWNrOiBEYXRlLm5vdygpLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBhc3luYyBjaGVja0Nvbm5lY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8g5qih5pOs57ay6Lev5qqi5p+lXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL3BpbmcnLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdIRUFEJyxcbiAgICAgICAgICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5vaztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvbmxpbmUnLCB0aGlzLmhhbmRsZU9ubGluZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgdGhpcy5oYW5kbGVPZmZsaW5lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNb2NrIGZldGNoIGZvciBjb25uZWN0aW9uIGNoZWNrXG4gICAgZ2xvYmFsLmZldGNoID0gamVzdC5mbigoKSA9PlxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgb2ZmbGluZU1hbmFnZXIgPSBuZXcgT2ZmbGluZU1hbmFnZXIoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+S6i+S7tuebo+iBvScsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLoqK3nva7nt5rkuIov6Zui57ea5LqL5Lu255uj6IG95ZmoJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnb25saW5lJywgZXhwZWN0LmFueShGdW5jdGlvbikpO1xuICAgICAgZXhwZWN0KHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnb2ZmbGluZScsIGV4cGVjdC5hbnkoRnVuY3Rpb24pKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveiou+WGiue3muS4iuWbnuiqvycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gamVzdC5mbigpO1xuICAgICAgb2ZmbGluZU1hbmFnZXIub25PbmxpbmUoY2FsbGJhY2spO1xuXG4gICAgICBleHBlY3Qob2ZmbGluZU1hbmFnZXIuY2FsbGJhY2tzLm9ubGluZSkudG9Db250YWluKGNhbGxiYWNrKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveiou+WGiumboue3muWbnuiqvycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gamVzdC5mbigpO1xuICAgICAgb2ZmbGluZU1hbmFnZXIub25PZmZsaW5lKGNhbGxiYWNrKTtcblxuICAgICAgZXhwZWN0KG9mZmxpbmVNYW5hZ2VyLmNhbGxiYWNrcy5vZmZsaW5lKS50b0NvbnRhaW4oY2FsbGJhY2spO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn54uA5oWL5qqi5risJywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsuiDveeNsuWPlumAo+e3mueLgOaFiycsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXR1cyA9IG9mZmxpbmVNYW5hZ2VyLmdldFN0YXR1cygpO1xuXG4gICAgICBleHBlY3Qoc3RhdHVzKS50b0hhdmVQcm9wZXJ0eSgnaXNPbmxpbmUnKTtcbiAgICAgIGV4cGVjdChzdGF0dXMpLnRvSGF2ZVByb3BlcnR5KCdsYXN0Q2hlY2snKTtcbiAgICAgIGV4cGVjdChzdGF0dXMuaXNPbmxpbmUpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLog73mqqLmn6XntrLot6/pgKPnt5onLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpc0Nvbm5lY3RlZCA9IGF3YWl0IG9mZmxpbmVNYW5hZ2VyLmNoZWNrQ29ubmVjdGlvbigpO1xuXG4gICAgICBleHBlY3QoaXNDb25uZWN0ZWQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvcGluZycsIHtcbiAgICAgICAgbWV0aG9kOiAnSEVBRCcsXG4gICAgICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfkuovku7bomZXnkIYnLCAoKSA9PiB7XG4gICAgdGVzdCgn57ea5LiK5LqL5Lu25oeJ6Kmy6Ke455m85Zue6Kq/JywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSBqZXN0LmZuKCk7XG4gICAgICBvZmZsaW5lTWFuYWdlci5vbk9ubGluZShjYWxsYmFjayk7XG5cbiAgICAgIG9mZmxpbmVNYW5hZ2VyLmhhbmRsZU9ubGluZSgpO1xuXG4gICAgICBleHBlY3QoY2FsbGJhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChvZmZsaW5lTWFuYWdlci5pc09ubGluZSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+mboue3muS6i+S7tuaHieipsuinuOeZvOWbnuiqvycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gamVzdC5mbigpO1xuICAgICAgb2ZmbGluZU1hbmFnZXIub25PZmZsaW5lKGNhbGxiYWNrKTtcblxuICAgICAgb2ZmbGluZU1hbmFnZXIuaGFuZGxlT2ZmbGluZSgpO1xuXG4gICAgICBleHBlY3QoY2FsbGJhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChvZmZsaW5lTWFuYWdlci5pc09ubGluZSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdTdG9yYWdlIFF1b3RhIE1hbmFnZW1lbnQnLCAoKSA9PiB7XG4gIGxldCBxdW90YU1hbmFnZXI7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8g5qih5pOsIFF1b3RhTWFuYWdlciDpoZ7liKVcbiAgICBjbGFzcyBRdW90YU1hbmFnZXIge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMud2FybmluZ1RocmVzaG9sZCA9IDAuODsgLy8gODAlXG4gICAgICAgIHRoaXMuY3JpdGljYWxUaHJlc2hvbGQgPSAwLjk1OyAvLyA5NSVcbiAgICAgIH1cblxuICAgICAgYXN5bmMgZ2V0U3RvcmFnZUVzdGltYXRlKCkge1xuICAgICAgICBpZiAoJ3N0b3JhZ2UnIGluIG5hdmlnYXRvciAmJiAnZXN0aW1hdGUnIGluIG5hdmlnYXRvci5zdG9yYWdlKSB7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IG5hdmlnYXRvci5zdG9yYWdlLmVzdGltYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGFzeW5jIGNoZWNrUXVvdGEoKSB7XG4gICAgICAgIGNvbnN0IGVzdGltYXRlID0gYXdhaXQgdGhpcy5nZXRTdG9yYWdlRXN0aW1hdGUoKTtcbiAgICAgICAgaWYgKCFlc3RpbWF0ZSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgeyBxdW90YSwgdXNhZ2UgfSA9IGVzdGltYXRlO1xuICAgICAgICBjb25zdCB1c2FnZVBlcmNlbnRhZ2UgPSBxdW90YSA+IDAgPyB1c2FnZSAvIHF1b3RhIDogMDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHF1b3RhLFxuICAgICAgICAgIHVzYWdlLFxuICAgICAgICAgIGF2YWlsYWJsZTogcXVvdGEgLSB1c2FnZSxcbiAgICAgICAgICB1c2FnZVBlcmNlbnRhZ2UsXG4gICAgICAgICAgc3RhdHVzOiB0aGlzLmdldFF1b3RhU3RhdHVzKHVzYWdlUGVyY2VudGFnZSksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGdldFF1b3RhU3RhdHVzKHBlcmNlbnRhZ2UpIHtcbiAgICAgICAgaWYgKHBlcmNlbnRhZ2UgPj0gdGhpcy5jcml0aWNhbFRocmVzaG9sZCkgcmV0dXJuICdjcml0aWNhbCc7XG4gICAgICAgIGlmIChwZXJjZW50YWdlID49IHRoaXMud2FybmluZ1RocmVzaG9sZCkgcmV0dXJuICd3YXJuaW5nJztcbiAgICAgICAgcmV0dXJuICdub3JtYWwnO1xuICAgICAgfVxuXG4gICAgICBhc3luYyByZXF1ZXN0UGVyc2lzdGVudFN0b3JhZ2UoKSB7XG4gICAgICAgIGlmICgnc3RvcmFnZScgaW4gbmF2aWdhdG9yICYmICdwZXJzaXN0JyBpbiBuYXZpZ2F0b3Iuc3RvcmFnZSkge1xuICAgICAgICAgIHJldHVybiBhd2FpdCBuYXZpZ2F0b3Iuc3RvcmFnZS5wZXJzaXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBmb3JtYXRCeXRlcyhieXRlcykge1xuICAgICAgICBpZiAoYnl0ZXMgPT09IDApIHJldHVybiAnMCBCeXRlcyc7XG4gICAgICAgIGNvbnN0IGsgPSAxMDI0O1xuICAgICAgICBjb25zdCBzaXplcyA9IFsnQnl0ZXMnLCAnS0InLCAnTUInLCAnR0InLCAnVEInXTtcbiAgICAgICAgY29uc3QgaSA9IE1hdGguZmxvb3IoTWF0aC5sb2coYnl0ZXMpIC8gTWF0aC5sb2coaykpO1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBNYXRoLnBvdyhrLCBpKSkudG9GaXhlZCgyKSkgKyAnICcgKyBzaXplc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdW90YU1hbmFnZXIgPSBuZXcgUXVvdGFNYW5hZ2VyKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfphY3poY3mqqLmn6UnLCAoKSA9PiB7XG4gICAgdGVzdCgn5oeJ6Kmy6IO9542y5Y+W5YSy5a2Y5Lyw566XJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXN0aW1hdGUgPSBhd2FpdCBxdW90YU1hbmFnZXIuZ2V0U3RvcmFnZUVzdGltYXRlKCk7XG5cbiAgICAgIGV4cGVjdChlc3RpbWF0ZSkudG9IYXZlUHJvcGVydHkoJ3F1b3RhJyk7XG4gICAgICBleHBlY3QoZXN0aW1hdGUpLnRvSGF2ZVByb3BlcnR5KCd1c2FnZScpO1xuICAgICAgZXhwZWN0KG5hdmlnYXRvci5zdG9yYWdlLmVzdGltYXRlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLog73mqqLmn6XphY3poY3ni4DmhYsnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBxdW90YUluZm8gPSBhd2FpdCBxdW90YU1hbmFnZXIuY2hlY2tRdW90YSgpO1xuXG4gICAgICBleHBlY3QocXVvdGFJbmZvKS50b0hhdmVQcm9wZXJ0eSgncXVvdGEnKTtcbiAgICAgIGV4cGVjdChxdW90YUluZm8pLnRvSGF2ZVByb3BlcnR5KCd1c2FnZScpO1xuICAgICAgZXhwZWN0KHF1b3RhSW5mbykudG9IYXZlUHJvcGVydHkoJ2F2YWlsYWJsZScpO1xuICAgICAgZXhwZWN0KHF1b3RhSW5mbykudG9IYXZlUHJvcGVydHkoJ3VzYWdlUGVyY2VudGFnZScpO1xuICAgICAgZXhwZWN0KHF1b3RhSW5mbykudG9IYXZlUHJvcGVydHkoJ3N0YXR1cycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5oeJ6Kmy5q2j56K65Yik5pa36YWN6aGN54uA5oWLJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHF1b3RhTWFuYWdlci5nZXRRdW90YVN0YXR1cygwLjUpKS50b0JlKCdub3JtYWwnKTtcbiAgICAgIGV4cGVjdChxdW90YU1hbmFnZXIuZ2V0UXVvdGFTdGF0dXMoMC44NSkpLnRvQmUoJ3dhcm5pbmcnKTtcbiAgICAgIGV4cGVjdChxdW90YU1hbmFnZXIuZ2V0UXVvdGFTdGF0dXMoMC45OCkpLnRvQmUoJ2NyaXRpY2FsJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfmjIHkuYXljJblhLLlrZgnLCAoKSA9PiB7XG4gICAgdGVzdCgn5oeJ6Kmy6IO96KuL5rGC5oyB5LmF5YyW5YSy5a2YJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcXVvdGFNYW5hZ2VyLnJlcXVlc3RQZXJzaXN0ZW50U3RvcmFnZSgpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG5hdmlnYXRvci5zdG9yYWdlLnBlcnNpc3QpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+W3peWFt+WHveaVuCcsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLmraPnorrmoLzlvI/ljJbkvY3lhYPntYQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocXVvdGFNYW5hZ2VyLmZvcm1hdEJ5dGVzKDApKS50b0JlKCcwIEJ5dGVzJyk7XG4gICAgICBleHBlY3QocXVvdGFNYW5hZ2VyLmZvcm1hdEJ5dGVzKDEwMjQpKS50b0JlKCcxIEtCJyk7XG4gICAgICBleHBlY3QocXVvdGFNYW5hZ2VyLmZvcm1hdEJ5dGVzKDEwNDg1NzYpKS50b0JlKCcxIE1CJyk7XG4gICAgICBleHBlY3QocXVvdGFNYW5hZ2VyLmZvcm1hdEJ5dGVzKDEwNzM3NDE4MjQpKS50b0JlKCcxIEdCJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdQV0EgSW5zdGFsbGF0aW9uJywgKCkgPT4ge1xuICBsZXQgaW5zdGFsbE1hbmFnZXI7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gTW9jayBiZWZvcmVpbnN0YWxscHJvbXB0IGV2ZW50XG4gICAgZ2xvYmFsLndpbmRvdy5hZGRFdmVudExpc3RlbmVyID0gamVzdC5mbigpO1xuXG4gICAgLy8g5qih5pOsIEluc3RhbGxNYW5hZ2VyIOmhnuWIpVxuICAgIGNsYXNzIEluc3RhbGxNYW5hZ2VyIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRlZmVycmVkUHJvbXB0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0luc3RhbGxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNJbnN0YWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXR1cEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICB9XG5cbiAgICAgIHNldHVwRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmVpbnN0YWxscHJvbXB0JywgdGhpcy5oYW5kbGVCZWZvcmVJbnN0YWxsUHJvbXB0LmJpbmQodGhpcykpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYXBwaW5zdGFsbGVkJywgdGhpcy5oYW5kbGVBcHBJbnN0YWxsZWQuYmluZCh0aGlzKSk7XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZUJlZm9yZUluc3RhbGxQcm9tcHQoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5kZWZlcnJlZFByb21wdCA9IGV2ZW50O1xuICAgICAgICB0aGlzLmlzSW5zdGFsbGFibGUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVBcHBJbnN0YWxsZWQoKSB7XG4gICAgICAgIHRoaXMuaXNJbnN0YWxsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlZmVycmVkUHJvbXB0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0luc3RhbGxhYmxlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGFzeW5jIHNob3dJbnN0YWxsUHJvbXB0KCkge1xuICAgICAgICBpZiAoIXRoaXMuZGVmZXJyZWRQcm9tcHQpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5kZWZlcnJlZFByb21wdC5wcm9tcHQoKTtcbiAgICAgICAgICB0aGlzLmRlZmVycmVkUHJvbXB0ID0gbnVsbDtcbiAgICAgICAgICB0aGlzLmlzSW5zdGFsbGFibGUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+WuieijneaPkOekuuWkseaVlzonLCBlcnJvcik7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZ2V0SW5zdGFsbFN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpc0luc3RhbGxhYmxlOiB0aGlzLmlzSW5zdGFsbGFibGUsXG4gICAgICAgICAgaXNJbnN0YWxsZWQ6IHRoaXMuaXNJbnN0YWxsZWQsXG4gICAgICAgICAgY2FuUHJvbXB0OiAhIXRoaXMuZGVmZXJyZWRQcm9tcHQsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNoZWNrSWZJbnN0YWxsZWQoKSB7XG4gICAgICAgIC8vIOaqouafpeaYr+WQpuWcqOeNqOeri+aooeW8j+S4i+mBi+ihjFxuICAgICAgICBjb25zdCBpc1N0YW5kYWxvbmUgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKGRpc3BsYXktbW9kZTogc3RhbmRhbG9uZSknKS5tYXRjaGVzO1xuICAgICAgICBjb25zdCBpc0luV2ViQXBwU2NvcGUgPSB3aW5kb3cubmF2aWdhdG9yLnN0YW5kYWxvbmUgPT09IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGlzU3RhbmRhbG9uZSB8fCBpc0luV2ViQXBwU2NvcGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTW9jayBtYXRjaE1lZGlhXG4gICAgZ2xvYmFsLndpbmRvdy5tYXRjaE1lZGlhID0gamVzdC5mbigoKSA9PiAoe1xuICAgICAgbWF0Y2hlczogZmFsc2UsXG4gICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICB9KSk7XG5cbiAgICBpbnN0YWxsTWFuYWdlciA9IG5ldyBJbnN0YWxsTWFuYWdlcigpO1xuICB9KTtcblxuICBkZXNjcmliZSgn5a6J6KOd5LqL5Lu26JmV55CGJywgKCkgPT4ge1xuICAgIHRlc3QoJ+aHieipsuioree9ruWuieijneS6i+S7tuebo+iBveWZqCcsICgpID0+IHtcbiAgICAgIGV4cGVjdCh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdiZWZvcmVpbnN0YWxscHJvbXB0JyxcbiAgICAgICAgZXhwZWN0LmFueShGdW5jdGlvbilcbiAgICAgICk7XG4gICAgICBleHBlY3Qod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdhcHBpbnN0YWxsZWQnLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCfmh4noqbLomZXnkIYgYmVmb3JlaW5zdGFsbHByb21wdCDkuovku7YnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrRXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBqZXN0LmZuKCksXG4gICAgICAgIHByb21wdDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBvdXRjb21lOiAnYWNjZXB0ZWQnIH0pKSxcbiAgICAgIH07XG5cbiAgICAgIGluc3RhbGxNYW5hZ2VyLmhhbmRsZUJlZm9yZUluc3RhbGxQcm9tcHQobW9ja0V2ZW50KTtcblxuICAgICAgZXhwZWN0KG1vY2tFdmVudC5wcmV2ZW50RGVmYXVsdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KGluc3RhbGxNYW5hZ2VyLmlzSW5zdGFsbGFibGUpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaW5zdGFsbE1hbmFnZXIuZGVmZXJyZWRQcm9tcHQpLnRvQmUobW9ja0V2ZW50KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiZleeQhiBhcHBpbnN0YWxsZWQg5LqL5Lu2JywgKCkgPT4ge1xuICAgICAgaW5zdGFsbE1hbmFnZXIuZGVmZXJyZWRQcm9tcHQgPSB7IHByb21wdDogamVzdC5mbigpIH07XG4gICAgICBpbnN0YWxsTWFuYWdlci5pc0luc3RhbGxhYmxlID0gdHJ1ZTtcblxuICAgICAgaW5zdGFsbE1hbmFnZXIuaGFuZGxlQXBwSW5zdGFsbGVkKCk7XG5cbiAgICAgIGV4cGVjdChpbnN0YWxsTWFuYWdlci5pc0luc3RhbGxlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpbnN0YWxsTWFuYWdlci5kZWZlcnJlZFByb21wdCkudG9CZU51bGwoKTtcbiAgICAgIGV4cGVjdChpbnN0YWxsTWFuYWdlci5pc0luc3RhbGxhYmxlKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+WuieijneaPkOekuicsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73poa/npLrlronoo53mj5DnpLonLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUHJvbXB0ID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBvdXRjb21lOiAnYWNjZXB0ZWQnIH0pKTtcbiAgICAgIGluc3RhbGxNYW5hZ2VyLmRlZmVycmVkUHJvbXB0ID0geyBwcm9tcHQ6IG1vY2tQcm9tcHQgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW5zdGFsbE1hbmFnZXIuc2hvd0luc3RhbGxQcm9tcHQoKTtcblxuICAgICAgZXhwZWN0KG1vY2tQcm9tcHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyBvdXRjb21lOiAnYWNjZXB0ZWQnIH0pO1xuICAgICAgZXhwZWN0KGluc3RhbGxNYW5hZ2VyLmRlZmVycmVkUHJvbXB0KS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgn5rKS5pyJIGRlZmVycmVkIHByb21wdCDmmYLmh4noqbLov5Tlm54gbnVsbCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGluc3RhbGxNYW5hZ2VyLmRlZmVycmVkUHJvbXB0ID0gbnVsbDtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW5zdGFsbE1hbmFnZXIuc2hvd0luc3RhbGxQcm9tcHQoKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+WuieijneeLgOaFiycsICgpID0+IHtcbiAgICB0ZXN0KCfmh4noqbLog73njbLlj5blronoo53ni4DmhYsnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGF0dXMgPSBpbnN0YWxsTWFuYWdlci5nZXRJbnN0YWxsU3RhdHVzKCk7XG5cbiAgICAgIGV4cGVjdChzdGF0dXMpLnRvSGF2ZVByb3BlcnR5KCdpc0luc3RhbGxhYmxlJyk7XG4gICAgICBleHBlY3Qoc3RhdHVzKS50b0hhdmVQcm9wZXJ0eSgnaXNJbnN0YWxsZWQnKTtcbiAgICAgIGV4cGVjdChzdGF0dXMpLnRvSGF2ZVByb3BlcnR5KCdjYW5Qcm9tcHQnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ+aHieipsuiDveaqouafpeaYr+WQpuW3suWuieijnScsICgpID0+IHtcbiAgICAgIGNvbnN0IGlzSW5zdGFsbGVkID0gaW5zdGFsbE1hbmFnZXIuY2hlY2tJZkluc3RhbGxlZCgpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBpc0luc3RhbGxlZCkudG9CZSgnYm9vbGVhbicpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQUEsTUFBTSxDQUFDQyxTQUFTLEdBQUc7RUFDakJDLGFBQWEsRUFBRTtJQUNiQyxRQUFRLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDbkJDLEtBQUssRUFBRUMsT0FBTyxDQUFDQyxPQUFPLENBQUM7TUFDckJDLE1BQU0sRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNqQkssVUFBVSxFQUFFTixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUN0QixDQUFDLENBQUM7SUFDRk0sZUFBZSxFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUMzQixDQUFDO0VBQ0RPLE9BQU8sRUFBRTtJQUNQQyxR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