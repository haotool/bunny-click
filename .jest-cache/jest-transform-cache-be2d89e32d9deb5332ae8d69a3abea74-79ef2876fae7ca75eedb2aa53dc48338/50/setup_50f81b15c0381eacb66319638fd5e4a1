a461899eaf22f4cebd409a33ccb88c3b
"use strict";

/**
 * Jest 測試環境設置文件
 * 提供瀏覽器環境 polyfills 與模擬對象
 * [context7:/jestjs/jest:2025-08-20T01:33:46+08:00]
 */

// DOM polyfills for jsdom environment
global.requestAnimationFrame = callback => {
  return setTimeout(callback, 0);
};
global.cancelAnimationFrame = id => {
  clearTimeout(id);
};

// Performance API polyfill
if (!global.performance) {
  global.performance = {
    now: () => Date.now(),
    mark: () => {},
    measure: () => {},
    getEntriesByName: () => [],
    getEntriesByType: () => []
  };
}

// URL constructor polyfill for Web API tests
global.URL = global.URL || require('url').URL;

// Request/Response polyfills for PWA tests
global.Request = global.Request || class MockRequest {
  constructor(url, options = {}) {
    this.url = new URL(url, 'http://localhost').href;
    this.method = options.method || 'GET';
    this.headers = new Map(Object.entries(options.headers || {}));
  }
};
global.Response = global.Response || class MockResponse {
  constructor(body, options = {}) {
    this.body = body;
    this.status = options.status || 200;
    this.headers = new Map(Object.entries(options.headers || {}));
    this.ok = this.status >= 200 && this.status < 300;
  }
  async json() {
    return JSON.parse(this.body);
  }
  async text() {
    return this.body;
  }
};

// Navigator polyfill
Object.defineProperty(global, 'navigator', {
  value: {
    userAgent: 'Mozilla/5.0 (Test Environment)',
    serviceWorker: {
      register: jest.fn().mockResolvedValue({})
    }
  },
  writable: true
});

// Window event listener polyfill
global.addEventListener = global.addEventListener || jest.fn();
global.removeEventListener = global.removeEventListener || jest.fn();

// Console polyfill for cleaner test output
const originalError = console.error;
console.error = (...args) => {
  // Suppress expected errors in test environment
  if (args[0] && typeof args[0] === 'string' && (args[0].includes('Warning:') || args[0].includes('React'))) {
    return;
  }
  originalError.apply(console, args);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInNldFRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwiY2xlYXJUaW1lb3V0IiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwibWFyayIsIm1lYXN1cmUiLCJnZXRFbnRyaWVzQnlOYW1lIiwiZ2V0RW50cmllc0J5VHlwZSIsIlVSTCIsInJlcXVpcmUiLCJSZXF1ZXN0IiwiTW9ja1JlcXVlc3QiLCJjb25zdHJ1Y3RvciIsInVybCIsIm9wdGlvbnMiLCJocmVmIiwibWV0aG9kIiwiaGVhZGVycyIsIk1hcCIsIk9iamVjdCIsImVudHJpZXMiLCJSZXNwb25zZSIsIk1vY2tSZXNwb25zZSIsImJvZHkiLCJzdGF0dXMiLCJvayIsImpzb24iLCJKU09OIiwicGFyc2UiLCJ0ZXh0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInVzZXJBZ2VudCIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwid3JpdGFibGUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9yaWdpbmFsRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJhcmdzIiwiaW5jbHVkZXMiLCJhcHBseSJdLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSmVzdCDmuKzoqabnkrDlooPoqK3nva7mlofku7ZcbiAqIOaPkOS+m+eAj+imveWZqOeSsOWigyBwb2x5ZmlsbHMg6IiH5qih5pOs5bCN6LGhXG4gKiBbY29udGV4dDc6L2plc3Rqcy9qZXN0OjIwMjUtMDgtMjBUMDE6MzM6NDYrMDg6MDBdXG4gKi9cblxuLy8gRE9NIHBvbHlmaWxscyBmb3IganNkb20gZW52aXJvbm1lbnRcbmdsb2JhbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAoY2FsbGJhY2spID0+IHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xufTtcblxuZ2xvYmFsLmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gKGlkKSA9PiB7XG4gIGNsZWFyVGltZW91dChpZCk7XG59O1xuXG4vLyBQZXJmb3JtYW5jZSBBUEkgcG9seWZpbGxcbmlmICghZ2xvYmFsLnBlcmZvcm1hbmNlKSB7XG4gIGdsb2JhbC5wZXJmb3JtYW5jZSA9IHtcbiAgICBub3c6ICgpID0+IERhdGUubm93KCksXG4gICAgbWFyazogKCkgPT4ge30sXG4gICAgbWVhc3VyZTogKCkgPT4ge30sXG4gICAgZ2V0RW50cmllc0J5TmFtZTogKCkgPT4gW10sXG4gICAgZ2V0RW50cmllc0J5VHlwZTogKCkgPT4gW10sXG4gIH07XG59XG5cbi8vIFVSTCBjb25zdHJ1Y3RvciBwb2x5ZmlsbCBmb3IgV2ViIEFQSSB0ZXN0c1xuZ2xvYmFsLlVSTCA9IGdsb2JhbC5VUkwgfHwgcmVxdWlyZSgndXJsJykuVVJMO1xuXG4vLyBSZXF1ZXN0L1Jlc3BvbnNlIHBvbHlmaWxscyBmb3IgUFdBIHRlc3RzXG5nbG9iYWwuUmVxdWVzdCA9IGdsb2JhbC5SZXF1ZXN0IHx8IGNsYXNzIE1vY2tSZXF1ZXN0IHtcbiAgY29uc3RydWN0b3IodXJsLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnVybCA9IG5ldyBVUkwodXJsLCAnaHR0cDovL2xvY2FsaG9zdCcpLmhyZWY7XG4gICAgdGhpcy5tZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCAnR0VUJztcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKG9wdGlvbnMuaGVhZGVycyB8fCB7fSkpO1xuICB9XG59O1xuXG5nbG9iYWwuUmVzcG9uc2UgPSBnbG9iYWwuUmVzcG9uc2UgfHwgY2xhc3MgTW9ja1Jlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoYm9keSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzIHx8IDIwMDtcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKG9wdGlvbnMuaGVhZGVycyB8fCB7fSkpO1xuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDA7XG4gIH1cbiAgXG4gIGFzeW5jIGpzb24oKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5ib2R5KTtcbiAgfVxuICBcbiAgYXN5bmMgdGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5ib2R5O1xuICB9XG59O1xuXG4vLyBOYXZpZ2F0b3IgcG9seWZpbGxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwsICduYXZpZ2F0b3InLCB7XG4gIHZhbHVlOiB7XG4gICAgdXNlckFnZW50OiAnTW96aWxsYS81LjAgKFRlc3QgRW52aXJvbm1lbnQpJyxcbiAgICBzZXJ2aWNlV29ya2VyOiB7XG4gICAgICByZWdpc3RlcjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHt9KSxcbiAgICB9LFxuICB9LFxuICB3cml0YWJsZTogdHJ1ZSxcbn0pO1xuXG4vLyBXaW5kb3cgZXZlbnQgbGlzdGVuZXIgcG9seWZpbGxcbmdsb2JhbC5hZGRFdmVudExpc3RlbmVyID0gZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgfHwgamVzdC5mbigpO1xuZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBnbG9iYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciB8fCBqZXN0LmZuKCk7XG5cbi8vIENvbnNvbGUgcG9seWZpbGwgZm9yIGNsZWFuZXIgdGVzdCBvdXRwdXRcbmNvbnN0IG9yaWdpbmFsRXJyb3IgPSBjb25zb2xlLmVycm9yO1xuY29uc29sZS5lcnJvciA9ICguLi5hcmdzKSA9PiB7XG4gIC8vIFN1cHByZXNzIGV4cGVjdGVkIGVycm9ycyBpbiB0ZXN0IGVudmlyb25tZW50XG4gIGlmIChhcmdzWzBdICYmIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJiBcbiAgICAgIChhcmdzWzBdLmluY2x1ZGVzKCdXYXJuaW5nOicpIHx8IGFyZ3NbMF0uaW5jbHVkZXMoJ1JlYWN0JykpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG9yaWdpbmFsRXJyb3IuYXBwbHkoY29uc29sZSwgYXJncyk7XG59OyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0FBLE1BQU0sQ0FBQ0MscUJBQXFCLEdBQUlDLFFBQVEsSUFBSztFQUMzQyxPQUFPQyxVQUFVLENBQUNELFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVERixNQUFNLENBQUNJLG9CQUFvQixHQUFJQyxFQUFFLElBQUs7RUFDcENDLFlBQVksQ0FBQ0QsRUFBRSxDQUFDO0FBQ2xCLENBQUM7O0FBRUQ7QUFDQSxJQUFJLENBQUNMLE1BQU0sQ0FBQ08sV0FBVyxFQUFFO0VBQ3ZCUCxNQUFNLENBQUNPLFdBQVcsR0FBRztJQUNuQkMsR0FBRyxFQUFFQSxDQUFBLEtBQU1DLElBQUksQ0FBQ0QsR0FBRyxDQUFDLENBQUM7SUFDckJFLElBQUksRUFBRUEsQ0FBQSxLQUFNLENBQUMsQ0FBQztJQUNkQyxPQUFPLEVBQUVBLENBQUEsS0FBTSxDQUFDLENBQUM7SUFDakJDLGdCQUFnQixFQUFFQSxDQUFBLEtBQU0sRUFBRTtJQUMxQkMsZ0JBQWdCLEVBQUVBLENBQUEsS0FBTTtFQUMxQixDQUFDO0FBQ0g7O0FBRUE7QUFDQWIsTUFBTSxDQUFDYyxHQUFHLEdBQUdkLE1BQU0sQ0FBQ2MsR0FBRyxJQUFJQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUNELEdBQUc7O0FBRTdDO0FBQ0FkLE1BQU0sQ0FBQ2dCLE9BQU8sR0FBR2hCLE1BQU0sQ0FBQ2dCLE9BQU8sSUFBSSxNQUFNQyxXQUFXLENBQUM7RUFDbkRDLFdBQVdBLENBQUNDLEdBQUcsRUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzdCLElBQUksQ0FBQ0QsR0FBRyxHQUFHLElBQUlMLEdBQUcsQ0FBQ0ssR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUNFLElBQUk7SUFDaEQsSUFBSSxDQUFDQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0UsTUFBTSxJQUFJLEtBQUs7SUFDckMsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSUMsR0FBRyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ04sT0FBTyxDQUFDRyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMvRDtBQUNGLENBQUM7QUFFRHZCLE1BQU0sQ0FBQzJCLFFBQVEsR0FBRzNCLE1BQU0sQ0FBQzJCLFFBQVEsSUFBSSxNQUFNQyxZQUFZLENBQUM7RUFDdERWLFdBQVdBLENBQUNXLElBQUksRUFBRVQsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzlCLElBQUksQ0FBQ1MsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHVixPQUFPLENBQUNVLE1BQU0sSUFBSSxHQUFHO0lBQ25DLElBQUksQ0FBQ1AsT0FBTyxHQUFHLElBQUlDLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLENBQUNOLE9BQU8sQ0FBQ0csT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0QsSUFBSSxDQUFDUSxFQUFFLEdBQUcsSUFBSSxDQUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQ0EsTUFBTSxHQUFHLEdBQUc7RUFDbkQ7RUFFQSxNQUFNRSxJQUFJQSxDQUFBLEVBQUc7SUFDWCxPQUFPQyxJQUFJLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUNMLElBQUksQ0FBQztFQUM5QjtFQUVBLE1BQU1NLElBQUlBLENBQUEsRUFBRztJQUNYLE9BQU8sSUFBSSxDQUFDTixJQUFJO0VBQ2xCO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBSixNQUFNLENBQUNXLGNBQWMsQ0FBQ3BDLE1BQU0sRUFBRSxXQUFXLEVBQUU7RUFDekNxQyxLQUFLLEVBQUU7SUFDTEMsU0FBUyxFQUFFLGdDQUFnQztJQUMzQ0MsYUFBYSxFQUFFO01BQ2JDLFFBQVEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDMUM7RUFDRixDQUFDO0VBQ0RDLFFBQVEsRUFBRTtBQUNaLENBQUMsQ0FBQzs7QUFFRjtBQUNBNUMsTUFBTSxDQUFDNkMsZ0JBQWdCLEdBQUc3QyxNQUFNLENBQUM2QyxnQkFBZ0IsSUFBSUosSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztBQUM5RDFDLE1BQU0sQ0FBQzhDLG1CQUFtQixHQUFHOUMsTUFBTSxDQUFDOEMsbUJBQW1CLElBQUlMLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7O0FBRXBFO0FBQ0EsTUFBTUssYUFBYSxHQUFHQyxPQUFPLENBQUNDLEtBQUs7QUFDbkNELE9BQU8sQ0FBQ0MsS0FBSyxHQUFHLENBQUMsR0FBR0MsSUFBSSxLQUFLO0VBQzNCO0VBQ0EsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU9BLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEtBQ3JDQSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUMvRDtFQUNGO0VBQ0FKLGFBQWEsQ0FBQ0ssS0FBSyxDQUFDSixPQUFPLEVBQUVFLElBQUksQ0FBQztBQUNwQyxDQUFDIiwiaWdub3JlTGlzdCI6W119