---
description: '程式碼品質規範 - 確保程式碼品質與可維護性'
type: 'Auto Attached'
pattern: '**/*.{js,ts,jsx,tsx,css,scss,json}'
version: '1.0.0'
author: 'haotool'
last_updated: '2025-08-26T23:10:06+08:00'
---

# 程式碼品質規範

## 品質指標

### 複雜度控制

- **循環複雜度**: 每個函數 ≤ 10
- **認知複雜度**: 每個函數 ≤ 15
- **函數長度**: ≤ 50 行（不含註解）
- **檔案長度**: ≤ 500 行（特殊情況除外）

### 程式碼重複

- **重複率**: 整體專案 ≤ 3%
- **相似程式碼**: 超過 5 行相似必須抽取共用函數
- **魔術數字**: 禁止使用，必須定義為常數

### 可維護性指標

- **可維護性指數**: ≥ 70
- **技術債務比例**: ≤ 15%
- **依賴關係**: 避免循環依賴，最大深度 ≤ 5

## 程式碼風格

### JavaScript/TypeScript

```javascript
// ✅ 良好範例
const ANIMATION_DURATION = 300;

const calculateClickPosition = event => {
  const { clientX, clientY } = event;
  const rect = event.target.getBoundingClientRect();

  return {
    x: clientX - rect.left,
    y: clientY - rect.top,
  };
};

// ❌ 不良範例
const calcPos = e => {
  return {
    x: e.clientX - e.target.getBoundingClientRect().left,
    y: e.clientY - e.target.getBoundingClientRect().top,
  };
};
```

### CSS/SCSS

```css
/* ✅ 良好範例 */
.game-button {
  --button-color: #f66fb9;
  --button-hover: #52b7ff;

  background-color: var(--button-color);
  transition: background-color 0.3s ease;
}

.game-button:hover {
  background-color: var(--button-hover);
}

/* ❌ 不良範例 */
.btn {
  background: #f66fb9;
}
.btn:hover {
  background: #52b7ff;
}
```

## 測試品質要求

### 測試覆蓋率

- **行覆蓋率**: ≥ 80%
- **分支覆蓋率**: ≥ 75%
- **函數覆蓋率**: ≥ 90%
- **語句覆蓋率**: ≥ 85%

### 測試結構

```javascript
// ✅ 良好的測試結構
describe('ClickEffect', () => {
  describe('when creating particle effects', () => {
    it('should generate correct number of particles', () => {
      // Arrange
      const clickPosition = { x: 100, y: 200 };
      const expectedParticleCount = 10;

      // Act
      const effect = new ClickEffect(clickPosition);

      // Assert
      expect(effect.particles).toHaveLength(expectedParticleCount);
    });
  });
});
```

### 測試最佳實踐

- 每個測試應該獨立且可重複執行
- 使用描述性的測試名稱
- 遵循 AAA 模式 (Arrange, Act, Assert)
- Mock 外部依賴

## 效能要求

### 執行時效能

- **頁面載入時間**: ≤ 2 秒
- **互動延遲**: ≤ 100ms
- **動畫幀率**: ≥ 60 FPS
- **記憶體使用**: 穩定，無明顯洩漏

### 資源優化

- **圖片壓縮**: 使用適當格式與壓縮比
- **程式碼分割**: 按需載入，避免單一巨大包
- **快取策略**: 合理使用瀏覽器快取與 Service Worker

## 可存取性 (A11y)

### WCAG 2.1 AA 標準

- **色彩對比**: 文字對比度 ≥ 4.5:1
- **鍵盤導航**: 所有互動元素可鍵盤操作
- **螢幕閱讀器**: 提供適當的 ARIA 標籤
- **語意化 HTML**: 正確使用 HTML 語意標籤

### 實作要求

```html
<!-- ✅ 良好的無障礙實作 -->
<button class="game-button" aria-label="點擊以產生粒子效果" tabindex="0">點擊我</button>

<!-- ❌ 不良的實作 -->
<div onclick="click()">點擊</div>
```

## 安全性品質

### 程式碼安全

- **XSS 防護**: 所有用戶輸入必須驗證與轉義
- **CSRF 防護**: 實作適當的 CSRF Token
- **依賴安全**: 定期檢查與更新有漏洞的依賴

### 資料保護

- **敏感資料**: 不得在前端暴露
- **API 安全**: 實作適當的驗證與授權
- **HTTPS**: 生產環境強制使用 HTTPS

## 品質檢查工具

### 自動化檢查

- **ESLint**: 程式碼風格與潛在錯誤檢查
- **Prettier**: 程式碼格式化
- **Jest**: 單元測試與覆蓋率
- **Lighthouse**: 效能與最佳實踐檢查

### 持續整合

- 每次提交都必須通過所有品質檢查
- Pull Request 必須通過程式碼審查
- 自動化部署前的品質門檻檢查

## 文檔品質

### 程式碼文檔

```javascript
/**
 * 產生點擊特效粒子
 * @param {Object} position - 點擊位置座標
 * @param {number} position.x - X 軸座標
 * @param {number} position.y - Y 軸座標
 * @param {Object} options - 特效選項
 * @param {number} options.particleCount - 粒子數量
 * @param {string} options.color - 粒子顏色
 * @returns {ClickEffect} 特效實例
 */
function createClickEffect(position, options = {}) {
  // 實作邏輯
}
```

### README 與文檔

- 專案說明必須清晰完整
- 安裝與使用說明必須可執行
- API 文檔必須保持最新
- CHANGELOG 記錄所有重要變更
