---
description: '基礎開發規範 - 所有程式碼必須遵循'
type: 'Auto Attached'
pattern: '**/*.{js,ts,jsx,tsx,py,go,java}'
version: '1.0.0'
author: 'haotool'
last_updated: '2025-08-26T23:10:06+08:00'
---

# 基礎開發規範

## 程式碼品質要求

### 型別安全

- JavaScript 專案必須使用嚴格模式
- 避免使用 `any` 型別，採用具體型別定義
- 函數必須有明確的參數型別與返回值

### 命名規範

- 變數和函數使用 camelCase
- 常數使用 UPPER_SNAKE_CASE
- 類別使用 PascalCase
- 檔案名稱使用 kebab-case

### 錯誤處理

- 函數開頭使用 guard clauses 進行早期返回
- 避免深層巢狀的 if 語句
- 使用具體的錯誤類型而非通用 Exception

### 效能考量

- 避免在迴圈中進行昂貴操作
- 使用適當的資料結構
- 實作必要的快取機制

## 程式碼結構

### 模組化原則

- 單一職責原則：每個模組只負責一個功能
- 高內聚、低耦合的設計
- 避免循環依賴

### 註解與文檔

- 複雜邏輯必須有註解說明
- 公開 API 必須有完整文檔
- 使用 JSDoc 格式註解

## 禁止事項

- ❌ 禁止使用 `console.log` 進入生產環境
- ❌ 禁止硬編碼敏感資訊
- ❌ 禁止略過測試或品質檢查
- ❌ 禁止提交未完成的 TODO 註解
- ❌ 禁止直接修改第三方套件程式碼

## 最佳實踐

### Git 提交規範

- 使用語意化提交訊息 (Conventional Commits)
- 每次提交包含完整功能
- 提交前必須通過所有檢查

### 測試要求

- 新功能必須包含單元測試
- 測試覆蓋率不得低於 80%
- 關鍵路徑必須有整合測試

### 安全性

- 遵循 OWASP 安全準則
- 定期更新依賴套件
- 敏感資料使用環境變數
