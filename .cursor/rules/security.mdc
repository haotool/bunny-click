---
description: '安全性要求 - 遊戲安全與資料保護'
type: 'Auto Attached'
pattern: '**/*.{js,ts,jsx,tsx,html,json}'
version: '1.0.0'
author: 'haotool'
last_updated: '2025-08-26T23:10:06+08:00'
---

# 安全性要求

## Web 應用程式安全

### OWASP Top 10 防護

#### 1. 注入攻擊防護

```javascript
// ✅ 安全的資料處理
const sanitizeInput = input => {
  return DOMPurify.sanitize(input);
};

const updateScore = rawScore => {
  const score = parseInt(rawScore, 10);
  if (isNaN(score) || score < 0) {
    throw new Error('Invalid score value');
  }
  return score;
};

// ❌ 不安全的做法
const updateScoreUnsafe = score => {
  document.innerHTML = `Score: ${score}`; // XSS 風險
};
```

#### 2. 身份驗證與授權

- 實作適當的用戶身份驗證
- 使用安全的會話管理
- 實作最小權限原則

#### 3. 敏感資料暴露防護

```javascript
// ✅ 安全的環境變數使用
const config = {
  apiEndpoint: import.meta.env.VITE_API_ENDPOINT,
  // 絕不暴露私密金鑰或密碼
};

// ❌ 危險做法
const dangerousConfig = {
  secretKey: 'my-secret-key', // 絕對禁止
  apiKey: 'exposed-api-key', // 危險
};
```

### 前端安全最佳實踐

#### Content Security Policy (CSP)

```html
<!-- 建議的 CSP 設定 -->
<meta
  http-equiv="Content-Security-Policy"
  content="default-src 'self'; 
               script-src 'self' 'unsafe-inline'; 
               style-src 'self' 'unsafe-inline';
               img-src 'self' data: https:;
               connect-src 'self' https:;"
/>
```

#### HTTPS 強制執行

- 生產環境必須使用 HTTPS
- 實作 HTTP 到 HTTPS 的重定向
- 使用 HSTS 頭部

#### XSS 防護

```javascript
// ✅ 安全的 DOM 操作
const createScoreElement = score => {
  const element = document.createElement('div');
  element.textContent = `Score: ${score}`; // 自動轉義
  return element;
};

// ❌ 危險的 DOM 操作
const createScoreElementUnsafe = score => {
  const element = document.createElement('div');
  element.innerHTML = `Score: ${score}`; // XSS 風險
  return element;
};
```

## PWA 安全性

### Service Worker 安全

```javascript
// ✅ 安全的 Service Worker 實作
self.addEventListener('fetch', event => {
  // 驗證請求來源
  const url = new URL(event.request.url);
  if (url.origin !== self.location.origin) {
    return; // 拒絕跨域請求
  }

  // 安全的快取策略
  event.respondWith(caches.match(event.request).then(response => response || fetch(event.request)));
});
```

### 本地儲存安全

```javascript
// ✅ 安全的本地儲存
const saveGameData = data => {
  try {
    const sanitizedData = {
      score: parseInt(data.score, 10),
      level: parseInt(data.level, 10),
      timestamp: Date.now(),
    };

    localStorage.setItem('gameData', JSON.stringify(sanitizedData));
  } catch (error) {
    console.error('儲存失敗:', error);
  }
};

const loadGameData = () => {
  try {
    const data = localStorage.getItem('gameData');
    if (!data) return null;

    const parsed = JSON.parse(data);

    // 驗證資料結構
    if (typeof parsed.score !== 'number' || typeof parsed.level !== 'number') {
      throw new Error('Invalid data structure');
    }

    return parsed;
  } catch (error) {
    console.error('載入失敗:', error);
    return null;
  }
};
```

## 依賴管理安全

### 套件安全檢查

```bash
# 定期執行安全掃描
npm audit
npm audit fix

# 檢查過期套件
npm outdated

# 更新套件到安全版本
npm update
```

### 安全的依賴管理

```json
{
  "dependencies": {
    "package-name": "^1.2.3"
  },
  "devDependencies": {
    "audit-ci": "^6.6.1"
  },
  "scripts": {
    "security-check": "audit-ci --config audit-ci.json",
    "precommit": "npm run security-check"
  }
}
```

## 資料保護

### 用戶隱私

- 遵循 GDPR 與相關隱私法規
- 最小化資料收集
- 提供明確的隱私政策
- 實作資料刪除機制

### 資料傳輸安全

```javascript
// ✅ 安全的 API 請求
const secureApiCall = async (endpoint, data) => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 5000);

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest', // CSRF 防護
      },
      body: JSON.stringify(data),
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};
```

## 效能與安全平衡

### 安全的快取策略

```javascript
// Service Worker 中的安全快取
const CACHE_NAME = 'bunny-click-v1';
const ALLOWED_ORIGINS = [self.location.origin];

self.addEventListener('fetch', event => {
  const url = new URL(event.request.url);

  // 只快取信任的來源
  if (!ALLOWED_ORIGINS.includes(url.origin)) {
    return;
  }

  // 不快取敏感路徑
  if (url.pathname.startsWith('/api/user/')) {
    return;
  }

  event.respondWith(
    caches.match(event.request).then(response => {
      if (response) {
        return response;
      }

      return fetch(event.request.clone()).then(response => {
        if (!response || response.status !== 200) {
          return response;
        }

        const responseToCache = response.clone();
        caches.open(CACHE_NAME).then(cache => {
          cache.put(event.request, responseToCache);
        });

        return response;
      });
    })
  );
});
```

## 安全監控與日誌

### 錯誤監控

```javascript
// 安全的錯誤處理
window.addEventListener('error', event => {
  // 過濾敏感資訊
  const safeError = {
    message: event.error?.message || 'Unknown error',
    filename: event.filename,
    lineno: event.lineno,
    timestamp: Date.now(),
  };

  // 發送到安全的日誌服務
  sendErrorReport(safeError);
});

const sendErrorReport = error => {
  // 不包含任何敏感資訊
  fetch('/api/errors', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(error),
  }).catch(() => {
    // 靜默處理發送失敗
  });
};
```

## 開發階段安全

### 開發工具安全

- 開發版本不得包含除錯資訊
- 測試資料不得包含真實敏感資訊
- 開發環境與生產環境嚴格分離

### 程式碼審查安全檢查點

- [ ] 檢查是否有硬編碼的敏感資訊
- [ ] 驗證所有用戶輸入處理
- [ ] 確認錯誤處理不會洩漏敏感資訊
- [ ] 檢查第三方依賴的安全性
- [ ] 驗證 HTTPS 和安全頭部配置

## 合規性要求

### 隱私法規遵循

- GDPR (歐盟一般資料保護規則)
- CCPA (加州消費者隱私法案)
- 其他適用的地方隱私法規

### 安全標準

- OWASP ASVS (應用程式安全驗證標準)
- CSA CCM (雲端安全聯盟控制矩陣)
- ISO 27001 相關控制

## 安全事件回應

### 事件分類

1. **高危**: 資料洩漏、系統入侵
2. **中危**: 服務中斷、設定錯誤
3. **低危**: 效能問題、小型錯誤

### 回應流程

1. 立即評估影響範圍
2. 實施緊急修復措施
3. 通知相關利害關係人
4. 進行根本原因分析
5. 更新安全措施並預防重複發生
